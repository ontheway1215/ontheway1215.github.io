<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenBlog-chenqiangyi.cn</title>
  <subtitle>IT技术分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.chenqiangyi.cn/"/>
  <updated>2017-12-14T05:57:24.000Z</updated>
  <id>http://www.chenqiangyi.cn/</id>
  
  <author>
    <name>ontheway1215</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内网穿透魔法隧道</title>
    <link href="http://www.chenqiangyi.cn/2017/11/13/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E9%AD%94%E6%B3%95%E9%9A%A7%E9%81%93/"/>
    <id>http://www.chenqiangyi.cn/2017/11/13/内网穿透魔法隧道/</id>
    <published>2017-11-13T02:44:01.000Z</published>
    <updated>2017-12-14T05:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内网穿透魔法隧道"><a href="#内网穿透魔法隧道" class="headerlink" title="内网穿透魔法隧道"></a>内网穿透魔法隧道</h1><h2 id="一、-花生壳"><a href="#一、-花生壳" class="headerlink" title="一、 花生壳"></a>一、 花生壳</h2><p>优缺点： 对Windows比较友好，下载客户端可以直接使用，Mac用户要使用的话，需要买一个花生棒辅助使用</p>
<p>地址：<a href="http://service.oray.com/question/2480.html" target="_blank" rel="noopener">http://service.oray.com/question/2480.html</a> 按照说明下载使用即可。</p>
<h2 id="二、魔法隧道"><a href="#二、魔法隧道" class="headerlink" title="二、魔法隧道"></a>二、魔法隧道</h2><p>优缺点：对Windows比较友好，Mac系统使用不是很舒服</p>
<p>地址：<a href="http://www.mofasuidao.cn/" target="_blank" rel="noopener">http://www.mofasuidao.cn/</a></p>
<h2 id="三、ngrok"><a href="#三、ngrok" class="headerlink" title="三、ngrok"></a>三、ngrok</h2><p>优缺点：版本比较多，Windows、Mac、Linux系统都有<br>地址：<a href="https://www.ngrok.cc/" target="_blank" rel="noopener">https://www.ngrok.cc/</a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul>
<li>注册、登录账号</li>
<li>隧道管理 - 开通隧道 - 香港Ngrok免费服务器 （如果是付费用户的话，权限会更多）</li>
<li>输入隧道协议、隧道名称、前置域名、本地端口 然后 - 确定添加 - 确定开通（http用户名和密码可不填）<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/ngrok1.jpeg" alt="ngrok1" title="">
                </div>
                <div class="image-caption">ngrok1</div>
            </figure></li>
<li>下载mac端客户端工具 - 进入下载后的目录darwin_amd64 </li>
<li><p>执行二进制软件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /darwin_amd64</div><div class="line">./sunny clientid 004e4c4cab46d277</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/ngrok2.jpeg" alt="ngrok2" title="">
                </div>
                <div class="image-caption">ngrok2</div>
            </figure>
<ul>
<li>然后会有开启成功的提示<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/ngrok4.jpeg" alt="ngrok4" title="">
                </div>
                <div class="image-caption">ngrok4</div>
            </figure></li>
<li><p>在本地创建一个node server服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const http = require(&apos;http&apos;);</div><div class="line"></div><div class="line">const hostname = &apos;127.0.0.1&apos;;</div><div class="line">const port = 3006;</div><div class="line"></div><div class="line">const server = http.createServer((req, res) =&gt; &#123;</div><div class="line">  res.statusCode = 200;</div><div class="line">  res.setHeader(&apos;Content-Type&apos;, &apos;text/plain&apos;);</div><div class="line">  res.end(&apos;Hello World\n&apos;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(port, hostname, () =&gt; &#123;</div><div class="line">  console.log(`Server running at http://$&#123;hostname&#125;:$&#123;port&#125;/`);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>打开127.0.0.1:3006即可看到服务已开启</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/ngrok5.jpeg" alt="ngrok5" title="">
                </div>
                <div class="image-caption">ngrok5</div>
            </figure>
</li>
<li><p>换域名，用 <a href="http://ontheway1215.free.ngrok.cc" target="_blank" rel="noopener">http://ontheway1215.free.ngrok.cc</a> 查看，结果访问效果一样</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/ngrok3.jpeg" alt="ngrok3" title="">
                </div>
                <div class="image-caption">ngrok3</div>
            </figure>
</li>
<li><p>这样就可以使用外网访问内网的网页了</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;内网穿透魔法隧道&quot;&gt;&lt;a href=&quot;#内网穿透魔法隧道&quot; class=&quot;headerlink&quot; title=&quot;内网穿透魔法隧道&quot;&gt;&lt;/a&gt;内网穿透魔法隧道&lt;/h1&gt;&lt;h2 id=&quot;一、-花生壳&quot;&gt;&lt;a href=&quot;#一、-花生壳&quot; class=&quot;headerli
    
    </summary>
    
      <category term="tools" scheme="http://www.chenqiangyi.cn/categories/tools/"/>
    
    
      <category term="tools" scheme="http://www.chenqiangyi.cn/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>雅虎前端优化法则</title>
    <link href="http://www.chenqiangyi.cn/2017/09/21/%E9%9B%85%E8%99%8E%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E6%B3%95%E5%88%99/"/>
    <id>http://www.chenqiangyi.cn/2017/09/21/雅虎前端优化法则/</id>
    <published>2017-09-21T10:33:24.000Z</published>
    <updated>2017-09-21T10:35:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="尽量减少HTTP请求次数"><a href="#尽量减少HTTP请求次数" class="headerlink" title="尽量减少HTTP请求次数"></a>尽量减少HTTP请求次数</h2><p>网页加载中大部分时间都在下载js,css,flash,图片</p>
<ul>
<li>合并文件css,js,图片(css sprite)</li>
<li>内联图像data:URL scheme 低级浏览器不支持，如果放到页面中会加大html,放到css中最好，因为他可以在客户端进行缓存</li>
</ul>
<h2 id="减少DNS查找次数即减少页面中的主机名-css-js-img-flash等"><a href="#减少DNS查找次数即减少页面中的主机名-css-js-img-flash等" class="headerlink" title="减少DNS查找次数即减少页面中的主机名(css,js,img,flash等)"></a>减少DNS查找次数即减少页面中的主机名(css,js,img,flash等)</h2><ul>
<li>dns解析时浏览器处于等待状态，大部分浏览器有自己的缓存不会受到系统缓存的影响</li>
<li>减少主机名数量，则减少了dns查询，但同时减少了页面中并行下载的数量</li>
<li>把页面中的主机分成2~4个，二者可兼得</li>
</ul>
<h2 id="避免跳转"><a href="#避免跳转" class="headerlink" title="避免跳转"></a>避免跳转</h2><ul>
<li>降低了用户体验</li>
<li>url本身最后应该有/如果不带则用户访问时会发生一次301跳转</li>
<li>可以在服务器中进行设置来避免它</li>
</ul>
<h2 id="可缓存的ajax"><a href="#可缓存的ajax" class="headerlink" title="可缓存的ajax"></a>可缓存的ajax</h2><ul>
<li>可将请求的地址设置为永不过期，然后请求的地址中带上文件的最后修改时间</li>
</ul>
<h2 id="推迟加载内容-不是立刻要用的"><a href="#推迟加载内容-不是立刻要用的" class="headerlink" title="推迟加载内容(不是立刻要用的)"></a>推迟加载内容(不是立刻要用的)</h2><ul>
<li>用onload把页面分成两部分 折叠的，隐藏的，js效果可以后加重</li>
<li>img, css, js根据需求进行加重</li>
</ul>
<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><ul>
<li>在用户空闲时加载以后要用到的img,css,js这些都可以缓存</li>
<li>在这个页面加载下个页面要用到的页面组件</li>
<li>同样可以把这些要加载的放到onload里面</li>
</ul>
<h2 id="减少DOM元素数量"><a href="#减少DOM元素数量" class="headerlink" title="减少DOM元素数量"></a>减少DOM元素数量</h2><ul>
<li>页面元素越多JavaScript遍历DOM的效率越慢</li>
<li>YUI CSS utilities</li>
<li>document.getElementsByTagName(‘*’).length计算页面全部的元素个数</li>
</ul>
<h2 id="根据域名划页面内容"><a href="#根据域名划页面内容" class="headerlink" title="根据域名划页面内容"></a>根据域名划页面内容</h2><ul>
<li>可以并行下载考虑到dns查询时间2~3个最好</li>
</ul>
<h2 id="使iframe的数量最小"><a href="#使iframe的数量最小" class="headerlink" title="使iframe的数量最小"></a>使iframe的数量最小</h2><p>优点：</p>
<pre><code>* 解决加载缓慢的第三方内容如图表和广告等的加载问题

* Security sandbox

* 并行加载脚本
</code></pre><p>缺点：</p>
<pre><code>* 即时内容为空，加载也需要时间

* 会阻止页面加载

* 没有语义
</code></pre><h2 id="避免404"><a href="#避免404" class="headerlink" title="避免404"></a>避免404</h2><p>##使用内容分发网络</p>
<h2 id="为文件头制定Expires或Cache-Control"><a href="#为文件头制定Expires或Cache-Control" class="headerlink" title="为文件头制定Expires或Cache-Control"></a>为文件头制定Expires或Cache-Control</h2><h2 id="Gzip压缩文件内容"><a href="#Gzip压缩文件内容" class="headerlink" title="Gzip压缩文件内容"></a>Gzip压缩文件内容</h2><h2 id="配置ETag"><a href="#配置ETag" class="headerlink" title="配置ETag"></a>配置ETag</h2><p>web服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制</p>
<h2 id="尽早刷新输出缓冲"><a href="#尽早刷新输出缓冲" class="headerlink" title="尽早刷新输出缓冲"></a>尽早刷新输出缓冲</h2><p>最好放到head和body之间&lt;?php flush();?&gt;</p>
<h2 id="使用GET来完成AJAX请求"><a href="#使用GET来完成AJAX请求" class="headerlink" title="使用GET来完成AJAX请求"></a>使用GET来完成AJAX请求</h2><p>POST方法是一个“两步走”的过程：首先发送文件头，然后才发送数据</p>
<h2 id="把样式表置于顶部"><a href="#把样式表置于顶部" class="headerlink" title="把样式表置于顶部"></a>把样式表置于顶部</h2><p>把样式表放到<head>内会使页面有步骤的加载显示，以便于及时给用户反馈(显示的页面),改善了用户体验</head></p>
<p>##避免使用CSS表达式(Expression)<br>他们的计算频率要比我们想象的多，在页面缩放，滚动，或者即使是鼠标的移动时都会计算</p>
<h2 id="使用外部JavaScript和CSS"><a href="#使用外部JavaScript和CSS" class="headerlink" title="使用外部JavaScript和CSS"></a>使用外部JavaScript和CSS</h2><p>可以被缓存</p>
<h2 id="消减JavaScript和CSS"><a href="#消减JavaScript和CSS" class="headerlink" title="消减JavaScript和CSS"></a>消减JavaScript和CSS</h2><p>减少请求的大小</p>
<h2 id="用代替-import"><a href="#用代替-import" class="headerlink" title="用代替@import"></a>用<link>代替@import</h2><h2 id="避免使用滤镜"><a href="#避免使用滤镜" class="headerlink" title="避免使用滤镜"></a>避免使用滤镜</h2><p>完全避免使用AlphaImageLoader的最好方法是使用PNG8格式来代替</p>
<h2 id="把脚本置于页面底部"><a href="#把脚本置于页面底部" class="headerlink" title="把脚本置于页面底部"></a>把脚本置于页面底部</h2><ul>
<li>阻止了页面平行下载</li>
<li>HTTP/1.1规范建议，浏览器每个主机名的并行下载内容不超过两个</li>
<li>脚本加载时会阻止页面上所有的元素进行加载，即使是不同域名</li>
</ul>
<h2 id="提出重复脚本"><a href="#提出重复脚本" class="headerlink" title="提出重复脚本"></a>提出重复脚本</h2><h2 id="减少DOM访问"><a href="#减少DOM访问" class="headerlink" title="减少DOM访问"></a>减少DOM访问</h2><ul>
<li>缓存已经访问过的有关元素</li>
<li>线下更新完节点之后再将他们添加到文档中</li>
<li>避免使用JavaScript来修改页面布局</li>
</ul>
<h2 id="开发智能事件处理程序"><a href="#开发智能事件处理程序" class="headerlink" title="开发智能事件处理程序"></a>开发智能事件处理程序</h2><p>delegate方法绑定</p>
<h2 id="减少Cookie体积"><a href="#减少Cookie体积" class="headerlink" title="减少Cookie体积"></a>减少Cookie体积</h2><h2 id="减少页面内容使用无cookie域名"><a href="#减少页面内容使用无cookie域名" class="headerlink" title="减少页面内容使用无cookie域名"></a>减少页面内容使用无cookie域名</h2><h2 id="优化图像"><a href="#优化图像" class="headerlink" title="优化图像"></a>优化图像</h2><h2 id="优化CSS-Spirite"><a href="#优化CSS-Spirite" class="headerlink" title="优化CSS Spirite"></a>优化CSS Spirite</h2><ul>
<li>水平排列图像会比垂直要小</li>
<li>颜色相近的摆放一起</li>
<li>空隙不宜过大</li>
</ul>
<h2 id="不要在HTML中缩放图像"><a href="#不要在HTML中缩放图像" class="headerlink" title="不要在HTML中缩放图像"></a>不要在HTML中缩放图像</h2><h2 id="favicon-ico要小而且可缓存"><a href="#favicon-ico要小而且可缓存" class="headerlink" title="favicon.ico要小而且可缓存"></a>favicon.ico要小而且可缓存</h2><h2 id="保持单个内用小于25K"><a href="#保持单个内用小于25K" class="headerlink" title="保持单个内用小于25K"></a>保持单个内用小于25K</h2><h2 id="打包组件成复合文本"><a href="#打包组件成复合文本" class="headerlink" title="打包组件成复合文本"></a>打包组件成复合文本</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;尽量减少HTTP请求次数&quot;&gt;&lt;a href=&quot;#尽量减少HTTP请求次数&quot; class=&quot;headerlink&quot; title=&quot;尽量减少HTTP请求次数&quot;&gt;&lt;/a&gt;尽量减少HTTP请求次数&lt;/h2&gt;&lt;p&gt;网页加载中大部分时间都在下载js,css,flash,图片&lt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
      <category term="性能优化" scheme="http://www.chenqiangyi.cn/categories/JavaScript/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="http://www.chenqiangyi.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="雅虎军规" scheme="http://www.chenqiangyi.cn/tags/%E9%9B%85%E8%99%8E%E5%86%9B%E8%A7%84/"/>
    
  </entry>
  
  <entry>
    <title>centos 7 安装nginx</title>
    <link href="http://www.chenqiangyi.cn/2017/09/20/centos%207%20%E5%AE%89%E8%A3%85nginx/"/>
    <id>http://www.chenqiangyi.cn/2017/09/20/centos 7 安装nginx/</id>
    <published>2017-09-20T11:20:29.000Z</published>
    <updated>2017-12-14T06:24:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h1><h2 id="一-gcc-安装"><a href="#一-gcc-安装" class="headerlink" title="一. gcc 安装"></a>一. gcc 安装</h2><blockquote>
<p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p>
</blockquote>
<h3 id="yum-install-gcc-gcc-c-y"><a href="#yum-install-gcc-gcc-c-y" class="headerlink" title="yum install gcc gcc-c++ -y"></a>yum install gcc gcc-c++ -y</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">error: rpmdb: BDB0113 Thread/process 30841/139693394622464 failed: BDB1507 Thread died in Berkeley DB library</div><div class="line">error: db5 error(-30973) from dbenv-&gt;failchk: BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery</div><div class="line">error: cannot open Packages index using db5 -  (-30973)</div><div class="line">error: cannot open Packages database in /var/lib/rpm</div><div class="line">CRITICAL:yum.main:</div><div class="line">Error: rpmdb open failed</div></pre></td></tr></table></figure>
<p>解决办法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#首先清除掉缓存，之后再重建就可以了</div><div class="line">rm -f /var/lib/rpm/__db*</div><div class="line">rpm --rebuilddb</div></pre></td></tr></table></figure>
<h2 id="二-PCRE-pcre-devel-安装"><a href="#二-PCRE-pcre-devel-安装" class="headerlink" title="二. PCRE pcre-devel 安装"></a>二. PCRE pcre-devel 安装</h2><blockquote>
<p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：</p>
</blockquote>
<h3 id="yum-install-y-pcre-pcre-devel"><a href="#yum-install-y-pcre-pcre-devel" class="headerlink" title="yum install -y pcre pcre-devel"></a>yum install -y pcre pcre-devel</h3><h2 id="三-zlib-安装"><a href="#三-zlib-安装" class="headerlink" title="三. zlib 安装"></a>三. zlib 安装</h2><blockquote>
<p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p>
</blockquote>
<h3 id="yum-install-y-zlib-zlib-devel"><a href="#yum-install-y-zlib-zlib-devel" class="headerlink" title="yum install -y zlib zlib-devel"></a>yum install -y zlib zlib-devel</h3><h2 id="四-OpenSSL-安装"><a href="#四-OpenSSL-安装" class="headerlink" title="四. OpenSSL 安装"></a>四. OpenSSL 安装</h2><blockquote>
<p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p>
</blockquote>
<h3 id="yum-install-y-openssl-openssl-devel"><a href="#yum-install-y-openssl-openssl-devel" class="headerlink" title="yum install -y openssl openssl-devel"></a>yum install -y openssl openssl-devel</h3><h1 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h1><h2 id="1-直接下载"><a href="#1-直接下载" class="headerlink" title="1.直接下载"></a>1.直接下载</h2><p>直接下载.tar.gz安装包，地址：<a href="https://nginx.org/en/download.html" title="地址" target="_blank" rel="noopener">https://nginx.org/en/download.html</a></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/nginx.png" alt="nginx下载" title="">
                </div>
                <div class="image-caption">nginx下载</div>
            </figure>
<h2 id="2-使用wget命令下载（推荐）。"><a href="#2-使用wget命令下载（推荐）。" class="headerlink" title="2.使用wget命令下载（推荐）。"></a>2.使用wget命令下载（推荐）。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /home</div><div class="line">wget -c https://nginx.org/download/nginx-1.12.2.tar.gz</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/nginx2.png" alt="wget安装" title="">
                </div>
                <div class="image-caption">wget安装</div>
            </figure>
<p>我下载的是1.12.2版本，这个是目前的稳定版。</p>
<h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><p>依然是直接命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.12.2.tar.gz</div><div class="line">cd nginx-1.12.2</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><blockquote>
<p>其实在 nginx-1.10.1 版本中你就不需要去配置相关东西，默认就可以了。当然，如果你要自己配置目录也是可以的。</p>
</blockquote>
<h2 id="1-使用默认配置"><a href="#1-使用默认配置" class="headerlink" title="1.使用默认配置"></a>1.使用默认配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure</div></pre></td></tr></table></figure>
<h2 id="2-自定义配置（不推荐）"><a href="#2-自定义配置（不推荐）" class="headerlink" title="2.自定义配置（不推荐）"></a>2.自定义配置（不推荐）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">./configure \</div><div class="line">--prefix=/usr/local/nginx \</div><div class="line">--conf-path=/usr/local/nginx/conf/nginx.conf \</div><div class="line">--pid-path=/usr/local/nginx/conf/nginx.pid \</div><div class="line">--lock-path=/var/lock/nginx.lock \</div><div class="line">--error-log-path=/var/log/nginx/error.log \</div><div class="line">--http-log-path=/var/log/nginx/access.log \</div><div class="line">--with-http_gzip_static_module \</div><div class="line">--http-client-body-temp-path=/var/temp/nginx/client \</div><div class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</div><div class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</div><div class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</div><div class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</div></pre></td></tr></table></figure>
<ul>
<li>注：将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录</li>
</ul>
<h1 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>查找安装路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whereis nginx</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/nginx3.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="启动、停止nginx"><a href="#启动、停止nginx" class="headerlink" title="启动、停止nginx"></a>启动、停止nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/nginx/sbin/</div><div class="line">./nginx </div><div class="line">./nginx -s stop</div><div class="line">./nginx -s quit</div><div class="line">./nginx -s reload</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* ./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。</div><div class="line">* ./nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</div></pre></td></tr></table></figure>
<h2 id="查询nginx进程："><a href="#查询nginx进程：" class="headerlink" title="查询nginx进程："></a>查询nginx进程：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux|grep nginx</div></pre></td></tr></table></figure>
<h1 id="重启-nginx"><a href="#重启-nginx" class="headerlink" title="重启 nginx"></a>重启 nginx</h1><h2 id="1-先停止再启动（推荐）："><a href="#1-先停止再启动（推荐）：" class="headerlink" title="1.先停止再启动（推荐）："></a>1.先停止再启动（推荐）：</h2><blockquote>
<p>对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./nginx -s quit</div><div class="line">./nginx</div></pre></td></tr></table></figure>
<h2 id="2-重新加载配置文件："><a href="#2-重新加载配置文件：" class="headerlink" title="2.重新加载配置文件："></a>2.重新加载配置文件：</h2><blockquote>
<p>当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 ngin x再启动 nginx 即可将配置信息在 nginx 中生效，如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -s reload</div></pre></td></tr></table></figure>
<p>启动成功后，在浏览器可以看到这样的页面：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.chenqiangyi.cn/image/nginx4.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h1 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h1><blockquote>
<p>即在rc.local增加启动代码就可以了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local</div></pre></td></tr></table></figure>
<p>增加一行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/nginx/sbin/nginx</div></pre></td></tr></table></figure>
<p>设置执行权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc</div><div class="line">chmod 755 rc.local</div></pre></td></tr></table></figure>
<p>到这里，nginx就安装完毕了，启动、停止、重启操作也都完成了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装所需环境&quot;&gt;&lt;a href=&quot;#安装所需环境&quot; class=&quot;headerlink&quot; title=&quot;安装所需环境&quot;&gt;&lt;/a&gt;安装所需环境&lt;/h1&gt;&lt;h2 id=&quot;一-gcc-安装&quot;&gt;&lt;a href=&quot;#一-gcc-安装&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Nginx" scheme="http://www.chenqiangyi.cn/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.chenqiangyi.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>call apply bind 区别</title>
    <link href="http://www.chenqiangyi.cn/2017/08/04/call-apply-bind-%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.chenqiangyi.cn/2017/08/04/call-apply-bind-区别/</id>
    <published>2017-08-04T11:57:21.000Z</published>
    <updated>2017-09-04T12:00:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这三个方法都可以改变函数this的指向，对于新手来说经常搞混，现在总结一下他们的区别。首先总结一下他们的相似之处:</p>
</blockquote>
<ul>
<li>都是用来改变函数的this对象的指向</li>
<li>第一个参数都是this要指向的对象</li>
<li>都可以利用后续参数传参</li>
</ul>
<p>区别在哪里的，先看一个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var xw = &#123;</div><div class="line">	name: &quot;小王&quot;,</div><div class="line">	gender: &quot;男&quot;,</div><div class="line">	age: 24,</div><div class="line">	say: function() &#123;</div><div class="line">		console.log(`$&#123;this.name&#125;,$&#123;this.gender&#125;,今年$&#123;this.age&#125; )</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var xh = &#123;</div><div class="line">	name: &quot;小红&quot;,</div><div class="line">	gender: &quot;女&quot;,</div><div class="line">	age: 18</div><div class="line">&#125;</div><div class="line">xw.say();</div></pre></td></tr></table></figure>
<p>输出的结果肯定是小王,男,今年24.那么如何用wx的say方法来显示xh的数据呢，对于call可以这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xw.say.call(xh);</div></pre></td></tr></table></figure></p>
<p>对于apply可以这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xw.say.apply(xh);</div></pre></td></tr></table></figure></p>
<p>对于bind可以这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xw.say.bind(xh)()</div></pre></td></tr></table></figure>
<p>看了以上结果不难发现，call和apply都是对函数的直接调用而bind方法返回的仍是一个函数，因此后面需要加一个()来进行调用才可以。<br>那call和apply又有什么区别呢？改一下例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var xw = &#123;</div><div class="line">	name: &quot;小王&quot;,</div><div class="line">	gender: &quot;男&quot;,</div><div class="line">	age: 24,</div><div class="line">	say: function(school, grade) &#123;</div><div class="line">		console.log(`$&#123;this.name&#125;,$&#123;this.gender&#125;,今年$&#123;this.age&#125;,在$&#123;scroll&#125;上$&#123;grade&#125;)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">var xh = &#123;</div><div class="line">	name: &quot;小红&quot;,</div><div class="line">	gender: &quot;女&quot;,</div><div class="line">	age: 18</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到say方法多了两个参数，我们通过call/apply的参数进行传参。对于call可以这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xw.say.call(xh, &quot;实验小学&quot;, &quot;六年级&quot;);</div></pre></td></tr></table></figure>
<p>对于apply可以这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xw.say.call(xh, [&quot;实验小学&quot;, &quot;六年级&quot;]);</div></pre></td></tr></table></figure>
<p>可以看到区别,call后面的参数是与say方法中是一一对应的，而apply的第二个参数是个数组，数组中的元素和say方法中一一对应的，这就是两者的最大区别，那bind如何传参呢？它可以像call那样传参</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xw.say.bind(xh, &quot;实验小学&quot;, &quot;六年级&quot;)();</div></pre></td></tr></table></figure>
<p>但由于bind返回的仍是一个函数，所以我们需要再调用一下才可以。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这三个方法都可以改变函数this的指向，对于新手来说经常搞混，现在总结一下他们的区别。首先总结一下他们的相似之处:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;都是用来改变函数的this对象的指向&lt;/li&gt;
&lt;li&gt;第一个参数都是this
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="call" scheme="http://www.chenqiangyi.cn/tags/call/"/>
    
      <category term="apply" scheme="http://www.chenqiangyi.cn/tags/apply/"/>
    
      <category term="bind" scheme="http://www.chenqiangyi.cn/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>页面滚动 页面渲染性能优化</title>
    <link href="http://www.chenqiangyi.cn/2017/07/18/%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8-%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://www.chenqiangyi.cn/2017/07/18/页面滚动-页面渲染性能优化/</id>
    <published>2017-07-18T14:35:42.000Z</published>
    <updated>2017-09-04T12:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web页面展示步骤"><a href="#web页面展示步骤" class="headerlink" title="web页面展示步骤"></a>web页面展示步骤</h1><ul>
<li><p>JavaScript</p>
<p>  实现视觉变化，比如动画以及操作DOM</p>
</li>
<li><p>Style</p>
<p>  计算样式，根据CSS选择器，对每个DOM元素匹配应的CSS样式。这一步结束后就确定DOM元素上该有什么样的CSS规则</p>
</li>
<li><p>Layout</p>
<p>  布局，上一步确定了每个DOM元素的样式规则，这一步就是具体计算每个DOM元素最终在屏幕上显示的大小和位置。</p>
</li>
<li><p>Paint</p>
<p>  绘制，本质上就是填充像素的过程。包括绘制文字、颜色、图像、边框和阴影等。</p>
</li>
<li><p>Composite</p>
<p>  渲染合并，由上一步可知，对页面中的DOM元素的绘制是在多个层面上进行的。</p>
</li>
</ul>
<blockquote>
<p>简单来说，网页生成时至少会渲染（Layout + Paint）一次。用户访问的过程中，还会不断重新的重排（reflow）和重绘（repaint）。<br>其中用户的scroll和resize行为（即滑动页面和改变窗口大小）会导致页面不断的重新渲染。</p>
</blockquote>
<h1 id="防抖（Debouncing）和节流（Throttling）"><a href="#防抖（Debouncing）和节流（Throttling）" class="headerlink" title="防抖（Debouncing）和节流（Throttling）"></a>防抖（Debouncing）和节流（Throttling）</h1><p>scroll事件本身会触发页面的重新渲染，同时scroll事件的handler又会被高频率触发，因此事件的handler内部不应该有复杂操作，例如DOM操作就不应该放在事件处理中。</p>
<blockquote>
<p>针对此类高频率触发事件问题（scroll, resize, 监听用户输入）介绍两种常用的解决方法，防抖和节流</p>
</blockquote>
<p>##防抖（Debouncing）</p>
<ul>
<li>防抖就是把多个顺序调用合并成一次，也就是在一定时间内，规定时间被处罚的次数。例如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 简单的防抖动函数</div><div class="line">function debounce(func, wait) &#123;</div><div class="line">	// 定时器变量</div><div class="line">	var timeout;</div><div class="line">	return function() &#123;</div><div class="line">		// 每次触发scroll handler时先清除定时器</div><div class="line">		clearTimeout(timeout);</div><div class="line">		//指定xx ms后触发真正的操作handler</div><div class="line">		timeout = setTimeout(func, wait);</div><div class="line">	&#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 实际想绑定在scroll事件上的handler</div><div class="line">function realFunc() &#123;</div><div class="line">	console.log(&apos;sucess&apos;);</div><div class="line">&#125;</div><div class="line">// 采用了防抖</div><div class="line">window.addEventListener(&apos;scroll&apos;, debounce(realFunc, 500));</div><div class="line">// 没采用防抖动</div><div class="line">window.addEventListener(&apos;scroll&apos;, realFunc);</div></pre></td></tr></table></figure>
<p>上面函数的功能是如果500ms内没有连续触发两次scroll事件，那么才会触发我们真正想在scroll事件中触发的函数。</p>
<p>上面的例子可以更好的封装下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 防抖函数</div><div class="line">function debounce(func, wait, immetiate) &#123;</div><div class="line">	var timeout;</div><div class="line">	return function() &#123;</div><div class="line">		var context = this, args = arguments;</div><div class="line">		var later = function() &#123;</div><div class="line">			timeout = null;</div><div class="line">			if (!immediate) func.apply(context, args);</div><div class="line">		&#125;;</div><div class="line">		var callNow = immediate &amp;&amp; !timeout;</div><div class="line">		clearTimeout(timeout);</div><div class="line">		timeout = setTimeout(later, wait);</div><div class="line">		if (callNow) func.apply(context, args);</div><div class="line">	&#125;;</div><div class="line">&#125;;</div><div class="line">var myEfficientFn = debounce(function() &#123;</div><div class="line">// 滚动中的真正的操作</div><div class="line">&#125;, 250);</div><div class="line">// 绑定监听</div><div class="line">window.addEventListener(&apos;resize&apos;, myEfficientFn);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;web页面展示步骤&quot;&gt;&lt;a href=&quot;#web页面展示步骤&quot; class=&quot;headerlink&quot; title=&quot;web页面展示步骤&quot;&gt;&lt;/a&gt;web页面展示步骤&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JavaScript&lt;/p&gt;
&lt;p&gt;  实现视觉变化，比如动画以及
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
      <category term="性能优化" scheme="http://www.chenqiangyi.cn/categories/JavaScript/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="性能优化" scheme="http://www.chenqiangyi.cn/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="页面滚动" scheme="http://www.chenqiangyi.cn/tags/%E9%A1%B5%E9%9D%A2%E6%BB%9A%E5%8A%A8/"/>
    
      <category term="页面渲染" scheme="http://www.chenqiangyi.cn/tags/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>javascript中的this</title>
    <link href="http://www.chenqiangyi.cn/2017/06/22/javascript%E4%B8%AD%E7%9A%84this/"/>
    <id>http://www.chenqiangyi.cn/2017/06/22/javascript中的this/</id>
    <published>2017-06-22T03:06:29.000Z</published>
    <updated>2017-06-28T03:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>JavaScript 中的this一直是初学者比较困惑的知识点，当然我也不例外。因为this很重要，所以面试中基本都有涉及this相关的问题，在曾经的面试中也被问过this，比较容易弄混，今天就来整理一下this相关的知识。</p>
</blockquote>
<p>首先要知道this指的是什么？简单概括就是：</p>
<ul>
<li>上下文是在函数调用的时候被创建的。</li>
<li>this是组成上下文的一部分。</li>
</ul>
<p>因此每次函数被调用的时候就会产生一个新的this。具体分为下面几种。</p>
<h1 id="作为普通函数在全局中被调用"><a href="#作为普通函数在全局中被调用" class="headerlink" title="作为普通函数在全局中被调用"></a>作为普通函数在全局中被调用</h1><p>在全局环境里面，this永远指向window，因此在全局环境里作为普通函数被调用的时候，this也是window(这里仅指在浏览器环境下，不靠路Node)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var name = &apos;chen&apos;;</div><div class="line">function fn() &#123;</div><div class="line">    console.log(this);  //window</div><div class="line">    console.log(this.name)  //chen</div><div class="line">&#125;</div><div class="line">fn();</div></pre></td></tr></table></figure>
<p>这里，fn其实是作为window的一个方法被调用的，而name也是window的一个属性，因此fn()实际上就是window.fn().就如上面的window.name == ‘chen’</p>
<h1 id="作为对象的属性被调用"><a href="#作为对象的属性被调用" class="headerlink" title="作为对象的属性被调用"></a>作为对象的属性被调用</h1><p>如果函数作为一个对象的属性方法，并且被调用的时候，this就指向这个对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var name = &apos;chen&apos;;</div><div class="line">var person = &#123;</div><div class="line">    name: &apos;yi&apos;,</div><div class="line">    sayName: function() &#123;</div><div class="line">        console.log(this.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">var sayNameWin = person.sayName;</div><div class="line"></div><div class="line">person.sayName();  //yi</div><div class="line">sayNameWin();  //chen  作为window的方法被调用</div></pre></td></tr></table></figure>
<p>在这里sayName方法是作为person的一个属性方法被调用的，因此指向person，但是sayNameWin方法确实作为window的一个属性方法被调用的，因此console.log的值是chen。<br>我们再看一个变形。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var person1 = &#123;</div><div class="line">    name: &apos;chen&apos;,</div><div class="line">    sayName: function()&#123;</div><div class="line">        console.log(this.name)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var person2 = &#123;</div><div class="line">    name: &apos;yi&apos;,</div><div class="line">    sayName: person1.sayName</div><div class="line">&#125;</div><div class="line"></div><div class="line">person2.sayName();  //yi  作为person2的属性方法被调用</div></pre></td></tr></table></figure>
<p>但是当在对象方法中再定义函数，这时候this又是<code>window</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var name = &apos;chen&apos;;</div><div class="line">var person = &#123;</div><div class="line">    name: &apos;yi&apos;,</div><div class="line">    sayName: function() &#123;</div><div class="line">        function fn() &#123;</div><div class="line">            console.log(this);  //window</div><div class="line">            console.log(this.name);  //chen</div><div class="line">        &#125;</div><div class="line">        fn();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">person.sayName();</div></pre></td></tr></table></figure>
<p>如果想让this指向person的话，只需要用that保存下来this的值即可，也可以使用apply等改变this。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var name = &apos;chen&apos;;</div><div class="line">var person = &#123;</div><div class="line">    name: &apos;yi&apos;,</div><div class="line">    sayName: function() &#123;</div><div class="line">        var that = this;</div><div class="line">        function fn() &#123;</div><div class="line">            console.log(that);  //Object &#123;name: &apos;yi&apos;, ...&#125;</div><div class="line">            console.log(that.name);  //yi</div><div class="line">        &#125;</div><div class="line">        fn();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">person.sayName();</div></pre></td></tr></table></figure>
<h1 id="作为构造函数被调用"><a href="#作为构造函数被调用" class="headerlink" title="作为构造函数被调用"></a>作为构造函数被调用</h1><p>作为构造函数被调用的时候，<code>this</code>代表它即将<code>new</code>出来的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function Person(name) &#123;</div><div class="line">    this.name = name;</div><div class="line">    console.log(this);  //Person &#123;name: &apos;chen&apos;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var person = new Person(&apos;chen&apos;);</div><div class="line">console.log(person.name);  //chen</div></pre></td></tr></table></figure>
<p>如果不加<code>new</code>，表示即作为普通函数调用，指向<code>window</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function Person(name) &#123;</div><div class="line">    this.name = name;</div><div class="line">    console.log(this);  //window</div><div class="line">    console.log(this.name);  //chen</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person(&apos;chen&apos;);</div><div class="line">console.log(window.name);  //chen</div></pre></td></tr></table></figure>
<h1 id="作为call-apply-bind方法的调用"><a href="#作为call-apply-bind方法的调用" class="headerlink" title="作为call/apply/bind方法的调用"></a>作为call/apply/bind方法的调用</h1><p>作为<code>call/apply/bind</code>方法被调用的时候指向传入的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var person = &#123;</div><div class="line">    name: &apos;chen&apos;</div><div class="line">&#125;;</div><div class="line">function fn() &#123;</div><div class="line">    console.log(this);  //Object &#123;name: &apos;chen&apos;&#125;</div><div class="line">    console.log(this.name);  //chen</div><div class="line">&#125;</div><div class="line">fn.apply(person);</div></pre></td></tr></table></figure>
<h1 id="严格模式下"><a href="#严格模式下" class="headerlink" title="严格模式下"></a>严格模式下</h1><p>在严格模式下，在全局环境中执行函数调用的时候是会指向<code>undefined</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">function person() &#123;</div><div class="line">    console.log(this);  //undefined</div><div class="line">&#125;;</div><div class="line">person();</div></pre></td></tr></table></figure>
<h1 id="setTimeout、setInterval中的this"><a href="#setTimeout、setInterval中的this" class="headerlink" title="setTimeout、setInterval中的this"></a>setTimeout、setInterval中的this</h1><p>《javascript高级程序设计》中写到：”超时调用的代码都是在全局执行域中执行的”。setTimeout/setInterval执行的时候，this默认指向window对象，除非手动改变this指向。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var name = &apos;chen&apos;;</div><div class="line">function Person()&#123;</div><div class="line">    this.name = &apos;yi&apos;;</div><div class="line">    this.sayName = function() &#123;</div><div class="line">        console.log(this);  //window</div><div class="line">        console.log(this.name);  //chen</div><div class="line">    &#125;;</div><div class="line">    setTimeout(this.sayName, 10);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var person = new Person();</div></pre></td></tr></table></figure>
<p>在这里如果想改变this，可以使用apply/call/bind等，也可以使用that保存this。setTimeout中的回调函数在严格模下也指向<code>window</code>而不是undefined（是个坑）。因为setTimeout的回调函数如果没有指定的this，会做一个隐式的操作，将全局上下问注入进去，不管是在严格模式还是非严格模式下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">function person() &#123;</div><div class="line">    console.log(this);  //window</div><div class="line">&#125;</div><div class="line">setTimeout(person, 0);</div></pre></td></tr></table></figure>
<h1 id="构造函数prototype属性"><a href="#构造函数prototype属性" class="headerlink" title="构造函数prototype属性"></a>构造函数prototype属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var name = &apos;chen&apos;;</div><div class="line">function Person() &#123;</div><div class="line">    this.name = &apos;yi&apos;;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = function() &#123;</div><div class="line">    console.log(this);  //Person &#123;name: &apos;yi&apos;&#125;</div><div class="line">    console.log(this.name);  //yi</div><div class="line">&#125;</div><div class="line">var person = new Person();</div><div class="line">person.sayName();</div></pre></td></tr></table></figure>
<p>在Person.prototype.sayName函数中，this指向的Person对象。即便是在整个原型链中，this也代表当前对象的值。</p>
<h1 id="Eval函数"><a href="#Eval函数" class="headerlink" title="Eval函数"></a>Eval函数</h1><p>在Eval中，this指向当前作用域的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var name = &apos;chen&apos;;</div><div class="line">var person = &#123;</div><div class="line">    name: &apos;yi&apos;,</div><div class="line">    getName: function() &#123;</div><div class="line">        eval(&quot;console.log(this)&quot;);</div><div class="line">        eval(&quot;console.log(this.name)&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">person.getName();  //Object &#123;name: &apos;yi&apos;, ...&#125; yi</div><div class="line"></div><div class="line">var getNameWin = person.getName;  //window chen</div><div class="line">getNameWin();</div></pre></td></tr></table></figure>
<p>在这里，和不适用Eval，作为对象的方法调用的时候的出来的结果是一样的。</p>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数里面this始终指向外部对象，因为箭头函数没有this，因此它自身不能进行new实例化，同时也不能使用call,apply,bind等方法来改变this的指向。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var person = &#123;</div><div class="line">    name: &apos;chen&apos;,</div><div class="line">    sayName: function() &#123;</div><div class="line">        var fn = () =&gt; &#123;</div><div class="line">            return () =&gt; &#123;</div><div class="line">                console.log(this);  //Object &#123;name: &apos;chen&apos;, ...&#125;</div><div class="line">                coneole.log(this.name);  //chen</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        fn()();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">person.sayName();</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p><a href="http://www.cnblogs.com/wangfupeng1988/p/3988422.html" target="_blank" rel="noopener">深入理解javascript原型和闭包（10）——this</a></p>
<p><a href="http://www.cnblogs.com/wangfupeng1988/p/3996037.html" target="_blank" rel="noopener">深入理解javascript原型和闭包（17）——补this</a></p>
<p><a href="http://www.cnblogs.com/justany/archive/2012/11/01/the_keyword_this_in_javascript.html" target="_blank" rel="noopener">Javascript中this关键字详解 - Justany_WhiteSnow - 博客园</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JavaScript 中的this一直是初学者比较困惑的知识点，当然我也不例外。因为this很重要，所以面试中基本都有涉及this相关的问题，在曾经的面试中也被问过this，比较容易弄混，今天就来整理一下this相关的知识。&lt;/p&gt;
&lt;/block
    
    </summary>
    
      <category term="this" scheme="http://www.chenqiangyi.cn/categories/this/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="this" scheme="http://www.chenqiangyi.cn/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>网站部署https</title>
    <link href="http://www.chenqiangyi.cn/2017/06/21/%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2https/"/>
    <id>http://www.chenqiangyi.cn/2017/06/21/网站部署https/</id>
    <published>2017-06-21T09:27:55.000Z</published>
    <updated>2017-06-22T03:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以下不是一篇指南式的教程，只是记录了将我的博客升级为https的过程，主要记录了一些配置nginx时遇到的问题，但也可以做一下参考 😁</p>
</blockquote>
<h1 id="什么是HTTPS"><a href="#什么是HTTPS" class="headerlink" title="什么是HTTPS"></a>什么是HTTPS</h1><p>简单地说就是 HTTP + SSL,SSL是Secure Socket Layer的缩写，字面意思上看就是在HTTP上又加了一层SSL层使传输更安全。HTTP数据是以明文传输的，没有加密。传输中会遇到以下风险：</p>
<ul>
<li>窃听风险（eavesdropping）：第三方可以获知通信内容</li>
<li>篡改风险（tampering）：第三方可以篡改通信内容</li>
<li>冒充风险（pretending）：第三方可以冒充他人身份参与通信</li>
</ul>
<p>而 HTTPS 则可以通过 SSL/TLS 来解决以上三个问题。</p>
<h1 id="获取SSL"><a href="#获取SSL" class="headerlink" title="获取SSL"></a>获取SSL</h1><p>这里我选择的是腾讯云的域名型（DV）SSL证书，可以免费使用一年，到期后需要续费，续费金额还是挺高的。</p>
<p>因为腾讯云提供中文文档，申请到安装还是挺顺利的，申请成功后如图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://orw66421u.bkt.clouddn.com/SSL.jpeg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>证书到手，然后下载下来，传到放到<code>/etc/nginx/</code>目录下，注意两个文件需要和Nginx的配置文件在同一个目录下（腾讯云指导书上说可以随意放一个到同一个目录下，但是我的不知道为什么会报错）<br>按照文档的指示配置Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen 443;</div><div class="line">        server_name www.domain.com; #填写绑定证书的域名</div><div class="line">        ssl on;</div><div class="line">        ssl_certificate 1_www.domain.com_bundle.crt;</div><div class="line">        ssl_certificate_key 2_www.domain.com.key;</div><div class="line">        ssl_session_timeout 5m;</div><div class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置</div><div class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置</div><div class="line">        ssl_prefer_server_ciphers on;</div><div class="line">        location / &#123;</div><div class="line">            root   html; #站点目录</div><div class="line">            index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>配置完成后用nginx -t测试一下配置文件是否有误，正确无误的话重启Nginx，就可以使用了。<br>然而，我用https访问一直报500的错误，最后才发现HTTPS默认使用的端口是443，需要我们开放443端口。</p>
<p>然后可以正常使用<a href="https:www.chenqiangyi.cn" target="_blank" rel="noopener">https:www.chenqiangyi.cn</a>正常访问。<br>但是，当使用<a href="http://www.chenqiangyi.cn">http://www.chenqiangyi.cn</a>访问的时候又报错。需要我们对http的请求强制转为https访问。</p>
<h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><p>https服务器监听443端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       443;</div><div class="line">        server_name  www.chenqiangyi.cn;</div><div class="line">	ssl on;</div><div class="line">        ssl_certificate      1_www.chenqiangyi.cn_bundle.crt;</div><div class="line">        ssl_certificate_key  2_www.chenqiangyi.cn.key;</div><div class="line"></div><div class="line">        ssl_session_cache    shared:SSL:1m;</div><div class="line">        ssl_session_timeout  5m;</div><div class="line">	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</div><div class="line"> 	ssl_prefer_server_ciphers  on;</div><div class="line">        ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>把http的请求重定向到https</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  chenqiangyi.cn;</div><div class="line">	rewrite  ^(.*) https://$host$1 permanent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就ok了，请求<a href="www.chenqiangyi.cn">www.chenqiangyi.cn</a> 和 <a href="chenqiangyi.cn">chenqiangyi.cn</a>都能跳转到<a href="https://www.chenqiangyi.cn">https://www.chenqiangyi.cn</a>访问。</p>
<p>但是有时候会发现访问<a href="chenqiangyi.cn">chenqiangyi.cn</a>会出现无限重定向，不知道是为什么，现在还在探索。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以下不是一篇指南式的教程，只是记录了将我的博客升级为https的过程，主要记录了一些配置nginx时遇到的问题，但也可以做一下参考 😁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;什么是HTTPS&quot;&gt;&lt;a href=&quot;#什么是HTTPS&quot;
    
    </summary>
    
      <category term="https" scheme="http://www.chenqiangyi.cn/categories/https/"/>
    
    
      <category term="https" scheme="http://www.chenqiangyi.cn/tags/https/"/>
    
      <category term="nginx" scheme="http://www.chenqiangyi.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的递归</title>
    <link href="http://www.chenqiangyi.cn/2017/06/14/JavaScript%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92/"/>
    <id>http://www.chenqiangyi.cn/2017/06/14/JavaScript中的递归/</id>
    <published>2017-06-14T02:52:26.000Z</published>
    <updated>2017-06-14T14:25:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>译者按: 程序员应该知道递归，但是你真的知道是怎么回事么？</p>
<p>原文: <a href="http://lucasfcosta.com/2017/05/08/All-About-Recursion-PTC-TCO-and-STC-in-JavaScript.html" target="_blank" rel="noopener">All About Recursion, PTC, TCO and STC in JavaScript</a></p>
<p>译者: <a href="https://fundebug.com/" target="_blank" rel="noopener">Fundebug</a></p>
<p>为了保证可读性，本文采用意译而非直译。</p>
<blockquote>
<p>一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。</p>
</blockquote>
<p>我们来举个例子，我们可以用4的阶乘乘以4来定义5的阶乘，3的阶乘乘以4来定义4的阶乘，以此类推。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">factorial(5) = factorial(4) * 5</div><div class="line">factorial(5) = factorial(3) * 4 * 5</div><div class="line">factorial(5) = factorial(2) * 3 * 4 * 5</div><div class="line">factorial(5) = factorial(1) * 2 * 3 * 4 * 5</div><div class="line">factorial(5) = factorial(0) * 1 * 2 * 3 * 4 * 5</div><div class="line">factorial(5) = 1 * 1 * 2 * 3 * 4 * 5</div></pre></td></tr></table></figure>
<p>用Haskell的Pattern matching 可以很直观的定义factorial函数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">factorial n = factorial (n-1)  * n</div><div class="line">factorial 0 = 1</div></pre></td></tr></table></figure>
<p>在递归的例子中，从第一个调用factorial(5)开始，一直递归调用factorial函数自身直到参数的值为0。下面是一个形象的图例：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://blog.fundebug.com/2017/06/14/all-about-recursions/factorial-calls.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h1 id="递归的调用栈"><a href="#递归的调用栈" class="headerlink" title="递归的调用栈"></a>递归的调用栈</h1><p>为了理解调用栈，我们回到factorial函数的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function factorial(n) &#123;</div><div class="line">    if (n === 0) &#123;</div><div class="line">        return 1</div><div class="line">    &#125;</div><div class="line">    return n * factorial(n - 1)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们传入参数3，将会递归调用factorial(2)、factorial(1)和factorial(0)，因此会额外再调用factorial三次。</p>
<p>每次函数调用都会压入调用栈，整个调用栈如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">factorial(0) // 0的阶乘为1</div><div class="line">factorial(1) // 该调用依赖factorial(0)</div><div class="line">factorial(2) // 该调用依赖factorial(1)</div><div class="line">factorial(3) // 该掉用依赖factorial(2)</div></pre></td></tr></table></figure>
<p>现在我们修改代码，插入console.trace()来查看每一次当前的调用栈的状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function factorial(n) &#123;</div><div class="line">    console.trace()</div><div class="line">    if (n === 0) &#123;</div><div class="line">        return 1</div><div class="line">    &#125;</div><div class="line">    return n * factorial(n - 1)</div><div class="line">&#125;</div><div class="line">factorial(3)</div></pre></td></tr></table></figure>
<p>接下来我们看看调用栈是怎样的。</p>
<ul>
<li>第一个：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Trace</div><div class="line">    at factorial (repl:2:9)</div><div class="line">    at repl:1:1 // 请忽略以下底层实现细节代码</div><div class="line">    at realRunInThisContextScript (vm.js:22:35)</div><div class="line">    at sigintHandlersWrap (vm.js:98:12)</div><div class="line">    at ContextifyScript.Script.runInThisContext (vm.js:24:12)</div><div class="line">    at REPLServer.defaultEval (repl.js:313:29)</div><div class="line">    at bound (domain.js:280:14)</div><div class="line">    at REPLServer.runBound [as eval] (domain.js:293:12)</div><div class="line">    at REPLServer.onLine (repl.js:513:10)</div><div class="line">    at emitOne (events.js:101:20)</div></pre></td></tr></table></figure>
<p>你会发现，该调用栈包含一个对factorial函数的调用，这里是factorial(3)。接下来就更加有趣了，我们来看第二次打印出来的调用栈：</p>
<p>现在我们有两个对factorial函数的调用。</p>
<ul>
<li>第三次：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Trace</div><div class="line">    at factorial (repl:2:9)</div><div class="line">    at factorial (repl:7:12)</div><div class="line">    at factorial (repl:7:12)</div><div class="line">    at repl:1:1</div><div class="line">    at realRunInThisContextScript (vm.js:22:35)</div><div class="line">    at sigintHandlersWrap (vm.js:98:12)</div><div class="line">    at ContextifyScript.Script.runInThisContext (vm.js:24:12)</div><div class="line">    at REPLServer.defaultEval (repl.js:313:29)</div><div class="line">    at bound (domain.js:280:14)</div><div class="line">    at REPLServer.runBound [as eval] (domain.js:293:12)</div></pre></td></tr></table></figure>
<ul>
<li>第四次：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Trace</div><div class="line">    at factorial (repl:2:9)</div><div class="line">    at factorial (repl:7:12)</div><div class="line">    at factorial (repl:7:12)</div><div class="line">    at factorial (repl:7:12)</div><div class="line">    at repl:1:1</div><div class="line">    at realRunInThisContextScript (vm.js:22:35)</div><div class="line">    at sigintHandlersWrap (vm.js:98:12)</div><div class="line">    at ContextifyScript.Script.runInThisContext (vm.js:24:12)</div><div class="line">    at REPLServer.defaultEval (repl.js:313:29)</div><div class="line">    at bound (domain.js:280:14)</div></pre></td></tr></table></figure>
<p>设想，如果传入的参数值特别大，那么这个调用栈将会非常之大，最终可能超出调用栈的缓存大小而崩溃导致程序执行失败。那么如何解决这个问题呢？使用尾递归。</p>
<h1 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h1><p>尾递归是一种递归的写法，可以避免不断的将函数压栈最终导致堆栈溢出。通过设置一个累加参数，并且每一次都将当前的值累加上去，然后递归调用。</p>
<p>我们来看如何改写之前定义factorial函数为尾递归：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function factorial(n, total = 1) &#123;</div><div class="line">    if (n === 0) &#123;</div><div class="line">        return total</div><div class="line">    &#125;</div><div class="line">    return factorial(n - 1, n * total)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>factorial(3)的执行步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">factorial(3, 1)</div><div class="line">factorial(2, 3)</div><div class="line">factorial(1, 6)</div><div class="line">factorial(0, 6)</div></pre></td></tr></table></figure>
<p>调用栈不再需要多次对factorial进行压栈处理，因为每一个递归调用都不在依赖于上一个递归调用的值。因此，空间的复杂度为o(1)而不是0(n)。</p>
<p>接下来，通过console.trace()函数将调用栈打印出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function factorial(n, total = 1) &#123;</div><div class="line">    console.trace()</div><div class="line">    if (n === 0) &#123;</div><div class="line">        return total</div><div class="line">    &#125;</div><div class="line">    return factorial(n - 1, n * total)</div><div class="line">&#125;</div><div class="line">factorial(3)</div></pre></td></tr></table></figure>
<p>很惊讶的发现，依然有很多压栈!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// ...</div><div class="line">// 下面是最后两次对factorial的调用</div><div class="line">Trace</div><div class="line">    at factorial (repl:2:9) // 3次压栈</div><div class="line">    at factorial (repl:7:8)</div><div class="line">    at factorial (repl:7:8)</div><div class="line">    at repl:1:1 // 请忽略以下底层实现细节代码</div><div class="line">    at realRunInThisContextScript (vm.js:22:35)</div><div class="line">    at sigintHandlersWrap (vm.js:98:12)</div><div class="line">    at ContextifyScript.Script.runInThisContext (vm.js:24:12)</div><div class="line">    at REPLServer.defaultEval (repl.js:313:29)</div><div class="line">    at bound (domain.js:280:14)</div><div class="line">    at REPLServer.runBound [as eval] (domain.js:293:12)</div><div class="line">Trace</div><div class="line">    at factorial (repl:2:9) // 最后第一调用再次压栈</div><div class="line">    at factorial (repl:7:8)</div><div class="line">    at factorial (repl:7:8)</div><div class="line">    at factorial (repl:7:8)</div><div class="line">    at repl:1:1 // 请忽略以下底层实现细节代码</div><div class="line">    at realRunInThisContextScript (vm.js:22:35)</div><div class="line">    at sigintHandlersWrap (vm.js:98:12)</div><div class="line">    at ContextifyScript.Script.runInThisContext (vm.js:24:12)</div><div class="line">    at REPLServer.defaultEval (repl.js:313:29)</div><div class="line">    at bound (domain.js:280:14)</div></pre></td></tr></table></figure>
<p>这是为什么呢？<br>在Nodejs下面，我们可以通过开启strict mode, 并且使用–harmony_tailcalls来开启尾递归(proper tail call)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;</div><div class="line">function factorial(n, total = 1) &#123;</div><div class="line">    console.trace()</div><div class="line">    if (n === 0) &#123;</div><div class="line">        return total</div><div class="line">    &#125;</div><div class="line">    return factorial(n - 1, n * total)</div><div class="line">&#125;</div><div class="line">factorial(3)</div></pre></td></tr></table></figure>
<p>使用如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node --harmony_tailcalls factorial.js</div></pre></td></tr></table></figure>
<p>调用栈信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">Trace</div><div class="line">    at factorial (/Users/stefanzan/factorial.js:3:13)</div><div class="line">    at Object.&lt;anonymous&gt; (/Users/stefanzan/factorial.js:9:1)</div><div class="line">    at Module._compile (module.js:570:32)</div><div class="line">    at Object.Module._extensions..js (module.js:579:10)</div><div class="line">    at Module.load (module.js:487:32)</div><div class="line">    at tryModuleLoad (module.js:446:12)</div><div class="line">    at Function.Module._load (module.js:438:3)</div><div class="line">    at Module.runMain (module.js:604:10)</div><div class="line">    at run (bootstrap_node.js:394:7)</div><div class="line">    at startup (bootstrap_node.js:149:9)</div><div class="line">Trace</div><div class="line">    at factorial (/Users/stefanzan/factorial.js:3:13)</div><div class="line">    at Object.&lt;anonymous&gt; (/Users/stefanzan/factorial.js:9:1)</div><div class="line">    at Module._compile (module.js:570:32)</div><div class="line">    at Object.Module._extensions..js (module.js:579:10)</div><div class="line">    at Module.load (module.js:487:32)</div><div class="line">    at tryModuleLoad (module.js:446:12)</div><div class="line">    at Function.Module._load (module.js:438:3)</div><div class="line">    at Module.runMain (module.js:604:10)</div><div class="line">    at run (bootstrap_node.js:394:7)</div><div class="line">    at startup (bootstrap_node.js:149:9)</div><div class="line">Trace</div><div class="line">    at factorial (/Users/stefanzan/factorial.js:3:13)</div><div class="line">    at Object.&lt;anonymous&gt; (/Users/stefanzan/factorial.js:9:1)</div><div class="line">    at Module._compile (module.js:570:32)</div><div class="line">    at Object.Module._extensions..js (module.js:579:10)</div><div class="line">    at Module.load (module.js:487:32)</div><div class="line">    at tryModuleLoad (module.js:446:12)</div><div class="line">    at Function.Module._load (module.js:438:3)</div><div class="line">    at Module.runMain (module.js:604:10)</div><div class="line">    at run (bootstrap_node.js:394:7)</div><div class="line">    at startup (bootstrap_node.js:149:9)</div><div class="line">Trace</div><div class="line">    at factorial (/Users/stefanzan/factorial.js:3:13)</div><div class="line">    at Object.&lt;anonymous&gt; (/Users/stefanzan/factorial.js:9:1)</div><div class="line">    at Module._compile (module.js:570:32)</div><div class="line">    at Object.Module._extensions..js (module.js:579:10)</div><div class="line">    at Module.load (module.js:487:32)</div><div class="line">    at tryModuleLoad (module.js:446:12)</div><div class="line">    at Function.Module._load (module.js:438:3)</div><div class="line">    at Module.runMain (module.js:604:10)</div><div class="line">    at run (bootstrap_node.js:394:7)</div><div class="line">    at startup (bootstrap_node.js:149:9)</div></pre></td></tr></table></figure>
<p>你会发现，不会在每次调用的时候压栈，只有一个factorial。</p>
<p>注意：尾递归不一定会将你的代码执行速度提高；相反，可能会变慢。不过，尾递归可以让你使用更少的内存，使你的递归函数更加安全 (前提是你要开启harmony模式)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;译者按: 程序员应该知道递归，但是你真的知道是怎么回事么？&lt;/p&gt;
&lt;p&gt;原文: &lt;a href=&quot;http://lucasfcosta.com/2017/05/08/All-About-Recursion-PTC-TCO-and-STC-in-JavaScript.htm
    
    </summary>
    
    
      <category term="Javascript 递归" scheme="http://www.chenqiangyi.cn/tags/Javascript-%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>vue键盘事件小技巧</title>
    <link href="http://www.chenqiangyi.cn/2017/05/10/vue%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.chenqiangyi.cn/2017/05/10/vue键盘事件小技巧/</id>
    <published>2017-05-10T14:04:01.000Z</published>
    <updated>2017-06-14T14:05:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近用Vue做一个运营工具，需求是当在编辑完成的时候可以知接按住Alt+S提交表单并保存,查询vue文档发现尤大已经把常用的按键封装到框架中了，然而所有的绑定都必须在表单元素中进行，显然不符合我那个开发工具的需求，最后不断查文档，并没有找到相关的文章。最后只能用原生的keydown事件了，监听整个windowd,代码如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mounted() &#123;</div><div class="line">     var that = this;</div><div class="line">     document.onkeydown=function(e) &#123;</div><div class="line">           if(e &amp;amp;&amp;amp; e.keyCode==83 &amp;amp;&amp;amp; e.altKey )&#123;     //同时按下Alt+S</div><div class="line">                   that.submitBtn(e);</div><div class="line">           &#125;</div><div class="line">      &#125;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">    submitBtn(e) &#123;</div><div class="line">        //相关函数</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就总结一下vue中的键盘事件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">    &lt;script src=&quot;vue.js&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        window.onload = function()&#123;</div><div class="line">            var vm = new Vue(&#123;</div><div class="line">                el:&apos;#box&apos;,</div><div class="line">                methods:&#123;</div><div class="line">                    show:function(ev)&#123;</div><div class="line">                        if(ev.keyCode == 13)&#123;</div><div class="line">                            alert(&apos;你按回车键了&apos;);</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;box&quot;&gt;</div><div class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;请输入&quot; @keyup=&quot;show($event)&quot;&gt;</div><div class="line"></div><div class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;请输入&quot; @keyup.13=&quot;show($event)&quot;&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete&nbsp;(捕获 “删除” 和 “退格” 键)</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right</li>
</ul>
<p>可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应</p>
<ul>
<li>.ctrl</li>
<li>.alt</li>
<li>.shift</li>
<li>.meta</li>
</ul>
<p>注意：在Mac系统键盘上，meta对应命令键 (⌘)。在Windows系统键盘meta对应windows徽标键(⊞)。在Sun操作系统键盘上，meta对应实心宝石键 (◆)。在其他特定键盘上，尤其在MIT和Lisp键盘及其后续，比如Knight键盘，space-cadet键盘，meta被标记为“META”。在Symbolics键盘上，meta被标记为“META” 或者 “Meta”。</p>
<p>例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Alt + C --&gt;</div><div class="line">&lt;input @keyup.alt.67=&quot;clear&quot;&gt;</div><div class="line"></div><div class="line">&lt;!-- Ctrl + Click --&gt;</div><div class="line">&lt;div @click.ctrl=&quot;doSomething&quot;&gt;Do something&lt;/div&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近用Vue做一个运营工具，需求是当在编辑完成的时候可以知接按住Alt+S提交表单并保存,查询vue文档发现尤大已经把常用的按键封装到框架中了，然而所有的绑定都必须在表单元素中进行，显然不符合我那个开发工具的需求，最后不断查文档，并没有找到相关的文
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://www.chenqiangyi.cn/tags/vue/"/>
    
      <category term="键盘事件" scheme="http://www.chenqiangyi.cn/tags/%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ES6新特性总结</title>
    <link href="http://www.chenqiangyi.cn/2017/04/25/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://www.chenqiangyi.cn/2017/04/25/ES6新特性总结/</id>
    <published>2017-04-25T04:28:31.000Z</published>
    <updated>2017-06-14T11:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES6语法已经出来很久了，为了加强学习和记忆，总结一下ES6中出现的新特性，参考文章<a href="http://es6.ruanyifeng.com/。" target="_blank" rel="noopener">http://es6.ruanyifeng.com/。</a></p>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>function() 函数的简写表示法，但它不绑定 this。</p>
<p>ES6 代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var odds = evens.map(v =&amp;gt; v + 1);  // no parentes and no brackets</div><div class="line">var nums = evens.map((v, i) =&amp;gt; v + i);</div><div class="line">var pairs = evens.map(v =&amp;gt; (&#123;even: v, odd: v + 1&#125;));</div><div class="line"></div><div class="line">// Statement bodies</div><div class="line">nums.forEach(v =&amp;gt; &#123;</div><div class="line">  if (v % 5 === 0)</div><div class="line">    fives.push(v);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="this是如何工作的"><a href="#this是如何工作的" class="headerlink" title="this是如何工作的"></a>this是如何工作的</h1><p>ES6 代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var object = &#123;</div><div class="line">    name: &quot;Name&quot;,</div><div class="line">    arrowGetName: () =&amp;gt; this.name,</div><div class="line">    regularGetName: function() &#123; return this.name &#125;,</div><div class="line">    arrowGetThis: () =&amp;gt; this,</div><div class="line">    regularGetThis: function() &#123; return this &#125;</div><div class="line">&#125;</div><div class="line">console.log(object);</div><div class="line">console.log(object.name)</div><div class="line">console.log(object.arrowGetName());</div><div class="line">console.log(object.arrowGetThis());</div><div class="line">console.log(this);</div><div class="line">console.log(object.regularGetName());</div><div class="line">console.log(object.regularGetThis());</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">console.log(object);</div><div class="line"></div><div class="line">Object &#123;</div><div class="line">    name: &quot;Name&quot;,</div><div class="line">    arrowGetName: function,</div><div class="line">    regularGetName: function,</div><div class="line">    arrowGetThis: function,</div><div class="line">    regularGetThis: function</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(object.name) ;</div><div class="line">Name</div><div class="line"></div><div class="line">console.log(object.arrowGetName());</div><div class="line">undefined</div><div class="line"></div><div class="line">console.log(object.arrowGetThis());  // [object Window]</div><div class="line">Window &#123;</div><div class="line">    stop: function,</div><div class="line">    open: function,</div><div class="line">    alert: function,</div><div class="line">    confirm: function,</div><div class="line">    prompt: function,</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(this);  同上</div><div class="line"></div><div class="line">console.log(object.regularGetName());</div><div class="line"></div><div class="line">Name</div><div class="line"></div><div class="line">console.log(object.regularGetThis());</div><div class="line">Object &#123;</div><div class="line">    name: &quot;Name&quot;,</div><div class="line">    arrowGetName: function,</div><div class="line">    regularGetName: function,</div><div class="line">    arrowGetThis: function,</div><div class="line">    regularGetThis: function</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道“真正”语言中的类(Classes)。在 ES6 中类(Classes)其实是原型继承的语法糖。</p>
<p>ES6代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class SkinnedMesh extends THREE.Mesh &#123;</div><div class="line">  constructor(geometry, materials) &#123;</div><div class="line">    super(geometry, materials);</div><div class="line"></div><div class="line">    this.idMatrix = SkinnedMesh.defaultMatrix();</div><div class="line">    this.bones = [];</div><div class="line">    this.boneMatrices = [];</div><div class="line">    //...</div><div class="line">  &#125;</div><div class="line">  update(camera) &#123;</div><div class="line">    //...</div><div class="line">    super.update();</div><div class="line">  &#125;</div><div class="line">  get boneCount() &#123;</div><div class="line">    return this.bones.length;</div><div class="line">  &#125;</div><div class="line">  set matrixType(matrixType) &#123;</div><div class="line">    this.idMatrix = SkinnedMesh[matrixType]();</div><div class="line">  &#125;</div><div class="line">  static defaultMatrix() &#123;</div><div class="line">    return new THREE.Matrix4();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="增强的对象字面量"><a href="#增强的对象字面量" class="headerlink" title="增强的对象字面量"></a>增强的对象字面量</h1><p>ES6代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var theProtoObj = &#123;</div><div class="line">  toString: function() &#123;</div><div class="line">    return &quot;The ProtoOBject To string&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var handler = () =&amp;gt; &quot;handler&quot;</div><div class="line">var obj = &#123;</div><div class="line">    // __proto__</div><div class="line">    __proto__: theProtoObj,</div><div class="line">    // Shorthand for ‘handler: handler’</div><div class="line">    handler,</div><div class="line">    // Methods</div><div class="line">    toString() &#123;</div><div class="line">     // Super calls</div><div class="line">     return &quot;d &quot; + super.toString();</div><div class="line">    &#125;,</div><div class="line">    // Computed (dynamic) property names</div><div class="line">    [ &quot;prop_&quot; + (() =&amp;gt; 42)() ]: 42</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(obj.handler)</div><div class="line">console.log(obj.handler())</div><div class="line">console.log(obj.toString())</div><div class="line">console.log(obj.prop_42)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">obj.handler // () =&amp;gt; &quot;handler&quot;</div><div class="line">obj.handler() // handler</div><div class="line">obj.toString() // d The ProtoOBject To string</div><div class="line">obj.prop_42 //</div><div class="line">(() =&amp;gt; 42)()  是一个立即执行函数 (() =&amp;gt; 42)() 相当于</div><div class="line">(function() &#123;</div><div class="line">    return 42;</div><div class="line">&#125;)()</div><div class="line">42</div></pre></td></tr></table></figure>
<h1 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var name = &quot;Bob&quot;, time = &quot;today&quot;;</div><div class="line"></div><div class="line">var multiLine = `This Line Spans Multiple Lines`；</div><div class="line"></div><div class="line">console.log(`Hello $&#123;name&#125;,how are you $&#123;time&#125;?`)</div><div class="line">console.log(multiLine)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a // 1</div><div class="line">b // 3</div></pre></td></tr></table></figure>
<h2 id="对象也能很好的解构"><a href="#对象也能很好的解构" class="headerlink" title="对象也能很好的解构"></a>对象也能很好的解构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">nodes = () =&gt; &#123; return &#123;op: &quot;a&quot;, lhs: &quot;b&quot;, rhs: &quot;c&quot;&#125;&#125;</div><div class="line">var &#123; op: a, lhs: b , rhs: c &#125; = nodes()</div><div class="line">console.log(a)</div><div class="line">console.log(b)</div><div class="line">console.log(c)</div></pre></td></tr></table></figure>
<p>##结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a // a</div><div class="line">b // b</div><div class="line">c // c</div></pre></td></tr></table></figure>
<h2 id="使用速记表示法"><a href="#使用速记表示法" class="headerlink" title="使用速记表示法"></a>使用速记表示法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">nodes = () =&gt; &#123; return &#123;lhs: &quot;a&quot;, op: &quot;b&quot;, rhs: &quot;c&quot;&#125;&#125;</div><div class="line"></div><div class="line">// binds `op`, `lhs` and `rhs` in scope</div><div class="line">var &#123;op, lhs, rhs&#125; = nodes()</div><div class="line"></div><div class="line">console.log(op)</div><div class="line">console.log(lhs)</div><div class="line">console.log(rhs)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">op // b</div><div class="line">lhs // a</div><div class="line">rhs // c</div></pre></td></tr></table></figure>
<h2 id="可在参数位置使用"><a href="#可在参数位置使用" class="headerlink" title="可在参数位置使用"></a>可在参数位置使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function g(&#123;name: x&#125;) &#123;</div><div class="line">  return x</div><div class="line">&#125;</div><div class="line"></div><div class="line">function m(&#123;name&#125;) &#123;</div><div class="line">  return name</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(g(&#123;name: 5&#125;))</div><div class="line">console.log(m(&#123;name: 5&#125;))</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">g(&#123;name: 5&#125;) // 5</div><div class="line">m(&#123;name: 5&#125;) // 5</div></pre></td></tr></table></figure>
<h1 id="故障弱化解构"><a href="#故障弱化解构" class="headerlink" title="故障弱化解构"></a>故障弱化解构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var [a] = []</div><div class="line">var [b = 1] = []</div><div class="line">var c = [];</div><div class="line">console.log(a)</div><div class="line">console.log(b);</div><div class="line">console.log(c);</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a // undefined</div><div class="line">b // 1</div><div class="line">c // []</div></pre></td></tr></table></figure>
<h1 id="参数默认值（Default）"><a href="#参数默认值（Default）" class="headerlink" title="参数默认值（Default）"></a>参数默认值（Default）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function f(x, y=12) &#123;</div><div class="line">  return x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(f(3))</div><div class="line">console.log(f(3,2))</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f(3) // 15</div><div class="line">f(3,2) // 5</div></pre></td></tr></table></figure>
<h1 id="扩展（Spread）"><a href="#扩展（Spread）" class="headerlink" title="扩展（Spread）"></a>扩展（Spread）</h1><p>在函数中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function f(x, y, z) &#123;</div><div class="line">  return x + y + z;</div><div class="line">&#125;</div><div class="line">// 传递数组的每个元素作为参数</div><div class="line">console.log(f(...[1,2,3]))</div></pre></td></tr></table></figure>
<p>##结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(...[1,2,3]) // 6</div></pre></td></tr></table></figure>
<h1 id="在数组中"><a href="#在数组中" class="headerlink" title="在数组中"></a>在数组中</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var parts = [&quot;shoulders&quot;, &quot;knees&quot;];</div><div class="line">var lyrics = [&quot;head&quot;, ...parts, &quot;and&quot;, &quot;toes&quot;];</div><div class="line"></div><div class="line">console.log(lyrics)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var parts = [&quot;shoulders&quot;, &quot;knees&quot;];</div><div class="line">var lyrics = [&quot;head&quot;, ...parts, &quot;and&quot;, &quot;toes&quot;];</div><div class="line"></div><div class="line">console.log(lyrics)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lyrics // [&quot;head&quot;,&quot;shoulders&quot;,&quot;knees&quot;,&quot;and&quot;,&quot;toes&quot;]</div></pre></td></tr></table></figure>
<h2 id="扩展-对象字面量"><a href="#扩展-对象字面量" class="headerlink" title="扩展 + 对象字面量"></a>扩展 + 对象字面量</h2><p>我们可以使用这个创造很酷的对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">let &#123; x, y, ...z &#125; = &#123; x: 1, y: 2, a: 3, b: 4 &#125;;</div><div class="line">console.log(x); // 1</div><div class="line">console.log(y); // 2</div><div class="line">console.log(z); // &#123; a: 3, b: 4 &#125;</div><div class="line"></div><div class="line">// Spread properties</div><div class="line">let n = &#123; x, y, ...z &#125;;</div><div class="line">console.log(n); // &#123; x: 1, y: 2, a: 3, b: 4 &#125;</div><div class="line">console.log(obj)</div><div class="line">可惜的是它还不支持：</div><div class="line"></div><div class="line">npm install --save-dev babel-plugin-transform-object-rest-spread</div></pre></td></tr></table></figure>
<h1 id="Rest"><a href="#Rest" class="headerlink" title="Rest"></a>Rest</h1><p>我们可以使用 rest 操作符来允许无限参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function demo(part1, ...part2) &#123;</div><div class="line">    return &#123;part1, part2&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(demo(1,2,3,4,5,6))</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">demo(1,2,3,4,5,6) // &#123;&quot;part1&quot;:1,&quot;part2&quot;:[2,3,4,5,6]&#125;</div></pre></td></tr></table></figure>
<h1 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h1><p>let是新的var。 因为它有块级作用域。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   var globalVar = &quot;from demo1&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">   let globalLet = &quot;from demo2&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(globalVar)</div><div class="line">console.log(globalLet)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">globalVar // from demo1</div><div class="line">globalLet // ReferenceError: globalLet is not defined</div></pre></td></tr></table></figure>
<p>但是，它不会向window分配任何内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let me = &quot;go&quot;;  // 全局作用域</div><div class="line">var i = &quot;able&quot;; // 全局作用域</div><div class="line"></div><div class="line">console.log(window.me);</div><div class="line">console.log(window.i);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">window.me // undefined</div><div class="line">window.i // able</div></pre></td></tr></table></figure>
<p>不能使用let重新声明一个变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let me = &quot;foo&quot;;</div><div class="line">let me = &quot;bar&quot;;</div><div class="line">console.log(me);</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SyntaxError: Identifier &apos;me&apos; has already been declared</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var me = &quot;foo&quot;;</div><div class="line">var me = &quot;bar&quot;;</div><div class="line">console.log(me)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">me // bar</div></pre></td></tr></table></figure>
<h1 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h1><p>const 是只读变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const a = &quot;b&quot;</div><div class="line">a = &quot;a&quot;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypeError: Assignment to constant variable.</div></pre></td></tr></table></figure>
<p>const 对象仍然可以被改变的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const a = &#123; a: &quot;a&quot; &#125;</div><div class="line">a.a = &quot;b&quot;</div><div class="line">console.log(a)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a // &#123;&quot;a&quot;:&quot;b&quot;&#125;</div></pre></td></tr></table></figure>
<h1 id="For-of"><a href="#For-of" class="headerlink" title="For..of"></a>For..of</h1><p>迭代器的新类型，可以替代for..in。它返回的是值而不是keys</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let list = [4, 5, 6];</div><div class="line">console.log(list)</div><div class="line">for (let i in list) &#123;</div><div class="line">   console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">list // [4,5,6]</div><div class="line">i // 0</div><div class="line">i // 1</div><div class="line">i // 2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let list = [4, 5, 6];</div><div class="line">console.log(list)</div><div class="line">for (let i of list) &#123;</div><div class="line">   console.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">list // [4,5,6]</div><div class="line">i // 4</div><div class="line">i // 5</div><div class="line">i // 6</div></pre></td></tr></table></figure>
<h1 id="迭代器（Iterators）"><a href="#迭代器（Iterators）" class="headerlink" title="迭代器（Iterators）"></a>迭代器（Iterators）</h1><p>迭代器是一个比数组更动态的类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">let infinite = &#123;</div><div class="line">  [Symbol.iterator]() &#123;</div><div class="line">    let c = 0;</div><div class="line">    return &#123;</div><div class="line">      next() &#123;</div><div class="line">        c++;</div><div class="line">        return &#123; done: false, value: c &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(&quot;start&quot;);</div><div class="line"></div><div class="line">for (var n of infinite) &#123;</div><div class="line">  // truncate the sequence at 1000</div><div class="line">  if (n &amp;gt; 10)</div><div class="line">    break;</div><div class="line">  console.log(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&quot;start&quot; // start</div><div class="line">n // 1</div><div class="line">n // 2</div><div class="line">n // 3</div><div class="line">n // 4</div><div class="line">n // 5</div><div class="line">n // 6</div><div class="line">n // 7</div><div class="line">n // 8</div><div class="line">n // 9</div><div class="line">n // 10</div></pre></td></tr></table></figure>
<p>使用Typescript，我们可以看到它接口的样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Typescript 代码:</div><div class="line">interface IteratorResult &#123;</div><div class="line">  done: boolean;</div><div class="line">  value: any;</div><div class="line">&#125;</div><div class="line">interface Iterator &#123;</div><div class="line">  next(): IteratorResult;</div><div class="line">&#125;</div><div class="line">interface Iterable &#123;</div><div class="line">  [Symbol.iterator](): Iterator</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="生成器（Generators）"><a href="#生成器（Generators）" class="headerlink" title="生成器（Generators）"></a>生成器（Generators）</h1><p>生成器创建迭代器，并且比迭代器更具动态性。他们不必以相同的方式跟踪状态 并不支持 done 的概念。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var infinity = &#123;</div><div class="line">  [Symbol.iterator]: function*() &#123;</div><div class="line">    var c = 1;</div><div class="line">    for (;;) &#123;   </div><div class="line">      yield c++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(&quot;start&quot;)</div><div class="line">for (var n of infinity) &#123;</div><div class="line">  // truncate the sequence at 1000</div><div class="line">  if (n &amp;gt; 10)</div><div class="line">    break;</div><div class="line">  console.log(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&quot;start&quot; // start</div><div class="line">n // 1</div><div class="line">n // 2</div><div class="line">n // 3</div><div class="line">n // 4</div><div class="line">n // 5</div><div class="line">n // 6</div><div class="line">n // 7</div><div class="line">n // 8</div><div class="line">n // 9</div><div class="line">n // 10</div></pre></td></tr></table></figure>
<p>使用Typescript 再次显示接口：</p>
<p>Typescript 代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface Generator extends Iterator &#123;</div><div class="line">    next(value?: any): IteratorResult;</div><div class="line">    throw(exception: any);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="function-Iterators-and-generator"><a href="#function-Iterators-and-generator" class="headerlink" title="function* Iterators and generator"></a>function* Iterators and generator</h1><p>一个产量的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">function* anotherGenerator(i) &#123;</div><div class="line">  yield i + 1;</div><div class="line">  yield i + 2;</div><div class="line">  yield i + 3;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function* generator(i) &#123;</div><div class="line">  yield i;</div><div class="line">  yield* anotherGenerator(i);</div><div class="line">  yield i + 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var gen = generator(10);</div><div class="line"></div><div class="line">console.log(gen.next().value);</div><div class="line">console.log(gen.next().value);</div><div class="line">console.log(gen.next().value);</div><div class="line">console.log(gen.next().value);</div><div class="line">console.log(gen.next().value);</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gen.next().value // 10</div><div class="line">gen.next().value // 11</div><div class="line">gen.next().value // 12</div><div class="line">gen.next().value // 13</div><div class="line">gen.next().value // 20</div></pre></td></tr></table></figure>
<h1 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h1><p>ES6 为Unicode 提供了更好的支持。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var regex = new RegExp(&apos;\u&#123;61&#125;&apos;, &apos;u&apos;);</div><div class="line"></div><div class="line">console.log(regex.unicode)</div><div class="line">console.log(&quot;\uD842\uDFD7&quot;)</div><div class="line">console.log(&quot;\uD842\uDFD7&quot;.codePointAt())</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">regex.unicode // true</div><div class="line">&quot;&quot; //</div><div class="line">&quot;&quot;.codePointAt() // 134103</div></pre></td></tr></table></figure>
<h1 id="模块和模块加载器"><a href="#模块和模块加载器" class="headerlink" title="模块和模块加载器"></a>模块和模块加载器</h1><p>原生支持模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import defaultMember from &quot;module-name&quot;;</div><div class="line">import * as name from &quot;module-name&quot;;</div><div class="line">import &#123; member &#125; from &quot;module-name&quot;;</div><div class="line">import &#123; member as alias &#125; from &quot;module-name&quot;;</div><div class="line">import &#123; member1 , member2 &#125; from &quot;module-name&quot;;</div><div class="line">import &#123; member1 , member2 as alias2 , [...] &#125; from &quot;module-name&quot;;</div><div class="line">import defaultMember, &#123; member [ , [...] ] &#125; from &quot;module-name&quot;;</div><div class="line">import defaultMember, * as name from &quot;module-name&quot;;</div><div class="line">import &quot;module-name&quot;;</div><div class="line">export &#123; name1, name2, …, nameN &#125;;</div><div class="line">export &#123; variable1 as name1, variable2 as name2, …, nameN &#125;;</div><div class="line">export let name1, name2, …, nameN; // also var</div><div class="line">export let name1 = …, name2 = …, …, nameN; // also var, const</div><div class="line"></div><div class="line">export expression;</div><div class="line">export default expression;</div><div class="line">export default function (…) &#123; … &#125; // also class, function*</div><div class="line">export default function name1(…) &#123; … &#125; // also class, function*</div><div class="line">export &#123; name1 as default, … &#125;;</div><div class="line"></div><div class="line">export * from …;</div><div class="line">export &#123; name1, name2, …, nameN &#125; from …;</div><div class="line">export &#123; import1 as name1, import2 as name2, …, nameN &#125; from …;</div><div class="line">Import Export</div></pre></td></tr></table></figure>
<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>Set 为数学对应，其中所有项目都是唯一的。对于知道SQL的人来说，这相当于distinct。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var set = new Set();</div><div class="line">set.add(&quot;Potato&quot;).add(&quot;Tomato&quot;).add(&quot;Tomato&quot;);</div><div class="line">console.log(set.size)</div><div class="line">console.log(set.has(&quot;Tomato&quot;))</div><div class="line"></div><div class="line">for(var item of set) &#123;</div><div class="line">   console.log(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set.size // 2</div><div class="line">set.has(&quot;Tomato&quot;) // true</div><div class="line">item // Potato</div><div class="line">item // Tomato</div></pre></td></tr></table></figure>
<h1 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h1><p>WeakSet对象允许您在集合中存储弱持有的对象。没有引用的对象将被垃圾回收。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var item = &#123; a:&quot;Potato&quot;&#125;</div><div class="line">var set = new WeakSet();</div><div class="line">set.add(&#123; a:&quot;Potato&quot;&#125;).add(item).add(&#123; a:&quot;Tomato&quot;&#125;).add(&#123; a:&quot;Tomato&quot;&#125;);</div><div class="line">console.log(set.size)</div><div class="line">console.log(set.has(&#123;a:&quot;Tomato&quot;&#125;))</div><div class="line">console.log(set.has(item))</div><div class="line"></div><div class="line">for(let item of set) &#123;</div><div class="line">   console.log(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set.size // undefined</div><div class="line">set.has(&#123;a:&quot;Tomato&quot;&#125;) // false</div><div class="line">set.has(item) // true</div><div class="line">TypeError: set[Symbol.iterator] is not a function</div></pre></td></tr></table></figure>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map也称词典</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var map = new Map();</div><div class="line">map.set(&quot;Potato&quot;, 12);</div><div class="line">map.set(&quot;Tomato&quot;, 34);</div><div class="line"></div><div class="line">console.log(map.get(&quot;Potato&quot;))</div><div class="line"></div><div class="line">for(let item of map) &#123;</div><div class="line">   console.log(item)</div><div class="line">&#125;</div><div class="line"></div><div class="line">for(let item in map) &#123;</div><div class="line">   console.log(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map.get(&quot;Potato&quot;) // 12</div><div class="line">item // [&quot;Potato&quot;,12]</div><div class="line">item // [&quot;Tomato&quot;,34]</div></pre></td></tr></table></figure>
<p>可以使用除字符串之外的其他类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var map = new Map();</div><div class="line">var key = &#123;a: &quot;a&quot;&#125;</div><div class="line">map.set(key, 12);</div><div class="line"></div><div class="line">console.log(map.get(key))</div><div class="line">console.log(map.get(&#123;a: &quot;a&quot;&#125;))</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">map.get(key) // 12</div><div class="line">map.get(&#123;a: &quot;a&quot;&#125;) // undefined</div></pre></td></tr></table></figure>
<h1 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h1><p>使用键的对象，并且只保留对键的弱引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var wm = new WeakMap();</div><div class="line"></div><div class="line">var o1  = &#123;&#125;</div><div class="line">var o2  = &#123;&#125;</div><div class="line">var o3  = &#123;&#125;</div><div class="line">wm.set(o1, 1);</div><div class="line">wm.set(o2, 2);</div><div class="line">wm.set(o3, &#123;a: &quot;a&quot;&#125;);</div><div class="line">wm.set(&#123;&#125;, 4);</div><div class="line"></div><div class="line">console.log(wm.get(o2));</div><div class="line">console.log(wm.has(&#123;&#125;))</div><div class="line"></div><div class="line">delete o2;</div><div class="line"></div><div class="line">console.log(wm.get(o3));</div><div class="line"></div><div class="line">for(let item in wm) &#123;</div><div class="line">   console.log(item)</div><div class="line">&#125;</div><div class="line"></div><div class="line">for(let item of wm) &#123;</div><div class="line">   console.log(item)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wm.get(o2) // 2</div><div class="line">wm.has(&#123;&#125;) // false</div><div class="line">wm.get(o3) // &#123;&quot;a&quot;:&quot;a&quot;&#125;</div><div class="line">TypeError: wm[Symbol.iterator] is not a function</div></pre></td></tr></table></figure>
<h1 id="代理（Proxy）"><a href="#代理（Proxy）" class="headerlink" title="代理（Proxy）"></a>代理（Proxy）</h1><p>代理可以用来改变对象的行为。 它们允许我们定义 trap 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var obj = function ProfanityGenerator() &#123;</div><div class="line">    return &#123;</div><div class="line">       words: &quot;Horrible words&quot;    </div><div class="line">    &#125;</div><div class="line">&#125;()</div><div class="line"></div><div class="line">var handler = function CensoringHandler() &#123;</div><div class="line">        return &#123;</div><div class="line">        get: function (target, key) &#123;</div><div class="line">            return target[key].replace(&quot;Horrible&quot;, &quot;Nice&quot;);</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;()</div><div class="line"></div><div class="line">var proxy = new Proxy(obj, handler);</div><div class="line"></div><div class="line">console.log(proxy.words);</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxy.words // Nice words</div></pre></td></tr></table></figure>
<p>提供以下 trap ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var handler =</div><div class="line">&#123;</div><div class="line">  get:...,</div><div class="line">  set:...,</div><div class="line">  has:...,</div><div class="line">  deleteProperty:...,</div><div class="line">  apply:...,</div><div class="line">  construct:...,</div><div class="line">  getOwnPropertyDescriptor:...,</div><div class="line">  defineProperty:...,</div><div class="line">  getPrototypeOf:...,</div><div class="line">  setPrototypeOf:...,</div><div class="line">  enumerate:...,</div><div class="line">  ownKeys:...,</div><div class="line">  preventExtensions:...,</div><div class="line">  isExtensible:...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Symbols 是一个新类型。 可用于创建匿名属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var typeSymbol = Symbol(&quot;type&quot;);</div><div class="line"></div><div class="line">class Pet &#123;</div><div class="line"></div><div class="line">  constructor(type) &#123;</div><div class="line"></div><div class="line">    this[typeSymbol] = type;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  getType() &#123;</div><div class="line">     return this[typeSymbol];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">var a = new Pet(&quot;dog&quot;);</div><div class="line">console.log(a.getType());</div><div class="line">console.log(Object.getOwnPropertyNames(a))</div><div class="line"></div><div class="line">console.log(Symbol(&quot;a&quot;) === Symbol(&quot;a&quot;))</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a.getType() // dog</div><div class="line">Object.getOwnPropertyNames(a) // []</div><div class="line">Symbol(&quot;a&quot;) === Symbol(&quot;a&quot;) // false</div></pre></td></tr></table></figure>
<h1 id="可继承内置函数"><a href="#可继承内置函数" class="headerlink" title="可继承内置函数"></a>可继承内置函数</h1><p>我们现在可以继承原生类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class CustomArray extends Array &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">var a = new CustomArray();</div><div class="line"></div><div class="line">a[0] = 2</div><div class="line">console.log(a[0])</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a[0] // 2</div></pre></td></tr></table></figure>
<p>不能使用数组的代理(Proxy)来覆盖getter函数。</p>
<h1 id="新类库"><a href="#新类库" class="headerlink" title="新类库"></a>新类库</h1><p>各种新的方法和常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">console.log(Number.EPSILON)</div><div class="line">console.log(Number.isInteger(Infinity))</div><div class="line">console.log(Number.isNaN(&quot;NaN&quot;))</div><div class="line"></div><div class="line">console.log(Math.acosh(3))</div><div class="line">console.log(Math.hypot(3, 4))</div><div class="line">console.log(Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2))</div><div class="line"></div><div class="line">console.log(&quot;abcde&quot;.includes(&quot;cd&quot;) )</div><div class="line">console.log(&quot;abc&quot;.repeat(3) )</div><div class="line"></div><div class="line">console.log(Array.of(1, 2, 3) )</div><div class="line">console.log([0, 0, 0].fill(7, 1) )</div><div class="line">console.log([1, 2, 3].find(x =&amp;gt; x == 3) )</div><div class="line">console.log([1, 2, 3].findIndex(x =&amp;gt; x == 2))</div><div class="line">console.log([1, 2, 3, 4, 5].copyWithin(3, 0))</div><div class="line">console.log([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].entries() )</div><div class="line">console.log([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].keys() )</div><div class="line">console.log([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].values() )</div><div class="line"></div><div class="line">console.log(Object.assign(&#123;&#125;, &#123; origin: new Point(0,0) &#125;))</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Number.EPSILON // 2.220446049250313e-16</div><div class="line">Number.isInteger(Infinity) // false</div><div class="line">Number.isNaN(&quot;NaN&quot;) // false</div><div class="line">Math.acosh(3) // 1.7627471740390859</div><div class="line">Math.hypot(3, 4) // 5</div><div class="line">Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2</div><div class="line">&quot;abcde&quot;.includes(&quot;cd&quot;) // true</div><div class="line">&quot;abc&quot;.repeat(3) // abcabcabc</div><div class="line">Array.of(1, 2, 3) // [1,2,3]</div><div class="line">[0, 0, 0].fill(7, 1) // [0,7,7]</div><div class="line">[1, 2, 3].find(x =&amp;gt; x == 3) // 3</div><div class="line">[1, 2, 3].findIndex(x =&amp;gt; x == 2) // 1</div><div class="line">[1, 2, 3, 4, 5].copyWithin(3, 0) // [1,2,3,1,2]</div><div class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].entries() // &#123;&#125;</div><div class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].keys() // &#123;&#125;</div><div class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;].values() // TypeError: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;].values is not a function</div><div class="line">Object.assign(&#123;&#125;, &#123; origin: new Point(0,0) &#125;) // ReferenceError: Point is not defined</div><div class="line">文档: Number, Math, Array.from, Array.of, Array.prototype.copyWithin, Object.assign</div></pre></td></tr></table></figure>
<h1 id="二进制和八进制"><a href="#二进制和八进制" class="headerlink" title="二进制和八进制"></a>二进制和八进制</h1><p>二进制和八进制数字的字面量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(0b11111)</div><div class="line">console.log(0o2342)</div><div class="line"></div><div class="line">console.log(0xff); // also in es5</div></pre></td></tr></table></figure>
<p>结果：</p>
<p>ES6 代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0b11111 // 31</div><div class="line">0o2342 // 1250</div><div class="line">0xff // 255</div></pre></td></tr></table></figure></p>
<h1 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h1><p>异步编程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise((resolve, reject) =&amp;gt; &#123;</div><div class="line">  setTimeout(() =&amp;gt; resolve(&quot;1&quot;), 101)</div><div class="line">&#125;)</div><div class="line">var p2 = new Promise((resolve, reject) =&amp;gt; &#123;</div><div class="line">  setTimeout(() =&amp;gt; resolve(&quot;2&quot;), 100)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Promise.race([p1, p2]).then((res) =&amp;gt; &#123;</div><div class="line">   console.log(res)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Promise.all([p1, p2]).then((res) =&amp;gt; &#123;</div><div class="line">   console.log(res)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">res // 2</div><div class="line">res // [&quot;1&quot;,&quot;2&quot;]</div></pre></td></tr></table></figure>
<h2 id="快速的Promise"><a href="#快速的Promise" class="headerlink" title="快速的Promise"></a>快速的Promise</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var p1 = Promise.resolve(&quot;1&quot;)</div><div class="line">var p2 = Promise.reject(&quot;2&quot;)</div><div class="line"></div><div class="line">Promise.race([p1, p2]).then((res) =&amp;gt; &#123;</div><div class="line">   console.log(res)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">res // 1</div></pre></td></tr></table></figure>
<h2 id="快速失败"><a href="#快速失败" class="headerlink" title="快速失败"></a>快速失败</h2><p>如果一个 promise 失败，all和race也将 reject(拒绝)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise((resolve, reject) =&amp;gt; &#123;</div><div class="line">  setTimeout(() =&amp;gt; resolve(&quot;1&quot;), 1001)</div><div class="line">&#125;)</div><div class="line">var p2 = new Promise((resolve, reject) =&amp;gt; &#123;</div><div class="line">  setTimeout(() =&amp;gt; reject(&quot;2&quot;), 1)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Promise.race([p1, p2]).then((res) =&amp;gt; &#123;</div><div class="line">   console.log(&quot;success&quot; + res)</div><div class="line">&#125;, res =&amp;gt; &#123;</div><div class="line">   console.log(&quot;error &quot; + res)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Promise.all([p1, p2]).then((res) =&amp;gt; &#123;</div><div class="line">   console.log(&quot;success&quot; + res)</div><div class="line">&#125;, res =&amp;gt; &#123;</div><div class="line">   console.log(&quot;error &quot; + res)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;error &quot; + res // error 2</div><div class="line">&quot;error &quot; + res // error 2</div></pre></td></tr></table></figure>
<h1 id="反射（Reflect）"><a href="#反射（Reflect）" class="headerlink" title="反射（Reflect）"></a>反射（Reflect）</h1><p>新类型的元编程与新的API现有的还有一些新的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var z = &#123;w: &quot;Super Hello&quot;&#125;</div><div class="line">var y = &#123;x: &quot;hello&quot;, __proto__: z&#125;;</div><div class="line"></div><div class="line">console.log(Reflect.getOwnPropertyDescriptor(y, &quot;x&quot;));</div><div class="line">console.log(Reflect.has(y, &quot;w&quot;));</div><div class="line">console.log(Reflect.ownKeys(y, &quot;w&quot;));</div><div class="line"></div><div class="line">console.log(Reflect.has(y, &quot;x&quot;));</div><div class="line">console.log(Reflect.deleteProperty(y,&quot;x&quot;))</div><div class="line">console.log(Reflect.has(y, &quot;x&quot;));</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Reflect.getOwnPropertyDescriptor(y, &quot;x&quot;) // &#123;&quot;value&quot;:&quot;hello&quot;,&quot;writable&quot;:true,&quot;enumerable&quot;:true,&quot;configurable&quot;:true&#125;</div><div class="line">Reflect.has(y, &quot;w&quot;) // true</div><div class="line">Reflect.ownKeys(y, &quot;w&quot;) // [&quot;x&quot;]</div><div class="line">Reflect.has(y, &quot;x&quot;) // true</div><div class="line">Reflect.deleteProperty(y,&quot;x&quot;) // true</div><div class="line">Reflect.has(y, &quot;x&quot;) // false</div></pre></td></tr></table></figure>
<h1 id="尾调用-Tail-Call-优化"><a href="#尾调用-Tail-Call-优化" class="headerlink" title="尾调用(Tail Call)优化"></a>尾调用(Tail Call)优化</h1><p>尾调用的概念非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p>
<p>ES6可以确保尾调用不会造成堆栈溢出。 （不是所有的实现工作）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function factorial(n, acc = 1) &#123;</div><div class="line">    if (n &amp;lt;= 1) return acc;</div><div class="line">    return factorial(n - 1, n * acc);</div><div class="line">&#125;</div><div class="line">console.log(factorial(10))</div><div class="line">console.log(factorial(100))</div><div class="line">console.log(factorial(1000))</div><div class="line">console.log(factorial(10000))</div><div class="line">console.log(factorial(100000))</div><div class="line">console.log(factorial(1000000))</div></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">factorial(10) // 3628800</div><div class="line">factorial(100) // 9.332621544394418e+157</div><div class="line">factorial(1000) // Infinity</div><div class="line">factorial(10000) // Infinity</div><div class="line">factorial(100000) // RangeError: Maximum call stack size exceeded</div><div class="line">factorial(1000000) // RangeError: Maximum call stack size exceeded</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6语法已经出来很久了，为了加强学习和记忆，总结一下ES6中出现的新特性，参考文章&lt;a href=&quot;http://es6.ruanyifeng.com/。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://es6.ruanyifeng.com/
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>hexo 常用命令</title>
    <link href="http://www.chenqiangyi.cn/2017/03/16/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.chenqiangyi.cn/2017/03/16/hexo-常用命令/</id>
    <published>2017-03-15T16:19:46.000Z</published>
    <updated>2017-06-15T17:24:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g #安装</div><div class="line">npm update hexo -g #升级</div><div class="line">hexo init #初始化</div></pre></td></tr></table></figure>
<h1 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h1><p><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code> #新建文章</p>
<p><code>hexo p</code> == <code>hexo publish</code></p>
<p><code>hexo g</code> == <code>hexo generate</code> #生成</p>
<p><code>hexo s</code> == <code>hexo server</code> #启动服务预览</p>
<p><code>hexo d</code> == <code>hexo deploy</code> #部署</p>
<h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p><code>hexo server</code> #Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>
<p><code>hexo server -s</code> #静态模式</p>
<p><code>hexo server -p 5000</code> #更改端口</p>
<p><code>hexo server -i 192.168.1.1</code> #自定义IP</p>
<p><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略词条命令</p>
<p><code>hexo g</code> #生成静态网页</p>
<p><code>hexo d</code> #开始部署</p>
<h1 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">两个命令的作用是相同的</div><div class="line">hexo generate --deploy</div><div class="line">hexo deploy --generate</div></pre></td></tr></table></figure>
<p><code>hexo deploy -g</code></p>
<p><code>hexo server -g</code></p>
<h1 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h1><p><code>hexo publish [layout] &lt;title&gt;</code></p>
<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p><code>hexo new &quot;postName&quot;</code> #新建文章</p>
<p><code>hexo new page &quot;pageName&quot;</code> #新建页面</p>
<p><code>hexo generate</code> #生成静态页面至public目录</p>
<p><code>hexo server</code> #开启预览访问端口（默认端口4000, ‘ctrl + c’关闭server）</p>
<p><code>hexo deploy</code> #将.deploy目录部署到Github</p>
<p><code>hexo new [layout] &lt;title&gt;</code></p>
<p><code>hexo new photo &quot;My Gallery&quot;</code></p>
<p><code>hexo new &quot;Hello World&quot; --chen</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout</td>
<td style="text-align:center">布局</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">文件建立日期</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: 使用Hexo搭建个人博客</div><div class="line">layout: post</div><div class="line">date: 2014-03-03 19:07:43</div><div class="line">comments: true</div><div class="line">categories: Blog</div><div class="line">tags: [Hexo]</div><div class="line">keywords: Hexo, Blog</div><div class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。</div></pre></td></tr></table></figure>
<h1 id="模板（Scaffold）"><a href="#模板（Scaffold）" class="headerlink" title="模板（Scaffold）"></a>模板（Scaffold）</h1><p><code>hexo new photo &quot;My Gallery&quot;</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">layout</td>
<td style="text-align:center">布局</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">标题</td>
</tr>
<tr>
<td style="text-align:center">date</td>
<td style="text-align:center">文件建立日期</td>
</tr>
</tbody>
</table>
<h1 id="设置文章摘要"><a href="#设置文章摘要" class="headerlink" title="设置文章摘要"></a>设置文章摘要</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以上是文章摘要 &lt;!--more--&gt; 以下是余下全文</div></pre></td></tr></table></figure>
<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p><code>hexo new page &lt;title&gt;</code></p>
<p><code>hexo new post &lt;title&gt;</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:title</td>
<td style="text-align:center">标题</td>
</tr>
<tr>
<td style="text-align:center">:year</td>
<td style="text-align:center">建立的年份（4 位数）</td>
</tr>
<tr>
<td style="text-align:center">:month</td>
<td style="text-align:center">建立的月份（2 位数）</td>
</tr>
<tr>
<td style="text-align:center">:i_month</td>
<td style="text-align:center">建立的月份（去掉开头的零）</td>
</tr>
<tr>
<td style="text-align:center">:day</td>
<td style="text-align:center">建立的日期（2 位数）</td>
</tr>
<tr>
<td style="text-align:center">:i_day</td>
<td style="text-align:center">建立的日期（去掉开头的零）</td>
</tr>
</tbody>
</table>
<h1 id="推送到服务器上"><a href="#推送到服务器上" class="headerlink" title="推送到服务器上"></a>推送到服务器上</h1><p><code>hexo n</code> #写文章</p>
<p><code>hexo g</code> #生成</p>
<p><code>hexo d</code> #部署 可与 <code>hexo g</code> 合并为 <code>hexo d -g</code></p>
<p>一般部署步骤：</p>
<ul>
<li><code>hexo clean</code></li>
<li><code>hexo d -g</code></li>
</ul>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><h2 id="找不到git部署"><a href="#找不到git部署" class="headerlink" title="找不到git部署"></a>找不到git部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR Deployer not found: git</div></pre></td></tr></table></figure>
<p>解决方法</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<h2 id="部署类型设置git"><a href="#部署类型设置git" class="headerlink" title="部署类型设置git"></a>部署类型设置git</h2><p>hexo 3.0 部署类型不再是github, _config.yml 中修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: http://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@***.github.com:***/***.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h2 id="xcodebuild"><a href="#xcodebuild" class="headerlink" title="xcodebuild"></a>xcodebuild</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcode-select: error: tool &apos;xcodebuild&apos; requires Xcode, but active developer directory &apos;/Library/Developer/CommandLineTools&apos; is a command line tools instance</div></pre></td></tr></table></figure>
<p><code>npm install bcrypt</code></p>
<h2 id="RSS-不显示"><a href="#RSS-不显示" class="headerlink" title="RSS 不显示"></a>RSS 不显示</h2><h3 id="安装RSS插件"><a href="#安装RSS插件" class="headerlink" title="安装RSS插件"></a>安装RSS插件</h3><p><code>npm install hexo-generator-feed --save</code></p>
<h3 id="开启RSS功能"><a href="#开启RSS功能" class="headerlink" title="开启RSS功能"></a>开启RSS功能</h3><p>编辑hexo/_config.yml，添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rss: /atom.xml #rss地址  默认即可</div></pre></td></tr></table></figure>
<h2 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h2><p>多说已被关闭，推荐使用网易云</p>
<p>编辑theme目录下的_config.yml,添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angyi_ygt: 506ecdd478bc49caab66fa9b5144  #这个为网易云申请的key</div></pre></td></tr></table></figure>
<p>相关文章：</p>
<ul>
<li><a href="https://hexo.io/" target="_blank" rel="noopener">hexo官网</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo&quot;&gt;&lt;a href=&quot;#hexo&quot; class=&quot;headerlink&quot; title=&quot;hexo&quot;&gt;&lt;/a&gt;hexo&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="hexo 常用命令" scheme="http://www.chenqiangyi.cn/categories/hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="hexo" scheme="http://www.chenqiangyi.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>call与apply详解</title>
    <link href="http://www.chenqiangyi.cn/2017/02/14/call%E4%B8%8Eapply%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.chenqiangyi.cn/2017/02/14/call与apply详解/</id>
    <published>2017-02-14T07:45:29.000Z</published>
    <updated>2017-06-25T15:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>JS apply和js call方法总是让初学者困惑，下文就apply和call的区别，什么情况下用apply,什么情况下用call、apply的巧妙用法来阐述js apply和js call方法的详细使用方法。</p>
</blockquote>
<p>call 和 apply 都是为了改变某个函数运行时的 context 即上下文而存在的，换句话说，就是为了改变函数体内部 this 的指向。因为 JavaScript 的函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。二者的作用完全一样，只是接受参数的方式不太一样。例如，有一个函数 func1 定义如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure></p>
<p>就可以通过</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func1.call(<span class="keyword">this</span>, arg1, arg2);</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">func1.apply(<span class="keyword">this</span>, [arg1, arg2]);</div></pre></td></tr></table></figure>
<p>来调用。其中 this 是你想指定的上下文，他可以任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。</p>
<p>JavaScript 中，某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时，用 call，而不确定的时候，用apply，然后把参数 push 进数组传递进去。<br>当参数数量不确定时，函数内部也可以通过 arguments这个数组来便利所有的参数。</p>
<p>在javascript OOP中，我们经常会这样定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>) </span>&#123; &#125;</div><div class="line">cat.prototype = &#123;</div><div class="line">    <span class="attr">food</span>: <span class="string">"fish"</span>,</div><div class="line">    <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">"I love "</span>+<span class="keyword">this</span>.food);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> blackCat = <span class="keyword">new</span> cat;</div><div class="line">blackCat.say();</div></pre></td></tr></table></figure>
<p>但是如果我们有一个对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whiteDog = &#123;<span class="attr">food</span>:<span class="string">"bone"</span>&#125;</div></pre></td></tr></table></figure></p>
<p>我们不想对它重新定义say方法，那么我们可以通过call或apply用blackCat的say方法：blackCat.say.call(whiteDog);所以,可以看出call和apply是为了动态改变this而出现的，当一个object没有某个方法,但是其他的有，我们可以借助call或apply用其它对象的方法来操作。用的比较多的，通过document.getElementsByTagName选择的dom 节点是一种类似array的array。它不能应用Array下的push,pop等方法。我们可以通过：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> domNodes = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>));</div></pre></td></tr></table></figure>
<p>这样domNodes就可以应用Array下的所有方法了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">obj.call(thisObj, arg1, arg2, ...);</div><div class="line">obj.apply(thisObj, [arg1, arg2, ...]);</div></pre></td></tr></table></figure>
<p>两者作用一致，都是把obj(即this)绑定到thisObj，这时候thisObj具备了obj的属性和方法。或者说thisObj『继承』了obj的属性和方法。唯一区别是apply接受的是数组参数，call接受的是连续参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">j, k</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> j+k;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">j, k</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> j-k;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在控制台运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">5</span>,<span class="number">3</span>); <span class="comment">//8</span></div><div class="line">add.call(sub, <span class="number">5</span>, <span class="number">3</span>); <span class="comment">//8</span></div><div class="line">add.apply(sub, [<span class="number">5</span>, <span class="number">3</span>]); <span class="comment">//8</span></div><div class="line"></div><div class="line">sub(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">//2</span></div><div class="line">sub.call(add, <span class="number">5</span>, <span class="number">3</span>); <span class="comment">//2</span></div><div class="line">sub.apply(add, [<span class="number">5</span>, <span class="number">3</span>]); <span class="comment">//2</span></div></pre></td></tr></table></figure>
<p>通过call和apply，我们可以实现对象继承。示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Parent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">"yjc"</span>;</div><div class="line">    <span class="keyword">this</span>.age = <span class="number">22</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> child = &#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(child);<span class="comment">//Object &#123;&#125; ,空对象</span></div><div class="line">Parent.call(child);</div><div class="line"><span class="built_in">console</span>.log(child); <span class="comment">//Object &#123;name: "yjc", age: 22&#125;</span></div></pre></td></tr></table></figure>
<p>以上实现了对象的继承。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JS apply和js call方法总是让初学者困惑，下文就apply和call的区别，什么情况下用apply,什么情况下用call、apply的巧妙用法来阐述js apply和js call方法的详细使用方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="call" scheme="http://www.chenqiangyi.cn/tags/call/"/>
    
      <category term="apply" scheme="http://www.chenqiangyi.cn/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>垂直水平居中总结</title>
    <link href="http://www.chenqiangyi.cn/2017/01/08/%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
    <id>http://www.chenqiangyi.cn/2017/01/08/垂直水平居中总结/</id>
    <published>2017-01-08T10:48:00.000Z</published>
    <updated>2017-06-14T06:39:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然写到flex布局了，那就总结一下垂直水平居中遇到的问题吧</p>
<h1 id="宽高不定，上下左右垂直居中。"><a href="#宽高不定，上下左右垂直居中。" class="headerlink" title="宽高不定，上下左右垂直居中。"></a>宽高不定，上下左右垂直居中。</h1><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p>绝对定位top left 各50%，然后 transform 负数撑回来</p>
<p>代码如下：</p>
<p>HTML代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;toast&quot;&gt;提交成功&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.toast &#123;</div><div class="line">  position: fixed;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">  padding: 13px 16px;</div><div class="line">  font-size: 14px;</div><div class="line">  color: #ccc;</div><div class="line">  background-color: rgba(37, 38, 45, 0.9);</div><div class="line">  border-radius: 2px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://webapp.didistatic.com/static/webapp/shield/img01.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>But !这时候产品突然需要增加一个需求，Toast 组件一行最多只能有12个中文字符，超过的时候折行</p>
<p>看起来这个要求也不高 ~ 我们修改一下代码</p>
<p>CSS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.toast &#123;</div><div class="line">  position: fixed;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">  padding: 13px 16px;</div><div class="line">  font-size: 14px;</div><div class="line">  color: #ccc;</div><div class="line">  background-color: rgba(37, 38, 45, 0.9);</div><div class="line">  border-radius: 2px;</div><div class="line">  // 新增代码如下</div><div class="line">  width: auto;</div><div class="line">  max-width: 12em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下图</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://webapp.didistatic.com/static/webapp/shield/img02.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>可以看到，最终实现效果在第 9 个字的时候便折行了。这是为什么呢？我们把</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transform: translate(-50%, -50%)</div></pre></td></tr></table></figure>
<p>去掉看一下</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://webapp.didistatic.com/static/webapp/shield/img03.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>可以看到容器宽度在到达屏幕边界的时候就被截断折行了。现在我们设定 left: 90% 看一下</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://webapp.didistatic.com/static/webapp/shield/img04.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>可以明显的看到容器被截断的更加严重。</p>
<p>至此我们分析得知，设置为 position: fixed 的元素不仅位置是相对于屏幕边界定位，如果不指定元素宽高的话，宽高同样也会相对于屏幕边界被截断。</p>
<p>那么如何解决这个问题呢 ~</p>
<p>代码如下 ~</p>
<p>HTML：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;toast-container&quot;&gt;</div><div class="line">  &lt;div class=&quot;toast&quot;&gt;测试十二个字提交成功状态&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.toast-container &#123;</div><div class="line">  position: fixed;</div><div class="line">  width: 100%;</div><div class="line">  height: 100%;</div><div class="line">  left: 100%;</div><div class="line">  top: 100%;</div><div class="line">&#125;</div><div class="line">.toast &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: -50%;</div><div class="line">  left: -50%;</div><div class="line">  transform: translate(-50%, -50%);</div><div class="line">  width: auto;</div><div class="line">  max-width: 12em;</div><div class="line">  padding: 13px 16px;</div><div class="line">  font-size: 14px;</div><div class="line">  color: #ccc;</div><div class="line">  background-color: rgba(37, 38, 45, 0.9);</div><div class="line">  border-radius: 2px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 .toast 外加一个和屏幕宽高相同 .container 容器，将 .container 容器 fixed 定位到窗口外层，再将 .toast 通过 absolute 定位翻转过来即可。</p>
<p>效果如下:</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://webapp.didistatic.com/static/webapp/shield/img05.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="用white-space-nowrap"><a href="#用white-space-nowrap" class="headerlink" title="用white-space:nowrap"></a>用white-space:nowrap</h2><p>代码：</p>
<p>HTML</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;toast&quot;&gt;提交成功提交成功提交成功&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>CSS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.toast &#123;</div><div class="line">  position: fixed;</div><div class="line">  top: 50%;</div><div class="line">  left: 50%;</div><div class="line">  transform: translate(-50%,-50%);</div><div class="line">  padding: 13px 16px;</div><div class="line">  font-size: 14px;</div><div class="line">  color: #ccc;</div><div class="line">  background-color: rgba(37, 38, 45, 0.9);</div><div class="line">  border-radius: 2px;</div><div class="line">  width: auto;</div><div class="line">  max-width: 12em;</div><div class="line">  white-space:nowrap ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://webapp.didistatic.com/static/webapp/shield/img05.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既然写到flex布局了，那就总结一下垂直水平居中遇到的问题吧&lt;/p&gt;
&lt;h1 id=&quot;宽高不定，上下左右垂直居中。&quot;&gt;&lt;a href=&quot;#宽高不定，上下左右垂直居中。&quot; class=&quot;headerlink&quot; title=&quot;宽高不定，上下左右垂直居中。&quot;&gt;&lt;/a&gt;宽高不定，上
    
    </summary>
    
      <category term="垂直水平居中" scheme="http://www.chenqiangyi.cn/categories/%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    
    
      <category term="css" scheme="http://www.chenqiangyi.cn/tags/css/"/>
    
      <category term="flex" scheme="http://www.chenqiangyi.cn/tags/flex/"/>
    
      <category term="垂直水平居中" scheme="http://www.chenqiangyi.cn/tags/%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>flex布局详解</title>
    <link href="http://www.chenqiangyi.cn/2017/01/08/flex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.chenqiangyi.cn/2017/01/08/flex布局详解/</id>
    <published>2017-01-08T08:09:18.000Z</published>
    <updated>2017-08-09T12:15:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写东西了，既然定了每周一篇文章的计划，就要确保认真完成，这就当做是新年的第一篇文章吧！</p>
<p>最近在做微信小程序，微信小程序中的wxss中的布局用的flex布局，今天来总结一下flex布局。</p>
<h1 id="Flex布局是什么？"><a href="#Flex布局是什么？" class="headerlink" title="Flex布局是什么？"></a>Flex布局是什么？</h1><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为Flex布局。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>行内元素也可以使用Flex布局。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  display: inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Webkit内核的浏览器，必须加上 -webkit 前缀。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  display: -webkit-flex; /* Safari */</div><div class="line">  display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，设为Flex布局以后，子元素的float clear 和 vertical-align属性将失效。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
<h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><p>以下6个属性设置在容器上。</p>
<ul>
<li>flex-direction</li>
<li>flex-wrap</li>
<li>flex-flow</li>
<li>justify-content</li>
<li>align-items</li>
<li>align-content</li>
</ul>
<h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  flex-direction: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>它可能有4个值。</p>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。属性定义，如果一条轴线排不下，如何换行。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">  flex-wrap: nowrap | wrap | wrap-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可能取三个值。</p>
<h3 id="默认-：不换行。"><a href="#默认-：不换行。" class="headerlink" title="(默认)：不换行。"></a>(默认)：不换行。</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="换行，第一行在上方。"><a href="#换行，第一行在上方。" class="headerlink" title="换行，第一行在上方。"></a>换行，第一行在上方。</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="换行，第一行在下方。"><a href="#换行，第一行在下方。" class="headerlink" title="换行，第一行在下方。"></a>换行，第一行在下方。</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p>flex-flow属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为row nowrap。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><p>justify-content属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center： 居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等。</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><p>align-items 属性定义项目在交叉轴上如何对齐。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  align-items: flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline: 项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
<h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>该属性可能取6个值。</p>
<ul>
<li>flex-start：与交叉轴的起点对齐。</li>
<li>flex-end：与交叉轴的终点对齐。</li>
<li>center：与交叉轴的中点对齐。</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个交叉轴。</li>
</ul>
<h1 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h1><p>以下6个属性设置在项目上。</p>
<ul>
<li>order</li>
<li>flex-grow</li>
<li>flex-shrink</li>
<li>flex-basis</li>
<li>flex</li>
<li>align-self</li>
</ul>
<h2 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h2><p>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  order: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h2><p>flex-grow属性定义项目的放大比例，默认为，即如果存在剩余空间，也不放大。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-grow: &lt;number&gt;; /* default 0 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果所有项目的属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h2 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h2><p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-shrink: &lt;number&gt;; /* default 1 */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>如果所有项目的属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>
<h2 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h2><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它可以设为跟 width 或 height 属性一样的值（比如350px），则项目将占据固定空间。</p>
<h2 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h2><p>flex属性是 flex-grow 和 flex-basis 的简写，默认值为0 1 auto。后两个属性可选。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该属性有两个快捷值：auto(1 1 auto) 和 none (0 0 auto)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h2 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h2><p>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch 。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<hr>
<p>本文参考阮一峰老师的文章 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写东西了，既然定了每周一篇文章的计划，就要确保认真完成，这就当做是新年的第一篇文章吧！&lt;/p&gt;
&lt;p&gt;最近在做微信小程序，微信小程序中的wxss中的布局用的flex布局，今天来总结一下flex布局。&lt;/p&gt;
&lt;h1 id=&quot;Flex布局是什么？&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="css" scheme="http://www.chenqiangyi.cn/categories/css/"/>
    
    
      <category term="css" scheme="http://www.chenqiangyi.cn/tags/css/"/>
    
      <category term="flex" scheme="http://www.chenqiangyi.cn/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>回首2016，展望2017</title>
    <link href="http://www.chenqiangyi.cn/2017/01/01/%E5%9B%9E%E9%A6%962016%EF%BC%8C%E5%B1%95%E6%9C%9B2017/"/>
    <id>http://www.chenqiangyi.cn/2017/01/01/回首2016，展望2017/</id>
    <published>2016-12-31T17:58:18.000Z</published>
    <updated>2017-06-14T05:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本来是打算在年末写年度总结，结果就一直拖，一下拖到现在。一直说没时间其实就是懒。在去年年末的时候在知乎上看到好多人写的年度总结以及新的一年的展望，自己当时没有写，现在2016年结束了，总感觉少了点什么，大概就是当时年初没有定目标造成的空落感，所以今年加班也一定要把年度总结写完。本文分两部分，一部分回首2016年的种种，另一部分展望2017年，并制定年度计划。</p>
</blockquote>
<p>一、回首过去</p>
<ul>
<li>2016年初来的上海，在这里实习，学习，以及毕业找工作，期间结束了大学生活，走上了社会。在6月份的时候加入到了现在的公司，来到公司后先是熟悉公司所用的框架以及工作流程，后期慢慢开始进行对官网的升级以及修改。再往后就做了一个礼物直播的管理系统，再后来就是完成了支付宝表情搜搜的小程序，以及现在表情搜搜官网的设计与修改，还有未完成的表情搜搜微信小程序。在工作中学到了一些新技术，然而在做支付宝小程序的时候由于自己技术的不足造成了项目的进展缓慢，在这期间也学到了许多。后期就是微信小程序，现在还没开始动手，在最近几天将着手微信小程序。对于工作，由于官网框架的缘故，使得一些新的技术无法使用。在今后的新项目中要多使用新技术，使得学以致用。</li>
<li>在这一年中学到了不少新的技术，同时也有好多新技术只是初步了解，并没有彻底的过一遍并用在工作中。在这一年中新技术不断，不管是框架还是打包工具还是新的语法功能，都有了翻天覆地的变化。新出现的Vue2，angular2只是简单的敲了一下demo，体会到它语法的简洁以及功能的强大。对于热的一塌糊涂的react还没有来的及看，技术债来年一定会慢慢补上的。还有比较强大的node.js，现在是无处不在，所有的工程项目都要依赖node来搭建，还有webpack用以构建完整的工程项目，这一些都是自己的弱项，当时只是不求甚解的看了一下，到真正使用的时候发现还是不会用。还有一个新的变化就是es6，以及es7的到来，现在还并没有使用新的语法，所以下个阶段还要完成新语法的平稳过度。还有就是新的微信小程序，是一个新的机会，现在只是大概的了解其中的原理，真正项目还没有开始。过几天就着手微信小程序的开发。</li>
<li>对于过去一年技术的总结刚开始还能每周一篇技术文章，到了后面就没有怎么写了，写博客当初的初衷是记录成长的点滴，所以初心不能忘，新的一年每一周或者每月四篇技术文章的总结，也算是对自己技术提升的一个总结。2016年自己在github工作了122天，相对于那些大神，差的太远了，即便是不能天天工作，也要多完成一些项目，争取多写代码，多提交代码。在知乎，掘金和segmentfault上面的技术回答也寥寥无几，所以在新的一年要突破自己，多回答问题，多逛技术论坛。</li>
</ul>
<p>二、展望未来</p>
<ul>
<li>完成webpack构建工具的使用以及微信小程序的开发</li>
<li>完成对Vue2框架的整体学习，从打包构建工具到模块化以及到模板整体尝试，必须要完成一整个Vue2项目</li>
<li>完成react项目的实施以及react native移动端的项目尝试，并包含react全家桶的学习</li>
<li>学习typescript以及angular2的学习</li>
<li>完成node.js的学习，从桌面端到服务端，再到数据库的尝试</li>
<li>完成es6或es7的学习</li>
<li>每周一篇技术性博客的书写或者每个月四篇技术性文章的总结。</li>
<li>就是不断逛技术博客，以及研究发现别人的优秀项目，多提交项目记录，多敲代码，希望能在年末的时候github有半年的工作记录;</li>
<li>年龄也不小啦，该找个女朋友了</li>
</ul>
<p>三、总结</p>
<ul>
<li>对于前端来说2016年变化太多了，每一天都有新技术的更新，在前端从业人数的日益增多，前端的就业压力会越来越大，所以要不断提高自己的技术，才能使自己立于不败之地。对于新技术的各种撕逼自己要稳住自己，不能人云亦云，要加强自身基础知识的提高，不能眼高手低。2017年的年度计划挑战很大，不过把整年的年度计划划分为每一个季度、每一个月、每一周、每一天的计划，只要完成每天的小计划，大计划就会完成。相信自己，要改掉拖延症的毛病，每天努力一点点，就会有新的突破，不忘初心，方得始终。</li>
</ul>
<hr>
<p>致2017年年末总结，到时候看看完成了什么还有什么没完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本来是打算在年末写年度总结，结果就一直拖，一下拖到现在。一直说没时间其实就是懒。在去年年末的时候在知乎上看到好多人写的年度总结以及新的一年的展望，自己当时没有写，现在2016年结束了，总感觉少了点什么，大概就是当时年初没有定目标造成的空落感，所以今
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.chenqiangyi.cn/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活感悟" scheme="http://www.chenqiangyi.cn/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
      <category term="新年总结" scheme="http://www.chenqiangyi.cn/tags/%E6%96%B0%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>mac 命令行 安装 需要管理员 权限“Please try running this command again as root/Administrator”的解决办法</title>
    <link href="http://www.chenqiangyi.cn/2016/12/19/mac%E6%9D%83%E9%99%90%E4%BF%AE%E6%94%B9/"/>
    <id>http://www.chenqiangyi.cn/2016/12/19/mac权限修改/</id>
    <published>2016-12-19T02:47:17.000Z</published>
    <updated>2017-06-14T13:52:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我们在进行mac 命令行安装软件的时候，有的时候会遇见这样的问题：Please try running this command again as root/Administrator.</p>
</blockquote>
<p>如图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.chenqiangyi.com/wp-content/uploads/2016/12/1-300x48.png" alt="1" title="">
                </div>
                <div class="image-caption">1</div>
            </figure>
<p>解决办法是在终端输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R $USER /usr/local</div></pre></td></tr></table></figure>
<p>然后输入安装的密码，在执行相关安装命令就行了</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们在进行mac 命令行安装软件的时候，有的时候会遇见这样的问题：Please try running this command again as root/Administrator.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="mac命令" scheme="http://www.chenqiangyi.cn/categories/mac%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="mac命令" scheme="http://www.chenqiangyi.cn/tags/mac%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://www.chenqiangyi.cn/2016/11/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://www.chenqiangyi.cn/2016/11/15/排序算法/</id>
    <published>2016-11-15T15:43:03.000Z</published>
    <updated>2017-06-19T02:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var array = [1, 5, 6, 2 , 11, 3, 4, 8, 9, 15, 100, 20, 31, 256]</div></pre></td></tr></table></figure>
<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 最佳情况：T(n) = O(n)</div><div class="line">// 最差情况：T(n) = O(n2)</div><div class="line">// 平均情况：T(n) = O(n2)</div><div class="line">function bubbleSort(data, type) &#123;</div><div class="line">  var arr = data ? data : []</div><div class="line">  var i = data.length -1</div><div class="line">  while (i &gt; 0) &#123;</div><div class="line">    var post = 0</div><div class="line">    for (var j = 0; j &lt; i; j++) &#123;</div><div class="line">      if (arr[j] &gt; arr[j+1]) &#123;</div><div class="line">        post = j</div><div class="line">        var t = arr[j]</div><div class="line">        arr[j] = arr[j+1]</div><div class="line">        arr[j+1] = t</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    i = post</div><div class="line">  &#125;</div><div class="line">  arr =  type === &apos;max&apos; ? arr.reverse() : arr</div><div class="line">  return arr</div><div class="line">&#125;</div><div class="line"></div><div class="line">//console.log(bubbleSort(array, &apos;min&apos;))</div><div class="line">//console.log(bubbleSort(array, &apos;max&apos;))</div></pre></td></tr></table></figure>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 最佳情况：T(n) = O(n2)</div><div class="line">// 最差情况：T(n) = O(n2)</div><div class="line">// 平均情况：T(n) = O(n2)</div><div class="line">function chooseSort(data, type) &#123;</div><div class="line">  var arr = data ? data : []</div><div class="line">  var l = arr.length</div><div class="line">  var minIndex, t</div><div class="line">  for (var i = 0; i &lt; l - 1; i++) &#123;</div><div class="line">    minIndex = i</div><div class="line">    for (var j = i + 1; j &lt; l - 1; j++) &#123;</div><div class="line">      if (arr[j] &lt; arr[minIndex]) &#123;</div><div class="line">        minIndex = j</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    t = arr[i]</div><div class="line">    arr[i] = arr[minIndex]</div><div class="line">    arr[minIndex] = t</div><div class="line">  &#125;</div><div class="line">  arr =  type === &apos;max&apos; ? arr.reverse() : arr</div><div class="line">  return arr</div><div class="line">&#125;</div><div class="line"></div><div class="line">// console.log(chooseSort(array, &apos;min&apos;))</div><div class="line">// console.log(chooseSort(array, &apos;max&apos;))</div></pre></td></tr></table></figure>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function insertSort(data, type) &#123;</div><div class="line">  var arr = data ? data : []</div><div class="line">  for (var i = 1; i &lt; arr.length; i ++) &#123;</div><div class="line">    var key = arr[i]</div><div class="line">    var j = i - 1</div><div class="line">    while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) &#123;</div><div class="line">      arr[j + 1] = arr[j]</div><div class="line">      j--</div><div class="line">    &#125;</div><div class="line">    arr[j + 1] = key</div><div class="line">  &#125;</div><div class="line">  arr =  type === &apos;max&apos; ? arr.reverse() : arr</div><div class="line">  return arr</div><div class="line">&#125;</div><div class="line"></div><div class="line">// console.log(insertSort(array, &apos;min&apos;))</div><div class="line">// console.log(insertSort(array, &apos;max&apos;))</div></pre></td></tr></table></figure>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var array = [1, 5, 6, 2 , 11, 3, 4, 8, 9, 15, 100, 20, 31, 256, 1024]</div><div class="line"></div><div class="line">function quickSort (arr, type) &#123;</div><div class="line">  if (arr.length &lt;= 1) &#123;</div><div class="line">    return arr  //如果数组只有一个数就返回</div><div class="line">  &#125;</div><div class="line">  var index = Math.floor(arr.length / 2)  //找到中间数的索引值，如果是浮点数就向下取整</div><div class="line">  var pivot = arr.splice(index, 1)[0]  //找到中间数的值</div><div class="line">  var left = []</div><div class="line">  var right = []</div><div class="line">  for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">    if (type === &apos;min&apos;) &#123;</div><div class="line">      arr[i] &lt; pivot ? left.push(arr[i]) : right.push(arr[i])  //基准点左边的数传到数组的左边</div><div class="line">    &#125; else &#123;</div><div class="line">      arr[i] &gt; pivot ? left.push(arr[i]) : right.push(arr[i])  //基准点右边的数传到数组的右边</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return quickSort(left, type).concat([pivot], quickSort(right, type))  //递归不断重复排序</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(quickSort(array, &apos;min&apos;))</div><div class="line">console.log(quickSort(array, &apos;max&apos;))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="排序算法" scheme="http://www.chenqiangyi.cn/categories/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序算法" scheme="http://www.chenqiangyi.cn/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB常用语句</title>
    <link href="http://www.chenqiangyi.cn/2016/10/20/MongoDB%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/"/>
    <id>http://www.chenqiangyi.cn/2016/10/20/MongoDB常用语句/</id>
    <published>2016-10-20T15:53:42.000Z</published>
    <updated>2017-06-17T17:35:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记录一下MongoDB常用语句，顺带与SQL做个简单的对比。</p>
</blockquote>
<h1 id="查询-find"><a href="#查询-find" class="headerlink" title="查询(find)"></a>查询(find)</h1><h2 id="查询所有结果"><a href="#查询所有结果" class="headerlink" title="查询所有结果"></a>查询所有结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article</div><div class="line"></div><div class="line">db.article.find()</div></pre></td></tr></table></figure>
<h2 id="指定返回哪些键"><a href="#指定返回哪些键" class="headerlink" title="指定返回哪些键"></a>指定返回哪些键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select title, author from article</div><div class="line"></div><div class="line">db.article.find(&#123;&#125;, &#123;&quot;title&quot;: 1, &quot;author&quot;: 1&#125;)</div></pre></td></tr></table></figure>
<h2 id="where-条件"><a href="#where-条件" class="headerlink" title="where 条件"></a>where 条件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where title = &quot;mongodb&quot;</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;title&quot;: &quot;mongodb&quot;&#125;)</div></pre></td></tr></table></figure>
<h2 id="and-条件"><a href="#and-条件" class="headerlink" title="and 条件"></a>and 条件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where title = &quot;mongodb&quot; and author = &quot;god&quot;</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;title&quot;: &quot;mongodb&quot;, &quot;author&quot;: &quot;god&quot;&#125;)</div></pre></td></tr></table></figure>
<h2 id="or-条件"><a href="#or-条件" class="headerlink" title="or 条件"></a>or 条件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where title = &quot;mongodb&quot; or author = &quot;god&quot;</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;&amp;or&quot;: [&#123;&quot;title&quot;: &quot;mongodb&quot;&#125;, &#123;&quot;author&quot;: &quot;god&quot;&#125;]&#125;)</div></pre></td></tr></table></figure>
<h2 id="比较条件"><a href="#比较条件" class="headerlink" title="比较条件"></a>比较条件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where read &gt;= 100;</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;read&quot;: &#123;&quot;$gt&quot;: 100&#125;&#125;)</div></pre></td></tr></table></figure>
<p><code>$gt</code>(&gt;)、<code>$gte</code>(&gt;=)、<code>$lt</code>(&lt;)、<code>$lte</code>(&lt;=)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where read &gt;= 100 and read &lt;=200</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;read&quot;: &#123;&quot;$gte&quot;: 100, &quot;$lte&quot;: 200&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="in-条件"><a href="#in-条件" class="headerlink" title="in 条件"></a>in 条件</h2> <figure class="highlight plain"><figcaption><span>* from article where author in ("a", "b", "c")</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">db.article.find(&#123;&quot;author&quot;: &#123;&quot;$in&quot;: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="like"><a href="#like" class="headerlink" title="like"></a>like</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where title like &quot;%mongodb%&quot;</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;title&quot;: /mongodb/&#125;)</div></pre></td></tr></table></figure>
<h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select count(*) from article</div><div class="line"></div><div class="line">db.article.count()</div></pre></td></tr></table></figure>
<h2 id="不等于"><a href="#不等于" class="headerlink" title="不等于"></a>不等于</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where author != &quot;a&quot;</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;author&quot;: &#123;&quot;$ne&quot;: &quot;a&quot;&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="升序："><a href="#升序：" class="headerlink" title="升序："></a>升序：</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where type = &quot;mongodb&quot; order by read desc</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;type&quot;: &quot;mongodb&quot;&#125;).sort(&#123;&quot;read&quot;: -1&#125;)</div></pre></td></tr></table></figure>
<h3 id="降序："><a href="#降序：" class="headerlink" title="降序："></a>降序：</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from article where type = &quot;mongodb&quot; order by read asc</div><div class="line"></div><div class="line">db.article.find(&#123;&quot;type&quot;: &quot;mongodb&quot;&#125;).sort(&#123;&quot;read&quot;: 1&#125;)</div></pre></td></tr></table></figure>
<p> <code>findOne()</code>: 除了只返回一个查询结果外，使用方法与<code>find()</code>一样</p>
<h1 id="创建-insert"><a href="#创建-insert" class="headerlink" title="创建(insert)"></a>创建(insert)</h1> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">insert into article(title, author, content) values(&quot;mongodb&quot;, &quot;tg&quot;, &quot;haha&quot;)</div><div class="line"></div><div class="line">db.article.insert(&#123;&quot;title&quot;: &quot;mongodb&quot;, &quot;author&quot;: &quot;tg&quot;, &quot;content&quot;: &quot;haha&quot;&#125;)</div></pre></td></tr></table></figure>
<h1 id="更新-update"><a href="#更新-update" class="headerlink" title="更新(update)"></a>更新(update)</h1><h2 id="update"><a href="#update" class="headerlink" title="update()"></a>update()</h2><p> 语法：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.clooection.update(query, update[, options])</div></pre></td></tr></table></figure>
<ul>
<li><code>query</code>: 必选，查询条件，类似find中的查询条件</li>
<li><code>update</code>: 必选，update的对象和一些更新的操作符(如$,$inc…)等</li>
<li><code>options</code>: 可选，一些更新配置的对象。</li>
<li><code>upsert</code>: 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>
<li><code>multi</code>: 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>
<li><p><code>writeConcern</code>: 可选，抛出异常的级别。</p>
<p>简单更新:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">update article set title = &quot;mongodb&quot; where read &gt; 100</div><div class="line"></div><div class="line">db.article.update(&#123;&quot;read&quot;: &#123;&quot;$gt&quot;: 100&#125;&#125;, &#123;&quot;$set&quot;: &#123;&quot;title&quot;: &quot;mongodb&quot;&#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="save"><a href="#save" class="headerlink" title="save()"></a>save()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.article.save(&#123;_id: 123, title: &quot;mongodb&quot;&#125;)</div></pre></td></tr></table></figure>
<p>执行上面的语句，如果集合中已经存在一个_id为123的文档，则更新对应字段;否则插入。</p>
<p>注：如果更新对象不存在_id，系统会自动生成并作为新的文档插入。</p>
<h2 id="更新操作符"><a href="#更新操作符" class="headerlink" title="更新操作符"></a>更新操作符</h2><p>MongoDB提供一些强大的更新操作符。</p>
<p>更新特定字段（<code>$set</code>）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">update game set count = 10000 where _id = 123</div><div class="line"></div><div class="line">db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123;&quot;$set&quot;: &#123;&quot;count&quot;: 10000&#125;&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>删除特定字段(<code>$unset</code>):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123;&quot;$unset&quot;: &#123;&quot;author&quot;: 1&#125;&#125;)</div></pre></td></tr></table></figure>
<p>注：<code>$unset</code>指定字段的值只需是任意合法值即可。</p>
<p>（未完）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录一下MongoDB常用语句，顺带与SQL做个简单的对比。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;查询-find&quot;&gt;&lt;a href=&quot;#查询-find&quot; class=&quot;headerlink&quot; title=&quot;查询(find)&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="MongoDB" scheme="http://www.chenqiangyi.cn/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://www.chenqiangyi.cn/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>数组去重总结</title>
    <link href="http://www.chenqiangyi.cn/2016/09/10/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%BB%E7%BB%93/"/>
    <id>http://www.chenqiangyi.cn/2016/09/10/数组去重总结/</id>
    <published>2016-09-10T02:35:23.000Z</published>
    <updated>2017-08-31T09:11:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>数组去重是一个常见的需求，在面试中也经常被问到，曾经被问到写出几种方法来完成数组去重，当时没有做出来，今天就来总一下。主要是理清思路，以下方法网上都能找得到，这里简单做一下总结。</p>
</blockquote>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ul>
<li>遍历数组，比较，比较到相同的就删除后面的</li>
<li>遍历数组，比较，比较相同的，跳过前面重复的，不相同的放入新数组</li>
<li>任取一个数组放入新数组，遍历剩下的数组元素任取一个，与新数组元素一一比较，如有不同的，放入新数组。</li>
<li>遍历数组，取一个元素，作为对象的属性，判断属性是否存在</li>
<li>利用ES6提供的 new Set(arr),可直接去重</li>
</ul>
<h1 id="代码示范"><a href="#代码示范" class="headerlink" title="代码示范"></a>代码示范</h1><h2 id="删除后面重复的"><a href="#删除后面重复的" class="headerlink" title="删除后面重复的"></a>删除后面重复的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function unique(arr) &#123;</div><div class="line">    var a1 = (new Date).getTime();</div><div class="line">    for (var i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">        for (var j = i + 1; j &lt; arr.length; j++) &#123;</div><div class="line">            if (arr[i] === arr[j]) &#123;</div><div class="line">                arr.splice(j, 1);</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.info((new Date).getTime() - a1);</div><div class="line">    return arr.sort((a, b) =&gt; &#123;return a - b&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="相同则跳出循环"><a href="#相同则跳出循环" class="headerlink" title="相同则跳出循环"></a>相同则跳出循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function unique(arr) &#123;</div><div class="line">    var a1 = (new Date()).getTime();</div><div class="line">    var b = [], n = arr.length, i, j;</div><div class="line">    for (i = 0; i &lt; n; i++) &#123;</div><div class="line">        for (j = i + 1; j &lt; n; j++) &#123;</div><div class="line">            if (arr[i] === arr[j]) &#123;</div><div class="line">                j = false;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (j) &#123;</div><div class="line">            b.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.info((new Date()).getTime() - a1);</div><div class="line">    return b.sort((a, b) =&gt; &#123;return a - b&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不同则放入新数组"><a href="#不同则放入新数组" class="headerlink" title="不同则放入新数组"></a>不同则放入新数组</h2><p>这里j循环虽然继续了，但是i值已经变了。就等于是一个新的i循环：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function unique(arr) &#123;</div><div class="line">    var a1 = ((new Date()).getTime());</div><div class="line">    var b = [], n =arr.length, i, j;</div><div class="line">    for (var i = 0; i &lt; n; i++) &#123;</div><div class="line">        for (j = i + 1; j &lt; n; j++) &#123;</div><div class="line">            if (arr[i] === arr[j]) &#123;</div><div class="line">                j = ++i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        b.push(arr[i]);</div><div class="line">    &#125;</div><div class="line">    console.info((new Date()).getTime() - a1);</div><div class="line">    return b.sort((a, b) =&gt; &#123;return a -b&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="保证新数组中的数都是唯一的"><a href="#保证新数组中的数都是唯一的" class="headerlink" title="保证新数组中的数都是唯一的"></a>保证新数组中的数都是唯一的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function unique(arr) &#123;</div><div class="line">    var a1 = ((new Date()).getTime());</div><div class="line">    var m = [], f;</div><div class="line">    for (var i = 0; i&lt; arr.length; i++) &#123;</div><div class="line">        f = true;</div><div class="line">        for (var j = 0; j &lt; m.length; j++) &#123;</div><div class="line">            if (arr[i] === arr[j]) &#123;</div><div class="line">                f = false;</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (f) &#123;</div><div class="line">            m.push(arr[i])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.info((new Date()).getTime() - a1);</div><div class="line">    return m.sort((a, b) =&gt; &#123; return a - b&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用对象属性"><a href="#用对象属性" class="headerlink" title="用对象属性"></a>用对象属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function unique(arr) &#123;</div><div class="line">    var a1 = (new Date()).getTime();</div><div class="line">    var m, n = [], o = &#123;&#125;;</div><div class="line">    for (var i = 0; (m = arr[i]) !== undefined; i++) &#123;</div><div class="line">        if (!o[m]) &#123;</div><div class="line">            n.push(m);</div><div class="line">            o[m] = true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.info((new Date()).getTime() - a1);</div><div class="line">    return n.sort((a, b) =&gt; &#123;return a - b&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ES6新特性-new-Set"><a href="#ES6新特性-new-Set" class="headerlink" title="ES6新特性 new Set()"></a>ES6新特性 new Set()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 3, 5, 2, 3, 1, 4, 2, 3];</div><div class="line">var a = new Set(arr);</div><div class="line">console.log([...a].sort((a, b) =&gt; &#123;return a - b&#125;));  // [1, 2, 3, 4, 5]</div></pre></td></tr></table></figure>
<h2 id="获取数组中最大值"><a href="#获取数组中最大值" class="headerlink" title="获取数组中最大值"></a>获取数组中最大值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 3, 5, 2, 3, 1, 4, 2, 3];</div><div class="line">var getMax = function (array) &#123;</div><div class="line">    var max = undefined;</div><div class="line">    for (var i = 0; i &lt; array.length; i++) &#123;</div><div class="line">        max = max === undefined ? array[i] : (max &gt;= array[i] ? max : array[i])</div><div class="line">    &#125;</div><div class="line">    return max;</div><div class="line">&#125;</div><div class="line">getMax(arr)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数组去重是一个常见的需求，在面试中也经常被问到，曾经被问到写出几种方法来完成数组去重，当时没有做出来，今天就来总一下。主要是理清思路，以下方法网上都能找得到，这里简单做一下总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;思路&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="数组去重" scheme="http://www.chenqiangyi.cn/categories/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    
    
      <category term="数组去重" scheme="http://www.chenqiangyi.cn/tags/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    
      <category term="Array" scheme="http://www.chenqiangyi.cn/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>ES6新特性(2)——深刻而易懂的ES6解构教程</title>
    <link href="http://www.chenqiangyi.cn/2016/08/09/ES6%E6%96%B0%E7%89%B9%E6%80%A7(2)%E2%80%94%E2%80%94%E6%B7%B1%E5%88%BB%E8%80%8C%E6%98%93%E6%87%82%E7%9A%84ES6%E8%A7%A3%E6%9E%84%E6%95%99%E7%A8%8B/"/>
    <id>http://www.chenqiangyi.cn/2016/08/09/ES6新特性(2)——深刻而易懂的ES6解构教程/</id>
    <published>2016-08-09T10:49:50.000Z</published>
    <updated>2017-06-14T13:13:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>解构是ES6的新特性，用于从JavaScript对象和数组中提取数据，语法上比ES5所提供的更加简洁、紧凑、清晰。它不仅能减少你的代码量，还能从根本上改变你的编码方式。用的越多，你就会发现越多塑造数据和函数的方式，这些实现方式在过去几乎是不可能的。本文将深入探讨解构赋值，为你介绍该新特性中你所需要知悉的一切。</p>
</blockquote>
<h1 id="什么是解构？"><a href="#什么是解构？" class="headerlink" title="什么是解构？"></a>什么是解构？</h1><p>解构与构造数据截然相反。 例如，它不是构造一个新的对象或数组，而是逐个拆分现有的对象或数组，来提取你所需要的数据</p>
<p>ES6使用了一种新模式来匹配你想要提取的数值, 解构赋值就是采用了这种模式。 该模式会映射出你正在解构的数据结构，只有那些与该模式相匹配的数据，才会被提取出来。</p>
<p>被解构的数据项位于赋值运算符 = 的右侧，可以是任何数组和对象的组合，允许随意嵌套。用于给这些数据赋值的变量个数不限。</p>
<h1 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h1><p>数组解构 使用一个数组作为一个数据项，你可以根据 数组模式 （用于从数组中匹配你所需要的数值）从这个数组里面提取数值给一个或者多个变量赋值。</p>
<p>数组模式 是根据数值的位置来鉴别哪些值是你想要提取的。它必须能精确地映射数组的结构，来要让数组模式中的每个变量都被赋上 被解构数组中 位置与之相对应的值。</p>
<p>举几个例子来帮助我们理解吧：</p>
<h2 id="数组模式示例"><a href="#数组模式示例" class="headerlink" title="数组模式示例"></a>数组模式示例</h2><p>把数组中所有的数值赋给一个个单独的变量&lt;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//设置数组</div><div class="line">const avengers = [&apos;Tony Stark&apos;, &apos;Steve Rogers&apos;, &apos;Natasha Romanoff&apos;];</div><div class="line">//b把数组结构赋值给变量。数组模式位于赋值运算符&apos;=&apos; 的左侧，被解构的数组在其右侧。</div><div class="line">const [ironMan, cap, blackWidow] = avengers;</div><div class="line">// ironMan = &apos;Tony Stark&apos;</div><div class="line">// cap = &apos;Steve Rogers&apos;</div><div class="line">//blackWidow = &apos;Natasha Romanoff&apos;</div><div class="line">//输出 ironMan:</div><div class="line">ironMan;</div><div class="line">&quot;Tony Stark&quot;</div></pre></td></tr></table></figure>
<p>提取除第一个外的所有数值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const avengers = [&apos;Tony Stark&apos;, &apos;Steve rogers&apos;, &apos;Natasha Romanoff&apos;];</div><div class="line">const [, cap, blackWidow] = avengers;</div><div class="line">  //  ironMan = Error: undefined</div><div class="line">  //  cap = &apos;Steve Rogers&apos;</div><div class="line">  //  blackWidow = &apos;Natasha Romanoff</div><div class="line">  //  输出 cap: &lt;span style=&quot;font-size:13.2px;line-height:1.5;&quot;&gt;cap;&lt;/span&gt;</div></pre></td></tr></table></figure>
<p>提取除第二个外的所有数值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const avengers = [&apos;Tony Stark&apos;, &apos;Steve rogers&apos;, &apos;Natasha Romanoff&apos;];</div><div class="line">const [ironMan, , blackWidow] = avengers;</div><div class="line">  //  ironMan = &apos;Tony Stark&apos;</div><div class="line">  //  cap = Error: undefined</div><div class="line">  //  blackWidow = &apos;Natasha Romanoff</div><div class="line">  //  输出 blackWidow:</div><div class="line">   blackWidow;</div></pre></td></tr></table></figure>
<p>提取除最后一个外的所有数值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const avengers = [&apos;Tony Stark&apos;, &apos;Steve rogers&apos;, &apos;Natasha Romanoff&apos;];</div><div class="line">//  ironMan vs cap</div><div class="line">const [ironMan, cap] = avengers;</div><div class="line">  //  ironMan = &apos;Tony Stark&apos;</div><div class="line">  //  cap = &apos;Steve Rogers&apos;</div><div class="line">  //  blackWidow = Error: undefined</div><div class="line">  //  输出 b</div></pre></td></tr></table></figure>
<h2 id="嵌套数组"><a href="#嵌套数组" class="headerlink" title="嵌套数组"></a>嵌套数组</h2><p>这种匹配模式也支持嵌套数组，只要保证赋值运算符 = 左侧的数组模式与右侧的数组结构相匹配即可。再次说明一下，= 左边的变量都会被赋上 = 右侧数组中位置与之相对应的值。 无论你怎么深层次地嵌套，仍可以对它们进行解构。</p>
<h2 id="解构嵌套的数组"><a href="#解构嵌套的数组" class="headerlink" title="解构嵌套的数组"></a>解构嵌套的数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const avengers = [</div><div class="line">                   &apos;Natasha Romanoff&apos;,</div><div class="line">                   [&apos;Tony Stark&apos;, &apos;James Rhodes&apos;],</div><div class="line">                   [&apos;Steve Rogers&apos;, &apos;Sam Wilson&apos;] </div><div class="line">                 ];</div><div class="line">const [blackWidow, [ironMan, warMachine], [cap, falcon]] = avengers;</div><div class="line">//  blackWidow = &apos;Natasha Romanoff&apos;</div><div class="line">//  ironMan = &apos;Tony Stark&apos;</div><div class="line">//  varMachine = &apos;James Rhodes&apos;</div><div class="line">// cap = &apos;Steve Rogers&apos;</div><div class="line">//  falcon = &apos;sam Wilson&apos;</div><div class="line">//  Out warMachine:</div><div class="line">warMachine;</div></pre></td></tr></table></figure>
<p>从深层嵌套的数组中提取一个值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const avengers = [</div><div class="line">                   &apos;Natasha Romanoff&apos;,</div><div class="line">                   [&apos;Tony Stark&apos;, &apos;James Rhodes&apos;],</div><div class="line">                   [&apos;Steve Rogers&apos;, &apos;Sam Wilson&apos;] </div><div class="line">                 ];</div><div class="line">const [ , //跳过 &apos;Natasha Romanoff&apos; [ironMan, warMachine], [cap, falcon]] = avengers;</div><div class="line">//  blackWidow = &apos;Natasha Romanoff&apos;</div><div class="line">//  ironMan = &apos;Tony Stark&apos;</div><div class="line">//  varMachine = &apos;James Rhodes&apos;</div><div class="line">// cap = &apos;Steve Rogers&apos;</div><div class="line">//  falcon = &apos;sam Wilson&apos;</div><div class="line">//  Out warMachine:</div><div class="line">warMachine;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解构是ES6的新特性，用于从JavaScript对象和数组中提取数据，语法上比ES5所提供的更加简洁、紧凑、清晰。它不仅能减少你的代码量，还能从根本上改变你的编码方式。用的越多，你就会发现越多塑造数据和函数的方式，这些实现方式在过去几乎是不可能的。
    
    </summary>
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/tags/ES6/"/>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
