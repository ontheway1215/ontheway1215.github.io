<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ChenBlog-chenqiangyi.cn</title>
  <subtitle>IT技术分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.chenqiangyi.cn/"/>
  <updated>2017-06-08T09:50:06.000Z</updated>
  <id>http://www.chenqiangyi.cn/</id>
  
  <author>
    <name>ontheway1215</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue键盘事件小技巧</title>
    <link href="http://www.chenqiangyi.cn/2017/05/10/vue-e9-94-ae-e7-9b-98-e4-ba-8b-e4-bb-b6-e5-b0-8f-e6-8a-80-e5-b7-a7/"/>
    <id>http://www.chenqiangyi.cn/2017/05/10/vue-e9-94-ae-e7-9b-98-e4-ba-8b-e4-bb-b6-e5-b0-8f-e6-8a-80-e5-b7-a7/</id>
    <published>2017-05-10T14:04:01.000Z</published>
    <updated>2017-06-08T09:50:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近用Vue做一个运营工具，需求是当在编辑完成的时候可以知接按住Alt+S提交表单并保存,查询vue文档发现尤大已经把常用的按键封装到框架中了，然而所有的绑定都必须在表单元素中进行，显然不符合我那个开发工具的需求，最后不断查文档，并没有找到相关的文章。最后只能用原生的keydown事件了，监听整个windowd,代码如下：</p>
<pre class="prettyprint lang-js">mounted() {
     var that = this;
     document.onkeydown=function(e) {
           if(e &amp;&amp; e.keyCode==83 &amp;&amp; e.altKey ){     //同时按下Alt+S
                   that.submitBtn(e);
           }
      }
},
methods: {
    submitBtn(e) {
        //相关函数
    }
}</pre>
然后就总结一下vue中的键盘事件：

<pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;script src="vue.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript"&gt;
        window.onload = function(){
            var vm = new Vue({
                el:'#box',
                methods:{
                    show:function(ev){
                        if(ev.keyCode == 13){
                            alert('你按回车键了');
                        }
                    },
                }
            });
        }
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="box"&gt;
        &lt;input type="text" placeholder="请输入" @keyup="show($event)"&gt;

        &lt;input type="text" placeholder="请输入" @keyup.13="show($event)"&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>

<pre><code>&lt;span class=&quot;hljs-keyword&quot; style=&quot;color:#0000FF;&quot;&gt;@keyup.13 回车&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot; style=&quot;color:#0000FF;&quot;&gt;@keyup.enter 回车&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot; style=&quot;color:#0000FF;&quot;&gt;@keyup.left 左键&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot; style=&quot;color:#0000FF;&quot;&gt;@keyup.right 右键&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot; style=&quot;color:#0000FF;&quot;&gt;@keyup.up 上键&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot; style=&quot;color:#0000FF;&quot;&gt;@keyup.down 下键&lt;/span&gt;

&lt;span class=&quot;hljs-keyword&quot; style=&quot;color:#0000FF;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;@keyup.&lt;span class=&quot;hljs-keyword&quot;&gt;delete 删除键&lt;span style=&quot;color:#4C33E5;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;font-size:16px;&quot;&gt;其他按键别名：&lt;/span&gt;

&lt;span style=&quot;font-size:16px;&quot;&gt; &lt;/span&gt;
</code></pre><ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete&nbsp;(捕获 “删除” 和 “退格” 键)</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li><p>.right<br><span style="color:#34495E;font-family:&quot;font-size:15px;background-color:#FFFFFF;">可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应：</span></p>
<p><span style="font-size:16px;"> </span></p>
</li>
<li><p>.ctrl</p>
</li>
<li>.alt</li>
<li>.shift</li>
<li>.meta<br><span style="color:#34495E;font-family:&quot;font-size:15px;font-weight:600;background-color:#FFFFFF;">注意：在Mac系统键盘上，meta对应命令键 (⌘)。在Windows系统键盘meta对应windows徽标键(⊞)。在Sun操作系统键盘上，meta对应实心宝石键 (◆)。在其他特定键盘上，尤其在MIT和Lisp键盘及其后续，比如Knight键盘，space-cadet键盘，meta被标记为“META”。在Symbolics键盘上，meta被标记为“META” 或者 “Meta”。</span></li>
</ul>
<p><span style="color:#34495E;font-family:&quot;font-size:15px;font-weight:600;background-color:#FFFFFF;">例如:</span></p>
<pre><code>&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;color:#34495E;font-family:&amp;quot;font-size:15px;font-weight:600;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;&lt;/span&gt;
</code></pre><pre>        

<div class="line">
    <span class="comment" style="color:#B3B3B3;">&lt;!-- Alt + C --&gt;</span>
</div>

<div class="line">
    <span class="tag" style="color:#2973B7;">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string" style="color:#42B983;">"clear"</span>&gt;</span>
</div>

<div class="line">

</div>

<div class="line">
    <span class="comment" style="color:#B3B3B3;">&lt;!-- Ctrl + Click --&gt;</span>
</div>

<div class="line">
    <span class="tag" style="color:#2973B7;">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string" style="color:#42B983;">"doSomething"</span>&gt;</span>Do something<span class="tag" style="color:#2973B7;">&lt;/<span class="name">div</span>&gt;</span>
</div>
</pre>

<pre><code>&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;color:#34495E;font-family:&amp;quot;font-size:15px;font-weight:600;background-color:#FFFFFF;&quot;&gt;
</code></pre><p></p>
<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用Vue做一个运营工具，需求是当在编辑完成的时候可以知接按住Alt+S提交表单并保存,查询vue文档发现尤大已经把常用的按键封装到框架中了，然而所有的绑定都必须在表单元素中进行，显然不符合我那个开发工具的需求，最后不断查文档，并没有找到相关的文章。最后只能用原生的key
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://www.chenqiangyi.cn/tags/vue/"/>
    
      <category term="键盘事件" scheme="http://www.chenqiangyi.cn/tags/%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>es6新特性总结</title>
    <link href="http://www.chenqiangyi.cn/2017/04/25/es6-e6-96-b0-e7-89-b9-e6-80-a7-e6-80-bb-e7-bb-93/"/>
    <id>http://www.chenqiangyi.cn/2017/04/25/es6-e6-96-b0-e7-89-b9-e6-80-a7-e6-80-bb-e7-bb-93/</id>
    <published>2017-04-25T04:28:31.000Z</published>
    <updated>2017-06-08T09:47:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES6语法已经出来很久了，为了加强学习和记忆，总结一下ES6中出现的新特性，参考文章<a href="http://es6.ruanyifeng.com/。" target="_blank" rel="external">http://es6.ruanyifeng.com/。</a></p>
<p>##<br>    箭头函数</p>
<pre><code>&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt;function() 函数的简写表示法，但它不绑定 this。&lt;/span&gt;

&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt;ES6 代码:&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">var odds = evens.map(v =&gt; v + 1);  // no parentes and no brackets
var nums = evens.map((v, i) =&gt; v + i);
var pairs = evens.map(v =&gt; ({even: v, odd: v + 1}));

// Statement bodies
nums.forEach(v =&gt; {
  if (v % 5 === 0)
    fives.push(v);
});</pre>

<p>##<br>    this是如何工作的</p>
<pre><code>&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt;ES6 代码:&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">var object = {
    name: "Name",
    arrowGetName: () =&gt; this.name,
    regularGetName: function() { return this.name },
    arrowGetThis: () =&gt; this,
    regularGetThis: function() { return this }
}
console.log(object);
console.log(object.name)
console.log(object.arrowGetName());
console.log(object.arrowGetThis());
console.log(this);
console.log(object.regularGetName());
console.log(object.regularGetThis());</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">console.log(object);  =&gt;
Object {
    name: "Name",
    arrowGetName: function,
    regularGetName: function,
    arrowGetThis: function,
    regularGetThis: function
}

console.log(object.name) =&gt;
Name

console.log(object.arrowGetName());  =&gt;
undefined

console.log(object.arrowGetThis());  =&gt;  [object Window]
Window {
    stop: function,
    open: function,
    alert: function,
    confirm: function,
    prompt: function,
    ...
}

console.log(this);  =&gt; 同上

console.log(object.regularGetName());   =&gt;
Name

console.log(object.regularGetThis());  =&gt;
Object {
    name: "Name",
    arrowGetName: function,
    regularGetName: function,
    arrowGetThis: function,
    regularGetThis: function
}</pre>

<p>##</p>
<p>##<br>    我们知道“真正”语言中的类(Classes)。在 ES6 中类(Classes)其实是原型继承的语法糖。</p>
<pre><code>ES6代码
</code></pre><pre class="prettyprint lang-js">class SkinnedMesh extends THREE.Mesh {
  constructor(geometry, materials) {
    super(geometry, materials);

    this.idMatrix = SkinnedMesh.defaultMatrix();
    this.bones = [];
    this.boneMatrices = [];
    //...
  }
  update(camera) {
    //...
    super.update();
  }
  get boneCount() {
    return this.bones.length;
  }
  set matrixType(matrixType) {
    this.idMatrix = SkinnedMesh[matrixType]();
  }
  static defaultMatrix() {
    return new THREE.Matrix4();
  }
}</pre>

<p>##<br>    增强的对象字面量</p>
<pre><code>ES6代码
</code></pre><pre class="prettyprint lang-js">var theProtoObj = {
  toString: function() {
    return "The ProtoOBject To string"
  }
}
var handler = () =&gt; "handler"
var obj = {
    // __proto__
    __proto__: theProtoObj,
    // Shorthand for ‘handler: handler’
    handler,
    // Methods
    toString() {
     // Super calls
     return "d " + super.toString();
    },
    // Computed (dynamic) property names
    [ "prop_" + (() =&gt; 42)() ]: 42
};

console.log(obj.handler)
console.log(obj.handler())
console.log(obj.toString())
console.log(obj.prop_42)</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">obj.handler -&gt; () =&gt; "handler"
obj.handler() -&gt; handler
obj.toString() -&gt; d The ProtoOBject To string
obj.prop_42 -&gt;
(() =&gt; 42)()  是一个立即执行函数 (() =&gt; 42)() 相当于
(function() {
    return 42;
})()
42</pre>

<p>##<br>    字符串插值</p>
<pre class="prettyprint lang-js">var name = "Bob", time = "today";

var multiLine = `This Line Spans Multiple Lines`；

console.log(`Hello ${name},how are you ${time}?`)
console.log(multiLine)</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">a -&gt; 1
b -&gt; 3</pre>

<p>####<br>    对象也能很好的解构</p>
<pre class="prettyprint lang-js">nodes = () =&gt; { return {op: "a", lhs: "b", rhs: "c"}}
var { op: a, lhs: b , rhs: c } = nodes()
console.log(a)
console.log(b)
console.log(c)</pre>

<p>###<br>    结果：</p>
<p>###</p>
<pre class="prettyprint lang-js">a -&gt; a
b -&gt; b
c -&gt; c</pre>

<p>##<br>    使用速记表示法</p>
<p>##</p>
<pre class="prettyprint lang-js">nodes = () =&gt; { return {lhs: "a", op: "b", rhs: "c"}}

// binds `op`, `lhs` and `rhs` in scope
var {op, lhs, rhs} = nodes()

console.log(op)
console.log(lhs)
console.log(rhs)</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">op -&gt; b
lhs -&gt; a
rhs -&gt; c</pre>

<p>##<br>    可在参数位置使用</p>
<pre class="prettyprint lang-js">function g({name: x}) {
  return x
}

function m({name}) {
  return name
}

console.log(g({name: 5}))
console.log(m({name: 5}))
</pre>

<p>###<br>    结果：</p>
<pre><code>** **
</code></pre><pre class="prettyprint lang-js">**g({name: 5}) -&gt; 5
m({name: 5}) -&gt; 5**</pre>
** **

##
    **故障弱化解构**

    ** **

<pre class="prettyprint lang-js">**var [a] = []
var [b = 1] = []
var c = [];
console.log(a)
console.log(b);
console.log(c);**</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">a -&gt; undefined
b -&gt; 1
c -&gt; []</pre>

<p>##<br>    参数默认值（Default）</p>
<pre class="prettyprint lang-js">function f(x, y=12) {
  return x + y;
}

console.log(f(3))
console.log(f(3,2))</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">f(3) -&gt; 15
f(3,2) -&gt; 5</pre>

<p>##<br>    扩展（Spread）</p>
<pre><code>在函数中
</code></pre><pre class="prettyprint lang-js">function f(x, y, z) {
  return x + y + z;
}
// 传递数组的每个元素作为参数
console.log(f(...[1,2,3]))</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">f(...[1,2,3]) -&gt; 6</pre>

<p>##<br>    在数组中</p>
<pre class="prettyprint lang-js">var parts = ["shoulders", "knees"];
var lyrics = ["head", ...parts, "and", "toes"];

console.log(lyrics)</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">var parts = ["shoulders", "knees"];
var lyrics = ["head", ...parts, "and", "toes"];

console.log(lyrics)</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">lyrics -&gt; ["head","shoulders","knees","and","toes"]</pre>

<p>##<br>    扩展 + 对象字面量</p>
<p>####</p>
<pre><code>    我们可以使用这个创造很酷的对象。

&lt;div&gt;
    &lt;span style=&quot;font-weight:normal;&quot;&gt;
</code></pre><pre class="prettyprint lang-js">let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
console.log(x); // 1
console.log(y); // 2
console.log(z); // { a: 3, b: 4 }

// Spread properties
let n = { x, y, ...z };
console.log(n); // { x: 1, y: 2, a: 3, b: 4 }
console.log(obj)
可惜的是它还不支持：

npm install --save-dev babel-plugin-transform-object-rest-spread</pre>

        <h2>
            <span style="font-weight:normal;">Rest</span>

    


####
    <span style="font-weight:normal;"><span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">我们可以使用 rest 操作符来允许无限参数。</span></span>

####
    <span style="font-weight:normal;">
<pre class="prettyprint lang-js">function demo(part1, ...part2) {
    return {part1, part2}
}

console.log(demo(1,2,3,4,5,6))</pre>
</span>

###
    <span style="font-weight:normal;">结果：</span>

<pre class="prettyprint lang-js">demo(1,2,3,4,5,6) -&gt; {"part1":1,"part2":[2,3,4,5,6]}</pre>

<p>##<br>    Let</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">let是新的var。 因为它有块级作用域。</span></p>
<pre class="prettyprint lang-js">{
   var globalVar = "from demo1"
}

{
   let globalLet = "from demo2";
}

console.log(globalVar)
console.log(globalLet)</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">globalVar -&gt; from demo1
globalLet -&gt; ReferenceError: globalLet is not defined</pre>

<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">但是，它不会向window分配任何内容：</span></p>
<pre class="prettyprint lang-js">let me = "go";  // 全局作用域
var i = "able"; // 全局作用域

console.log(window.me);
console.log(window.i);</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">window.me -&gt; undefined
window.i -&gt; able</pre>

<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">不能使用let重新声明一个变量：</span></p>
<p>####</p>
<pre class="prettyprint lang-js">let me = "foo";
let me = "bar";
console.log(me);</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">SyntaxError: Identifier 'me' has already been declared</pre>
<pre class="prettyprint lang-js">var me = "foo";
var me = "bar";
console.log(me)</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">me -&gt; bar</pre>

<p>##</p>
<p>##<br>    Const</p>
<pre><code>&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt;**const 是只读变量。**&lt;/span&gt;

&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt;** **&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">**const a = "b"
a = "a"**</pre>
** **

###
    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">**结果：**</span>

<pre class="prettyprint lang-js">TypeError: Assignment to constant variable.</pre>

<p>####</p>
<p>####<br>    <strong>应该注意</strong>，const 对象仍然可以被改变的。</p>
<pre class="prettyprint lang-js">const a = { a: "a" }
a.a = "b"
console.log(a)</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">a -&gt; {"a":"b"}</pre>

<p>##</p>
<p>##<br>    <strong>For..of</strong></p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">迭代器的新类型，可以替代for..in。它返回的是值而不是keys</span></p>
<p>####</p>
<pre class="prettyprint lang-js">let list = [4, 5, 6];
console.log(list)
for (let i in list) {
   console.log(i);
}</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">list -&gt; [4,5,6]
i -&gt; 0
i -&gt; 1
i -&gt; 2</pre>
<pre class="prettyprint lang-js">let list = [4, 5, 6];
console.log(list)
for (let i of list) {
   console.log(i);
}</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">list -&gt; [4,5,6]
i -&gt; 4
i -&gt; 5
i -&gt; 6</pre>

<p>##</p>
<p>##<br>    迭代器（Iterators）</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">迭代器是一个比数组更动态的类型。</span></p>
<pre><code>&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">let infinite = {
  [Symbol.iterator]() {
    let c = 0;
    return {
      next() {
        c++;
        return { done: false, value: c }
      }
    }
  }
}

console.log("start");

for (var n of infinite) {
  // truncate the sequence at 1000
  if (n &gt; 10)
    break;
  console.log(n);
}</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">"start" -&gt; start
n -&gt; 1
n -&gt; 2
n -&gt; 3
n -&gt; 4
n -&gt; 5
n -&gt; 6
n -&gt; 7
n -&gt; 8
n -&gt; 9
n -&gt; 10</pre>

<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">使用Typescript，我们可以看到它接口的样子：</span></p>
<p>####</p>
<pre class="prettyprint lang-js">Typescript 代码:
interface IteratorResult {
  done: boolean;
  value: any;
}
interface Iterator {
  next(): IteratorResult;
}
interface Iterable {
  [Symbol.iterator](): Iterator
}</pre>

<p>##</p>
<p>###<br>    生成器（Generators）</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">生成器创建迭代器，并且比迭代器更具动态性。他们不必以相同的方式跟踪状态 并不支持 done 的概念。</span></p>
<pre class="prettyprint lang-js">var infinity = {
  [Symbol.iterator]: function*() {
    var c = 1;
    for (;;) {   
      yield c++;
    }
  }
}

console.log("start")
for (var n of infinity) {
  // truncate the sequence at 1000
  if (n &gt; 10)
    break;
  console.log(n);
}</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">"start" -&gt; start
n -&gt; 1
n -&gt; 2
n -&gt; 3
n -&gt; 4
n -&gt; 5
n -&gt; 6
n -&gt; 7
n -&gt; 8
n -&gt; 9
n -&gt; 10</pre>

<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">使用Typescript 再次显示接口：</span></p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">Typescript 代码:</span></p>
<pre class="prettyprint lang-js">interface Generator extends Iterator {
    next(value?: any): IteratorResult;
    throw(exception: any);
}</pre>

<p>##</p>
<p>###<br>    function* Iterators and generator</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">一个产量的例子*</span></p>
<pre class="prettyprint lang-js">function* anotherGenerator(i) {
  yield i + 1;
  yield i + 2;
  yield i + 3;
}

function* generator(i) {
  yield i;
  yield* anotherGenerator(i);
  yield i + 10;
}

var gen = generator(10);

console.log(gen.next().value);
console.log(gen.next().value);
console.log(gen.next().value);
console.log(gen.next().value);
console.log(gen.next().value);</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">gen.next().value -&gt; 10
gen.next().value -&gt; 11
gen.next().value -&gt; 12
gen.next().value -&gt; 13
gen.next().value -&gt; 20</pre>

<p>##</p>
<p>###<br>    Unicode</p>
<pre><code>&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt;ES6 为Unicode 提供了更好的支持。&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">var regex = new RegExp('\u{61}', 'u');

console.log(regex.unicode)
console.log("\uD842\uDFD7")
console.log("\uD842\uDFD7".codePointAt())</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">regex.unicode -&gt; true
"" -&gt;
"".codePointAt() -&gt; 134103</pre>

<p>##</p>
<p>###<br>    模块和模块加载器</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">原生支持模块。</span></p>
<pre class="prettyprint lang-js">import defaultMember from "module-name";
import * as name from "module-name";
import { member } from "module-name";
import { member as alias } from "module-name";
import { member1 , member2 } from "module-name";
import { member1 , member2 as alias2 , [...] } from "module-name";
import defaultMember, { member [ , [...] ] } from "module-name";
import defaultMember, * as name from "module-name";
import "module-name";
export { name1, name2, …, nameN };
export { variable1 as name1, variable2 as name2, …, nameN };
export let name1, name2, …, nameN; // also var
export let name1 = …, name2 = …, …, nameN; // also var, const

export expression;
export default expression;
export default function (…) { … } // also class, function*
export default function name1(…) { … } // also class, function*
export { name1 as default, … };

export * from …;
export { name1, name2, …, nameN } from …;
export { import1 as name1, import2 as name2, …, nameN } from …;
Import Export</pre>

<p>##<br>    Set</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">Set 为数学对应，其中所有项目都是唯一的。对于知道SQL的人来说，这相当于distinct。</span></p>
<p>####</p>
<pre class="prettyprint lang-js">var set = new Set();
set.add("Potato").add("Tomato").add("Tomato");
console.log(set.size)
console.log(set.has("Tomato"))

for(var item of set) {
   console.log(item)
}</pre>

<p>###<br>    结果</p>
<pre><code>** **
</code></pre><pre class="prettyprint lang-js">**set.size -&gt; 2
set.has("Tomato") -&gt; true
item -&gt; Potato
item -&gt; Tomato**</pre>
** **

##
    **
    <h3 id="weakset" style="font-size:16px;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;background-color:#FFFFFF;">
        WeakSet

**
</h3></h2>

####
    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">WeakSet对象允许您在集合中存储弱持有的对象。没有引用的对象将被垃圾回收。</span>

<pre class="prettyprint lang-js">var item = { a:"Potato"}
var set = new WeakSet();
set.add({ a:"Potato"}).add(item).add({ a:"Tomato"}).add({ a:"Tomato"});
console.log(set.size)
console.log(set.has({a:"Tomato"}))
console.log(set.has(item))

for(let item of set) {
   console.log(item)
}</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">set.size -&gt; undefined
set.has({a:"Tomato"}) -&gt; false
set.has(item) -&gt; true
TypeError: set[Symbol.iterator] is not a function</pre>

<p>##<br>    Map</p>
<pre><code>Map也称词典
</code></pre><pre class="prettyprint lang-js">var map = new Map();
map.set("Potato", 12);
map.set("Tomato", 34);

console.log(map.get("Potato"))

for(let item of map) {
   console.log(item)
}

for(let item in map) {
   console.log(item)
}</pre>

<p>####<br>    结果：</p>
<pre class="prettyprint lang-js">map.get("Potato") -&gt; 12
item -&gt; ["Potato",12]
item -&gt; ["Tomato",34]</pre>
<span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">可以使用除字符串之外的其他类型。</span>

<pre class="prettyprint lang-js">var map = new Map();
var key = {a: "a"}
map.set(key, 12);

console.log(map.get(key))
console.log(map.get({a: "a"}))</pre>

<p>###<br>    结果</p>
<pre class="prettyprint lang-js">map.get(key) -&gt; 12
map.get({a: "a"}) -&gt; undefined</pre>

<p>##<br>    WeakMap</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">使用键的对象，并且只保留对键的弱引用。</span></p>
<p>####</p>
<pre class="prettyprint lang-js">var wm = new WeakMap();

var o1  = {}
var o2  = {}
var o3  = {}
wm.set(o1, 1);
wm.set(o2, 2);
wm.set(o3, {a: "a"});
wm.set({}, 4);

console.log(wm.get(o2));
console.log(wm.has({}))

delete o2;

console.log(wm.get(o3));

for(let item in wm) {
   console.log(item)
}

for(let item of wm) {
   console.log(item)
}</pre>

<p>###<br>    <strong>结果</strong></p>
<pre class="prettyprint lang-js">wm.get(o2) -&gt; 2
wm.has({}) -&gt; false
wm.get(o3) -&gt; {"a":"a"}
TypeError: wm[Symbol.iterator] is not a function</pre>

<p>##<br>    代理（Proxy）</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">代理可以用来改变对象的行为。 它们允许我们定义 trap 。</span></p>
<p>####</p>
<pre class="prettyprint lang-js">var obj = function ProfanityGenerator() {
    return {
       words: "Horrible words"    
    }
}()

var handler = function CensoringHandler() {
        return {
        get: function (target, key) {
            return target[key].replace("Horrible", "Nice");
        },
    }

}()

var proxy = new Proxy(obj, handler);

console.log(proxy.words);</pre>

<p>###<br>    结果</p>
<pre class="prettyprint lang-js">proxy.words -&gt; Nice words</pre>

<p>##</p>
<p>###<br>    提供以下 trap ：</p>
<pre class="prettyprint lang-js">var handler =
{
  get:...,
  set:...,
  has:...,
  deleteProperty:...,
  apply:...,
  construct:...,
  getOwnPropertyDescriptor:...,
  defineProperty:...,
  getPrototypeOf:...,
  setPrototypeOf:...,
  enumerate:...,
  ownKeys:...,
  preventExtensions:...,
  isExtensible:...
}</pre>

<pre><code>&lt;span style=&quot;color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;&quot;&gt;Symbols 是一个新类型。 可用于创建匿名属性。&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">var typeSymbol = Symbol("type");

class Pet {

  constructor(type) {

    this[typeSymbol] = type;

  }
  getType() {
     return this[typeSymbol];
  }

}

var a = new Pet("dog");
console.log(a.getType());
console.log(Object.getOwnPropertyNames(a))

console.log(Symbol("a") === Symbol("a"))</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">a.getType() -&gt; dog
Object.getOwnPropertyNames(a) -&gt; []
Symbol("a") === Symbol("a") -&gt; false</pre>

<p>##<br>    可继承内置函数</p>
<p>####<br>    我们现在可以继承原生类</p>
<p>####</p>
<pre class="prettyprint lang-js">class CustomArray extends Array {

}

var a = new CustomArray();

a[0] = 2
console.log(a[0])</pre>
结果：

<pre class="prettyprint lang-js">a[0] -&gt; 2</pre>

<p>##</p>
<p>###<br>    不能使用数组的代理(Proxy)来覆盖getter函数。</p>
<p>###<br>    新类库</p>
<p>###<br>    各种新的方法和常量</p>
<pre><code>** **
</code></pre><pre class="prettyprint lang-js">**console.log(Number.EPSILON)
console.log(Number.isInteger(Infinity))
console.log(Number.isNaN("NaN"))

console.log(Math.acosh(3))
console.log(Math.hypot(3, 4))
console.log(Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2))

console.log("abcde".includes("cd") )
console.log("abc".repeat(3) )

console.log(Array.of(1, 2, 3) )
console.log([0, 0, 0].fill(7, 1) )
console.log([1, 2, 3].find(x =&gt; x == 3) )
console.log([1, 2, 3].findIndex(x =&gt; x == 2))
console.log([1, 2, 3, 4, 5].copyWithin(3, 0))
console.log(["a", "b", "c"].entries() )
console.log(["a", "b", "c"].keys() )
console.log(["a", "b", "c"].values() )

console.log(Object.assign({}, { origin: new Point(0,0) }))**</pre>
** **

###
    **结果：**

<pre class="prettyprint lang-js">Number.EPSILON -&gt; 2.220446049250313e-16
Number.isInteger(Infinity) -&gt; false
Number.isNaN("NaN") -&gt; false
Math.acosh(3) -&gt; 1.7627471740390859
Math.hypot(3, 4) -&gt; 5
Math.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) -&gt; 2
"abcde".includes("cd") -&gt; true
"abc".repeat(3) -&gt; abcabcabc
Array.of(1, 2, 3) -&gt; [1,2,3]
[0, 0, 0].fill(7, 1) -&gt; [0,7,7]
[1, 2, 3].find(x =&gt; x == 3) -&gt; 3
[1, 2, 3].findIndex(x =&gt; x == 2) -&gt; 1
[1, 2, 3, 4, 5].copyWithin(3, 0) -&gt; [1,2,3,1,2]
["a", "b", "c"].entries() -&gt; {}
["a", "b", "c"].keys() -&gt; {}
["a", "b", "c"].values() -&gt; TypeError: ["a","b","c"].values is not a function
Object.assign({}, { origin: new Point(0,0) }) -&gt; ReferenceError: Point is not defined
文档: Number, Math, Array.from, Array.of, Array.prototype.copyWithin, Object.assign</pre>

<p>##</p>
<p>###<br>    二进制和八进制</p>
<p>####<br>    <span style="color:#777777;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">二进制和八进制数字的字面量。</span></p>
<pre class="prettyprint lang-js">console.log(0b11111)
console.log(0o2342)

console.log(0xff); // also in es5</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">ES6 代码:
0b11111 -&gt; 31
0o2342 -&gt; 1250
0xff -&gt; 255</pre>

<p>##</p>
<p>###<br>    Promises</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">异步编程。</span></p>
<p>####</p>
<pre class="prettyprint lang-js">var p1 = new Promise((resolve, reject) =&gt; {
  setTimeout(() =&gt; resolve("1"), 101)
})
var p2 = new Promise((resolve, reject) =&gt; {
  setTimeout(() =&gt; resolve("2"), 100)
})

Promise.race([p1, p2]).then((res) =&gt; {
   console.log(res)
})

Promise.all([p1, p2]).then((res) =&gt; {
   console.log(res)
})</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">res -&gt; 2
res -&gt; ["1","2"]</pre>

<p>##<br>    快速的Promise</p>
<p>##</p>
<pre class="prettyprint lang-js">var p1 = Promise.resolve("1")
var p2 = Promise.reject("2")

Promise.race([p1, p2]).then((res) =&gt; {
   console.log(res)
})</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">res -&gt; 1</pre>

<p>##<br>    快速失败</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">如果一个 promise 失败，all和race也将 reject(拒绝)。</span></p>
<p>####</p>
<pre class="prettyprint lang-js">var p1 = new Promise((resolve, reject) =&gt; {
  setTimeout(() =&gt; resolve("1"), 1001)
})
var p2 = new Promise((resolve, reject) =&gt; {
  setTimeout(() =&gt; reject("2"), 1)
})

Promise.race([p1, p2]).then((res) =&gt; {
   console.log("success" + res)
}, res =&gt; {
   console.log("error " + res)
})

Promise.all([p1, p2]).then((res) =&gt; {
   console.log("success" + res)
}, res =&gt; {
   console.log("error " + res)
})</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">"error " + res -&gt; error 2
"error " + res -&gt; error 2</pre>

<p>##<br>    反射（Reflect）</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">新类型的元编程与新的API现有的还有一些新的方法。</span></p>
<pre class="prettyprint lang-js">var z = {w: "Super Hello"}
var y = {x: "hello", __proto__: z};

console.log(Reflect.getOwnPropertyDescriptor(y, "x"));
console.log(Reflect.has(y, "w"));
console.log(Reflect.ownKeys(y, "w"));

console.log(Reflect.has(y, "x"));
console.log(Reflect.deleteProperty(y,"x"))
console.log(Reflect.has(y, "x"));</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">Reflect.getOwnPropertyDescriptor(y, "x") -&gt; {"value":"hello","writable":true,"enumerable":true,"configurable":true}
Reflect.has(y, "w") -&gt; true
Reflect.ownKeys(y, "w") -&gt; ["x"]
Reflect.has(y, "x") -&gt; true
Reflect.deleteProperty(y,"x") -&gt; true
Reflect.has(y, "x") -&gt; false</pre>

<p>##<br>    尾调用(Tail Call)优化</p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">尾调用的概念非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</span></p>
<p>####<br>    <span style="color:#333333;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">ES6可以确保尾调用不会造成堆栈溢出。 （不是所有的实现工作）。</span></p>
<p>####</p>
<pre class="prettyprint lang-js">function factorial(n, acc = 1) {
    if (n &lt;= 1) return acc;
    return factorial(n - 1, n * acc);
}
console.log(factorial(10))
console.log(factorial(100))
console.log(factorial(1000))
console.log(factorial(10000))
console.log(factorial(100000))
console.log(factorial(1000000))</pre>

<p>###<br>    结果：</p>
<pre class="prettyprint lang-js">factorial(10) -&gt; 3628800
factorial(100) -&gt; 9.332621544394418e+157
factorial(1000) -&gt; Infinity
factorial(10000) -&gt; Infinity
factorial(100000) -&gt; RangeError: Maximum call stack size exceeded
factorial(1000000) -&gt; RangeError: Maximum call stack size exceeded</pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6语法已经出来很久了，为了加强学习和记忆，总结一下ES6中出现的新特性，参考文章&lt;a href=&quot;http://es6.ruanyifeng.com/。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://es6.ruanyifeng.com/
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>call与apply详解</title>
    <link href="http://www.chenqiangyi.cn/2017/02/14/call-e4-b8-8eapply-e8-af-a6-e8-a7-a3/"/>
    <id>http://www.chenqiangyi.cn/2017/02/14/call-e4-b8-8eapply-e8-af-a6-e8-a7-a3/</id>
    <published>2017-02-14T07:45:29.000Z</published>
    <updated>2017-06-13T07:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>JS apply和js call方法总是让初学者困惑，下文就apply和call的区别，什么情况下用apply,什么情况下用call、apply的巧妙用法来阐述js apply和js call方法的详细使用方法。</p>
<p>一、<br>    call 和 apply 都是为了改变某个函数运行时的 context 即上下文而存在的，换句话说，就是为了改变函数体内部 this 的指向。因为 JavaScript 的函数存在「定义时上下文」和「运行时上下文」以及「上下文是可以改变的」这样的概念。二者的作用完全一样，只是接受参数的方式不太一样。例如，有一个函数 func1 定义如下：</p>
<pre><code>&lt;pre class=&quot;prettyprint lang-js&quot;&gt;var func1 = function(arg1, arg2) {};&lt;/pre&gt;
</code></pre><p>就可以通过 func1.call(this, arg1, arg2); 或者 func1.apply(this, <span class="s1">[arg1, arg2]</span>); 来调用。其中 this 是你想指定的上下文，他可以任何一个 JavaScript 对象(JavaScript 中一切皆对象)，call 需要把参数按顺序传递进去，而 apply 则是把参数放在数组里。<br>JavaScript 中，某个函数的参数数量是不固定的，因此要说适用条件的话，当你的参数是明确知道数量时，用 call，而不确定的时候，用 apply，然后把参数 push 进数组传递进去。当参数数量不确定时，函数内部也可以通过 arguments 这个数组来便利所有的参数。</p>
<p>二、在javascript OOP中，我们经常会这样定义：</p>
<pre class="prettyprint lang-js">function cat(){ } cat.prototype={  food:"fish",  say: function(){  alert("I love "+this.food);  } } var blackCat = new cat;
blackCat.say();</pre>

<p>但是如果我们有一个对象whiteDog = {food:<span class="s1">“bone”</span>},我们不想对它重新定义say方法，那么我们可以通过call或apply用blackCat的say方法：blackCat.say.call(whiteDog);所以,可以看出call和apply是为了动态改变this而出现的，当一个object没有某个方法,但是其他的有，我们可以借助call或apply用其它对象的方法来操作。用的比较多的，通过document.getElementsByTagName选择的dom 节点是一种类似array的array。它不能应用Array下的push,pop等方法。我们可以通过：</p>
<pre><code>&lt;pre class=&quot;prettyprint lang-js&quot;&gt;var domNodes = Array.prototype.slice.call(document.getElementsByTagName(&quot;*&quot;));&lt;/pre&gt;
</code></pre><p>这样domNodes就可以应用Array下的所有方法了。</p>
<p>三、</p>
<pre><code>&lt;pre class=&quot;prettyprint lang-js&quot;&gt;obj.call(thisObj, arg1, arg2, ...);
obj.apply(thisObj, [arg1, arg2, ...]);&lt;/pre&gt;
</code></pre><p>  两者作用一致，都是把obj(即this)绑定到thisObj，这时候thisObj具备了obj的属性和方法。或者说thisObj『继承』了obj的属性和方法。唯一区别是apply接受的是数组参数，call接受的是连续参数。</p>
<pre class="prettyprint lang-js">function add(j, k){
    return j+k;
}

function sub(j, k){
    return j-k;
}</pre>

<p>我们在控制台运行：</p>
<pre class="prettyprint lang-js">add(5,3); //8
add.call(sub, 5, 3); //8
add.apply(sub, [5, 3]); //8

sub(5, 3); //2
sub.call(add, 5, 3); //2
sub.apply(add, [5, 3]); //2</pre>

<p>通过call和apply，我们可以实现对象继承。示例：</p>
<pre class="prettyprint lang-js">var Parent = function(){
    this.name = "yjc";
    this.age = 22;
}
var child = {};
console.log(child);//Object {} ,空对象
Parent.call(child);
console.log(child); //Object {name: "yjc", age: 22}</pre>

<p>以上实现了对象的继承。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS apply和js call方法总是让初学者困惑，下文就apply和call的区别，什么情况下用apply,什么情况下用call、apply的巧妙用法来阐述js apply和js call方法的详细使用方法。&lt;/p&gt;
&lt;p&gt;一、&lt;br&gt;    call 和 apply 
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="call" scheme="http://www.chenqiangyi.cn/tags/call/"/>
    
      <category term="apply" scheme="http://www.chenqiangyi.cn/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>垂直水平居中总结</title>
    <link href="http://www.chenqiangyi.cn/2017/01/08/e5-9e-82-e7-9b-b4-e6-b0-b4-e5-b9-b3-e5-b1-85-e4-b8-ad-e6-80-bb-e7-bb-93/"/>
    <id>http://www.chenqiangyi.cn/2017/01/08/e5-9e-82-e7-9b-b4-e6-b0-b4-e5-b9-b3-e5-b1-85-e4-b8-ad-e6-80-bb-e7-bb-93/</id>
    <published>2017-01-08T10:48:00.000Z</published>
    <updated>2017-06-08T09:42:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>既然写到flex布局了，那就总结一下垂直水平居中遇到的问题吧</p>
<pre><code>一、&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;宽高不定，上下左右垂直居中。&lt;/span&gt;

(1).&lt;span&gt;绝对定位top left 各50%，然后&lt;/span&gt;&lt;span style=&quot;color:#000080;font-family:Menlo, Monaco, Consolas, &amp;quot;font-size:12.8px;background-color:#F8F8F8;&quot;&gt;transform&lt;/span&gt;&lt;span&gt;负数撑回来&lt;/span&gt;

&lt;span&gt;代码如下：&lt;/span&gt;

&lt;span&gt;HTML代码&lt;/span&gt;

&lt;span&gt; &lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">&lt;div class=”toast”&gt;提交成功&lt;/div&gt;</pre><br>CSS代码</p>
<pre><code>&lt;span&gt; &lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">.toast {<br>  position: fixed;<br>  top: 50%;<br>  left: 50%;<br>  transform: translate(-50%, -50%);<br>  padding: 13px 16px;<br>  font-size: 14px;<br>  color: #ccc;<br>  background-color: rgba(37, 38, 45, 0.9);<br>  border-radius: 2px;<br>}</pre><br>效果图：</p>
<pre><code>![](https://webapp.didistatic.com/static/webapp/shield/img01.png)

&lt;span&gt;&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;But !&lt;/span&gt;&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;这时候产品突然需要增加一个需求，Toast 组件一行最多只能有 12 个中文字符，超过的时候折行&lt;/span&gt;&lt;/span&gt;

看起来这个要求也不高 ~ 我们修改一下代码

CSS
</code></pre><p><pre class="prettyprint lang-js">.toast {<br>  position: fixed;<br>  top: 50%;<br>  left: 50%;<br>  transform: translate(-50%, -50%);<br>  padding: 13px 16px;<br>  font-size: 14px;<br>  color: #ccc;<br>  background-color: rgba(37, 38, 45, 0.9);<br>  border-radius: 2px;<br>  // 新增代码如下<br>  width: auto;<br>  max-width: 12em;<br>}</pre><br>效果如下图</p>
<pre><code>![](https://webapp.didistatic.com/static/webapp/shield/img02.png)

&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;可以看到，最终实现效果在第 9 个字的时候便折行了。&lt;/span&gt;&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;这是为什么呢？我们把&lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">transform: translate(-50%, -50%)<br></pre><br><span style="color:#333333;font-family:-apple-system, &quot;font-size:medium;background-color:#FFFFFF;">去掉看一下</span></p>
<pre><code>![](https://webapp.didistatic.com/static/webapp/shield/img03.png)
</code></pre><p><span style="color:#333333;font-family:-apple-system, &quot;font-size:medium;background-color:#FFFFFF;">可以看到容器宽度在到达屏幕边界的时候就被截断折行了。</span><span style="color:#333333;font-family:-apple-system, &quot;font-size:medium;background-color:#FFFFFF;">现在我们设定&nbsp;</span>left: 90%<span style="color:#333333;font-family:-apple-system, &quot;font-size:medium;background-color:#FFFFFF;">&nbsp;看一下</span></p>
<pre><code>&lt;span&gt;{% image https://webapp.didistatic.com/static/webapp/shield/img04.png '' '' %}
</code></pre><p></p>
<pre><code>&lt;span&gt;&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;可以明显的看到容器被截断的更加严重。&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;span style=&quot;font-weight:700;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;至此我们分析得知，设置为&amp;nbsp;position: fixed的元素不仅位置是相对于屏幕边界定位，如果不指定元素宽高的话，宽高同样也会相对于屏幕边界被截断。&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;那么如何解决这个问题呢 ~&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:medium;background-color:#FFFFFF;&quot;&gt;代码如下 ~&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;HTML：&lt;/span&gt;

&lt;span&gt; &lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">&lt;div class=”toast-container”&gt;<br>  &lt;div class=”toast”&gt;测试十二个字提交成功状态&lt;/div&gt;<br>&lt;/div&gt;<br></pre><br>CSS</p>
<pre><code>&lt;span&gt; &lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">.toast-container {<br>  position: fixed;<br>  width: 100%;<br>  height: 100%;<br>  left: 100%;<br>  top: 100%;<br>}<br>.toast {<br>  position: absolute;<br>  top: -50%;<br>  left: -50%;<br>  transform: translate(-50%, -50%);<br>  width: auto;<br>  max-width: 12em;<br>  padding: 13px 16px;<br>  font-size: 14px;<br>  color: #ccc;<br>  background-color: rgba(37, 38, 45, 0.9);<br>  border-radius: 2px;<br>}</pre><br><span style="color:#333333;font-family:-apple-system, &quot;font-size:medium;background-color:#FFFFFF;">在 .toast 外加一个和屏幕宽高相同 .container 容器，将 .container 容器 fixed 定位到窗口外层，再将 .toast 通过 absolute 定位翻转过来即可。</span></p>
<pre><code>&lt;span&gt;效果如下：&lt;/span&gt;

&lt;span&gt;{% image https://webapp.didistatic.com/static/webapp/shield/img05.png '' '' %}
</code></pre><p></p>
<pre><code>（2）用&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:15px;background-color:#FFFFFF;&quot;&gt;white-space:nowrap&lt;/span&gt;

&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:15px;background-color:#FFFFFF;&quot;&gt;代码：&lt;/span&gt;

&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:15px;background-color:#FFFFFF;&quot;&gt;HTML&lt;/span&gt;

&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:15px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">&lt;div class=”toast”&gt;提交成功提交成功提交成功&lt;/div&gt;</pre><br>CSS</p>
<pre><code>&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:15px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">.toast {<br>  position: fixed;<br>  top: 50%;<br>  left: 50%;<br>  transform: translate(-50%,-50%);<br>  padding: 13px 16px;<br>  font-size: 14px;<br>  color: #ccc;<br>  background-color: rgba(37, 38, 45, 0.9);<br>  border-radius: 2px;<br>  width: auto;<br>  max-width: 12em;<br>  white-space:nowrap ;<br>}</pre><br>效果</p>
<pre><code>&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:15px;background-color:#FFFFFF;&quot;&gt;{% image https://webapp.didistatic.com/static/webapp/shield/img05.png '' '' %}
</code></pre><p></p>
<pre><code>&lt;span style=&quot;color:#333333;font-family:-apple-system, &amp;quot;font-size:15px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既然写到flex布局了，那就总结一下垂直水平居中遇到的问题吧&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一、&amp;lt;span style=&amp;quot;color:#333333;font-family:-apple-system, &amp;amp;quot;font-size:medium;
    
    </summary>
    
      <category term="垂直水平居中" scheme="http://www.chenqiangyi.cn/categories/%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    
    
      <category term="css" scheme="http://www.chenqiangyi.cn/tags/css/"/>
    
      <category term="垂直水平居中" scheme="http://www.chenqiangyi.cn/tags/%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
    
      <category term="flex" scheme="http://www.chenqiangyi.cn/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://www.chenqiangyi.cn/2017/01/08/e5-9e-82-e7-9b-b4-e6-b0-b4-e5-b9-b3-e5-b1-85-e4-b8-ad/"/>
    <id>http://www.chenqiangyi.cn/2017/01/08/e5-9e-82-e7-9b-b4-e6-b0-b4-e5-b9-b3-e5-b1-85-e4-b8-ad/</id>
    <published>2017-01-08T08:09:18.000Z</published>
    <updated>2017-06-08T09:41:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写东西了，既然定了每周一篇文章的计划，就要确保认真完成，这就当做是新年的第一篇文章吧！</p>
<pre><code>最近在做微信小程序，微信小程序中的wxss中的布局用的flex布局，今天来总结一下flex布局。
</code></pre><p>##<br>    <span class="md-expand">一、Flex布局是什么？</span></p>
<pre><code>&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;Flex是Flexible Box的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span&gt;任何一个容器都可以指定为Flex布局。&lt;/span&gt;&lt;/span&gt;
</code></pre><pre class="prettyprint lang-css">.box{
  display: flex;
}</pre>
<span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">行内元素也可以使用Flex布局。</span>

<pre class="prettyprint lang-css">.box{
  display: inline-flex;
}</pre>
<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">Webkit内核的浏览器，必须加上</span><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">-webkit</span><span class="" style="color:#333333;font-family:&quot;font-size:16px;">前缀。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"> </span>

<pre class="prettyprint lang-js">.box{
  display: -webkit-flex; /* Safari */
  display: flex;
}</pre>
<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">注意，设为Flex布局以后，子元素的</span><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">float</span><span style="color:#333333;font-family:&quot;font-size:16px;">、</span><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">clear</span><span style="color:#333333;font-family:&quot;font-size:16px;">和</span><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">vertical-align</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性将失效。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"> </span>

##
    <span class="md-expand">二、基本概念</span>

<span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">采用Flex布局的元素，称为Flex容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称"项目"。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做</span><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">main start</span><span style="color:#333333;font-family:&quot;font-size:16px;">，结束位置叫做</span><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">main end</span><span style="color:#333333;font-family:&quot;font-size:16px;">；交叉轴的开始位置叫做</span><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">cross start</span><span style="color:#333333;font-family:&quot;font-size:16px;">，结束位置叫做</span><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">cross end</span><span style="color:#333333;font-family:&quot;font-size:16px;">。</span>

</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">项目默认沿主轴排列。单个项目占据的主轴空间叫做</span><span style="color:#333333;font-family:&quot;font-size:16px;">main size</span><span style="color:#333333;font-family:&quot;font-size:16px;">，占据的交叉轴空间叫做</span><span style="color:#333333;font-family:&quot;font-size:16px;">cross size</span><span style="color:#333333;font-family:&quot;font-size:16px;">。</span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"> </span>

##
    <span class="md-expand">三、容器的属性</span>

<span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">以下6个属性设置在容器上。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

*   flex-direction
*   flex-wrap
*   flex-flow
*   justify-content
*   align-items
*   align-content

###
    <span class="md-expand">3.1 flex-direction属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;background-color:#60D978;">flex-direction</span><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">属性决定主轴的方向（即项目的排列方向）。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.box {
  flex-direction: row | row-reverse | column | column-reverse;
}</pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">它可能有4个值。</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span></span>

*   row（默认值）：主轴为水平方向，起点在左端。
*   row-reverse：主轴为水平方向，起点在右端。
*   column：主轴为垂直方向，起点在上沿。
*   column-reverse：主轴为垂直方向，起点在下沿。

###
    <span class="md-expand">3.2 flex-wrap属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">默认情况下，项目都排在一条线（又称"轴线"）上。</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-wrap</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性定义，如果一条轴线排不下，如何换行。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.box{
  flex-wrap: nowrap | wrap | wrap-reverse;
}</pre>
<span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">它可能取三个值。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">（1）</span><span style="color:#333333;font-family:&quot;font-size:16px;">nowrap</span><span style="color:#333333;font-family:&quot;font-size:16px;">（默认）：不换行。</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="color:#333333;font-family:&quot;font-size:16px;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">（2）</span><span class="" style="color:#333333;font-family:&quot;font-size:16px;">wrap</span><span class="" style="color:#333333;font-family:&quot;font-size:16px;">：换行，第一行在上方。</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

</span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">（3）</span><span class="" style="color:#333333;font-family:&quot;font-size:16px;">wrap-reverse</span><span style="color:#333333;font-family:&quot;font-size:16px;">：换行，第一行在下方。</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

</span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

###
    <span class="md-expand">3.3 flex-flow</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">flex-flow</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性是</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-direction</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性和</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-wrap</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性的简写形式，默认值为</span><span style="color:#333333;font-family:&quot;font-size:16px;">row nowrap</span><span style="color:#333333;font-family:&quot;font-size:16px;">。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.box {
  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;
}</pre>

<p>###<br>    <span class="md-expand">3.4 justify-content属性</span></p>
<p><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">justify-content</span><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">属性定义了项目在主轴上的对齐方式。</span></p>
<pre><code>&lt;span class=&quot;&quot; style=&quot;color:#333333;font-family:&amp;quot;font-size:16px;&quot;&gt;&lt;span style=&quot;color:#333333;font-family:&amp;quot;font-size:16px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">.box {
  justify-content: flex-start | flex-end | center | space-between | space-around;
}</pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

*   flex-start（默认值）：左对齐
*   flex-end：右对齐
*   center： 居中
*   space-between：两端对齐，项目之间的间隔都相等。
*   space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。

###
    <span class="md-expand">
    <h3 class="md-end-block md-heading md-focus" style="font-size:1.5em;color:#333333;font-family:&quot;background-color:#FFFFFF;">
        <span class="md-expand">3.5 align-items属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">align-items</span><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">属性定义项目在交叉轴上如何对齐。</span></h3></span>


###
    <span class="md-expand">
<pre class="prettyprint lang-js">.box {
  align-items: flex-start | flex-end | center | baseline | stretch;
}</pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

</span>

    <span class="md-expand"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</span></span>

    <span class="md-expand"> </span>

*   flex-start：交叉轴的起点对齐。
*   flex-end：交叉轴的终点对齐。
*   center：交叉轴的中点对齐。
*   baseline: 项目的第一行文字的基线对齐。
*   stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。

###
    <span class="md-expand">3.6 align-content属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">align-content</span><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.box {
  align-content: flex-start | flex-end | center | space-between | space-around | stretch;
}</pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">该属性可能取6个值。</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span></span>

*   flex-start：与交叉轴的起点对齐。
*   flex-end：与交叉轴的终点对齐。
*   center：与交叉轴的中点对齐。
*   space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。
*   space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。
*   stretch（默认值）：轴线占满整个交叉轴。

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

###
    <span class="md-expand">四、项目的属性</span>

<span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">以下6个属性设置在项目上。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

*   order
*   flex-grow
*   flex-shrink
*   flex-basis
*   flex
*   align-self

###
    <span class="md-expand">4.1 order属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">order</span><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.item {
  order: &lt;integer&gt;;
}</pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

###
    <span class="md-expand">4.2 flex-grow属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">flex-grow</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性定义项目的放大比例，默认为</span><span style="color:#333333;font-family:&quot;font-size:16px;">0</span><span style="color:#333333;font-family:&quot;font-size:16px;">，即如果存在剩余空间，也不放大。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.item {
  flex-grow: &lt;number&gt;; /* default 0 */
}</pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">如果所有项目的</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-grow</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-grow</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

###
    <span class="md-expand">4.3 flex-shrink属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">flex-shrink</span><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.item {
  flex-shrink: &lt;number&gt;; /* default 1 */
}</pre>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">如果所有项目的</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-shrink</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性都为1，当空间不足时，都将等比例缩小。如果一个项目的</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-shrink</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性为0，其他项目都为1，则空间不足时，前者不缩小。</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">负值对该属性无效。</span></span></span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

###
    <span class="md-expand">4.4 flex-basis属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">flex-basis</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为</span><span style="color:#333333;font-family:&quot;font-size:16px;">auto</span><span style="color:#333333;font-family:&quot;font-size:16px;">，即项目的本来大小。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.item {
  flex-basis: &lt;length&gt; | auto; /* default auto */
}</pre>
<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">它可以设为跟</span><span style="color:#333333;font-family:&quot;font-size:16px;">width</span><span style="color:#333333;font-family:&quot;font-size:16px;">或</span><span style="color:#333333;font-family:&quot;font-size:16px;">height</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性一样的值（比如350px），则项目将占据固定空间。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

###
    <span class="md-expand">4.5 flex属性</span>

<span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">flex</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性是</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-grow</span><span style="color:#333333;font-family:&quot;font-size:16px;">,&nbsp;</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-shrink</span><span style="color:#333333;font-family:&quot;font-size:16px;">&nbsp;和&nbsp;</span><span style="color:#333333;font-family:&quot;font-size:16px;">flex-basis</span><span style="color:#333333;font-family:&quot;font-size:16px;">的简写，默认值为</span><span style="color:#333333;font-family:&quot;font-size:16px;">0 1 auto</span><span style="color:#333333;font-family:&quot;font-size:16px;">。后两个属性可选。</span>

    <span class="" style="color:#333333;font-family:&quot;font-size:16px;"><span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;"> </span></span>

<pre class="prettyprint lang-js">.item {
  flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]
}</pre>

<pre><code>&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span class=&quot;md-expand&quot;&gt;该属性有两个快捷值：&lt;/span&gt;&lt;span&gt;auto&lt;/span&gt;&lt;span&gt;&amp;nbsp;(&lt;/span&gt;&lt;span&gt;1 1 auto&lt;/span&gt;&lt;span&gt;) 和 none (&lt;/span&gt;&lt;span&gt;0 0 auto&lt;/span&gt;&lt;span&gt;)。&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;md-line md-end-block md-focus&quot;&gt;&lt;span&gt;建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。&lt;/span&gt;&lt;/span&gt;
</code></pre><p>###<br>    <span class="md-expand">4.6 align-self属性</span></p>
<p><span class="md-expand" style="color:#333333;font-family:&quot;font-size:16px;">align-self</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性允许单个项目有与其他项目不一样的对齐方式，可覆盖</span><span style="color:#333333;font-family:&quot;font-size:16px;">align-items</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性。默认值为</span><span style="color:#333333;font-family:&quot;font-size:16px;">auto</span><span style="color:#333333;font-family:&quot;font-size:16px;">，表示继承父元素的</span><span style="color:#333333;font-family:&quot;font-size:16px;">align-items</span><span style="color:#333333;font-family:&quot;font-size:16px;">属性，如果没有父元素，则等同于</span><span style="color:#333333;font-family:&quot;font-size:16px;">stretch</span><span style="color:#333333;font-family:&quot;font-size:16px;">。</span></p>
<pre><code>&lt;span class=&quot;&quot; style=&quot;color:#333333;font-family:&amp;quot;font-size:16px;&quot;&gt;&lt;span style=&quot;color:#333333;font-family:&amp;quot;font-size:16px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#333333;font-family:&amp;quot;font-size:16px;&quot;&gt;{% image http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png '' '' %}
</code></pre><p> <span style="color:#333333;font-family:&quot;font-size:16px;background-color:#FFFFFF;">该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</span></p>
<p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没写东西了，既然定了每周一篇文章的计划，就要确保认真完成，这就当做是新年的第一篇文章吧！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;最近在做微信小程序，微信小程序中的wxss中的布局用的flex布局，今天来总结一下flex布局。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##&lt;br&gt;    
    
    </summary>
    
      <category term="css" scheme="http://www.chenqiangyi.cn/categories/css/"/>
    
    
      <category term="css" scheme="http://www.chenqiangyi.cn/tags/css/"/>
    
      <category term="flex" scheme="http://www.chenqiangyi.cn/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>回首2016，展望2017</title>
    <link href="http://www.chenqiangyi.cn/2017/01/01/e5-9b-9e-e9-a6-962016-ef-bc-8c-e5-b1-95-e6-9c-9b2017/"/>
    <id>http://www.chenqiangyi.cn/2017/01/01/e5-9b-9e-e9-a6-962016-ef-bc-8c-e5-b1-95-e6-9c-9b2017/</id>
    <published>2016-12-31T17:58:18.000Z</published>
    <updated>2017-06-08T09:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本来是打算在年末写年度总结，结果就一直拖，一下拖到现在。一直说没时间，其实就是懒。在去年年末的时候在知乎上看到好多人写的年度总结以及新的一年的展望，自己当时没有写，现在2016年结束了，总感觉少了点什么，大概就是当时年初没有定目标造成的空落感，所以今年加班也一定要把年度总结写完。本文分两部分，一部分回首2016年的种种，另一部分展望2017年，并制定年度计划。</p>
<p>####<br>    <strong><span style="color:#009900;">一、回首过去</span></strong></p>
<pre><code>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 2016年初来的上海，在这里实习，学习，以及毕业找工作，期间结束了大学生活，走上了社会。在6月份的时候加入到了现在的公司，来到公司后先是熟悉公司所用的框架以及工作流程，后期慢慢开始进行对官网的升级以及修改。再往后就做了一个礼物直播的管理系统，再后来就是完成了支付宝表情搜搜的小程序，以及现在表情搜搜官网的设计与修改，还有未完成的表情搜搜微信小程序。在工作中学到了一些新技术，然而在做支付宝小程序的时候由于自己技术的不足造成了项目的进展缓慢，在这期间也学到了许多。后期就是微信小程序，现在还没开始动手，在最近几天将着手微信小程序。对于工作，由于官网框架的缘故，使得一些新的技术无法使用。在今后的新项目中要多使用新技术，使得学以致用。

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在这一年中学到了不少新的技术，同时也有好多新技术只是初步了解，并没有彻底的过一遍并用在工作中。在这一年中新技术不断，不管是框架还是打包工具还是新的语法功能，都有了翻天覆地的变化。新出现的Vue2，angular2只是简单的敲了一下demo，&lt;span style=&quot;color:#E53333;&quot;&gt;&lt;/span&gt;体会到它语法的简洁以及功能的强大。对于热的一塌糊涂的react还没有来的及看，技术债来年一定会慢慢补上的。还有比较强大的node.js，现在是无处不在，所有的工程项目都要依赖node来搭建，还有webpack用以构建完整的工程项目，这一些都是自己的弱项，当时只是不求甚解的看了一下，到真正使用的时候发现还是不会用。还有一个新的变化就是es6，以及es7的到来，现在还并没有使用新的语法，所以下个阶段还要完成新语法的平稳过度。还有就是新的微信小程序，是一个新的机会，现在只是大概的了解其中的原理，真正项目还没有开始。过几天就着手微信小程序的开发。

&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 对于过去一年技术的总结刚开始还能每周一篇技术文章，到了后面就没有怎么写了，写博客当初的初衷是记录成长的点滴，所以初心不能忘，新的一年每一周或者每月四篇技术文章的总结，也算是对自己技术提升的一个总结。2016年自己在github工作了122天，相对于那些大神，差的太远了，即便是不能天天工作，也要多完成一些项目，争取多写代码，多提交代码。在知乎，掘金和segmentfault上面的技术回答也寥寥无几，所以在新的一年要突破自己，多回答问题，多逛技术论坛。
</code></pre><p>####<br>    <span style="color:#009900;">二、展望未来</span></p>
<pre><code>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span&gt;1.完成webpack构建工具的使用以及微信小程序的开发&lt;/span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/span&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 2.完成对Vue2框架的整体学习，从打包构建工具到模块化以及到模板整体尝试，必须要完成一整个Vue2项目

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 3.完成react项目的实施以及react native移动端的项目尝试，并包含react全家桶的学习

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 4.学习typescript以及angular2的学习

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 5.完成node.js的学习，从桌面端到服务端，再到数据库的尝试 &amp;nbsp; &amp;nbsp;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 6.完成es6或es7的学习

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 7.每周一篇技术性博客的书写或者每个月四篇技术性文章的总结。

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 8.就是不断逛技术博客，以及研究发现别人的优秀项目&amp;nbsp;，多提交项目记录，多敲代码，希望能在年末的时候github有半年的工作记录&amp;nbsp;
</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 9.年龄也不小啦，该找个女朋友了</p>
<p>####<br>    <span style="color:#009900;">三、总结</span></p>
<pre><code>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; 对于前端来说2016年变化太多了，每一天都有新技术的更新，在前端从业人数的日益增多，前端的就业压力会越来越大，所以要不断提高自己的技术，才能使自己立于不败之地。对于新技术的各种撕逼自己要稳住自己，不能人云亦云，要加强自身基础知识的提高，不能眼高手低。2017年的年度计划挑战很大，不过把整年的年度计划划分为每一个季度、每一个月、每一周、每一天的计划，只要完成每天的小计划，大计划就会完成。相信自己，要改掉拖延症的毛病，每天努力一点点，就会有新的突破，不忘初心，方得始终。

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp; ----致2017年年末总结，到时候看看完成了什么还有什么没完成。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本来是打算在年末写年度总结，结果就一直拖，一下拖到现在。一直说没时间，其实就是懒。在去年年末的时候在知乎上看到好多人写的年度总结以及新的一年的展望，自己当时没有写，现在2016年
    
    </summary>
    
      <category term="生活感悟" scheme="http://www.chenqiangyi.cn/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="生活感悟" scheme="http://www.chenqiangyi.cn/tags/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
      <category term="新年总结" scheme="http://www.chenqiangyi.cn/tags/%E6%96%B0%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>mac 命令行 安装 需要管理员 权限“Please try running this command again as root/Administrator”的解决办法</title>
    <link href="http://www.chenqiangyi.cn/2016/12/19/mac-e5-91-bd-e4-bb-a4-e8-a1-8c-e5-ae-89-e8-a3-85-e9-9c-80-e8-a6-81-e7-ae-a1-e7-90-86-e5-91-98-e6-9d-83-e9-99-90please-try-running-this-command-again-as-rootadministrator/"/>
    <id>http://www.chenqiangyi.cn/2016/12/19/mac-e5-91-bd-e4-bb-a4-e8-a1-8c-e5-ae-89-e8-a3-85-e9-9c-80-e8-a6-81-e7-ae-a1-e7-90-86-e5-91-98-e6-9d-83-e9-99-90please-try-running-this-command-again-as-rootadministrator/</id>
    <published>2016-12-19T02:47:17.000Z</published>
    <updated>2017-06-08T09:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;"><span style="line-height:19.5px;"><span style="font-size:14px;">我们在进行mac 命令行安装软件的时候，有的时候会遇见这样的问题：</span></span></span><span style="font-size:14px;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;line-height:19.5px;">Please try running this command again as root/Administrator.</span></p>
<pre><code>&lt;span style=&quot;font-size:14px;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;line-height:19.5px;&quot;&gt;如图：&lt;/span&gt;

![1](http://www.chenqiangyi.com/wp-content/uploads/2016/12/1-300x48.png)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;

&lt;span style=&quot;color:#555555;font-size:15px;background-color:#FFFFFF;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;&quot;&gt;&lt;span style=&quot;line-height:19.5px;&quot;&gt;&lt;span style=&quot;font-size:14px;&quot;&gt;解决办法是&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color:#555555;background-color:#FFFFFF;line-height:19.5px;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:14px;&quot;&gt;在终端输入：&lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">sudo chown -R $USER /usr/local</pre><br><span style="color:#555555;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FFFFFF;">然后输入安装的密码，在执行相关安装命令就行了</span></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-family:Verdana, Geneva, Arial, Helvetica, sans-serif;&quot;&gt;&lt;span style=&quot;line-height:19.5px;&quot;&gt;&lt;span style=&quot;font-size:14px;&quot;&gt;
    
    </summary>
    
      <category term="mac命令" scheme="http://www.chenqiangyi.cn/categories/mac%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="mac命令" scheme="http://www.chenqiangyi.cn/tags/mac%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>ES6新特性(2)——深刻而易懂的ES6解构教程</title>
    <link href="http://www.chenqiangyi.cn/2016/08/09/es6-e6-96-b0-e7-89-b9-e6-80-a72-e6-b7-b1-e5-88-bb-e8-80-8c-e6-98-93-e6-87-82-e7-9a-84es6-e8-a7-a3-e6-9e-84-e6-95-99-e7-a8-8b/"/>
    <id>http://www.chenqiangyi.cn/2016/08/09/es6-e6-96-b0-e7-89-b9-e6-80-a72-e6-b7-b1-e5-88-bb-e8-80-8c-e6-98-93-e6-87-82-e7-9a-84es6-e8-a7-a3-e6-9e-84-e6-95-99-e7-a8-8b/</id>
    <published>2016-08-09T10:49:50.000Z</published>
    <updated>2017-06-08T08:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">解构是ES6的新特性，用于从JavaScript对象和数组中提取数据，语法上比ES5所提供的更加简洁、紧凑、清晰。它不仅能减少你的代码量，还能从根本上改变你的编码方式。用的越多，你就会发现越多塑造数据和函数的方式，这些实现方式在过去几乎是不可能的。本文将深入探讨解构赋值，为你介绍该新特性中你所需要知悉的一切。</span> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;什么是解构？&lt;/span&gt;**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;/span&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;解构与构造数据截然相反。 例如，它不是构造一个新的对象或数组，而是逐个拆分现有的对象或数组，来提取你所需要的数据&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;font-size:16px;&quot;&gt;ES6使用了一种新模式来匹配你想要提取的数值, 解构赋值就是采用了这种模式。 该模式会映射出你正在解构的数据结构，只有那些与该模式相匹配的数据，才会被提取出来。&lt;/span&gt; 
</code></pre><p><div><br>    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">被解构的数据项位于赋值运算符 = 的右侧，可以是任何数组和对象的组合，允许随意嵌套。用于给这些数据赋值的变量个数不限。</span></div></p>
<p><br><strong>数组解构</strong> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;数组解构 使用一个数组作为一个数据项，你可以根据 数组模式 （用于从数组中匹配你所需要的数值）从这个数组里面提取数值给一个或者多个变量赋值。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;数组模式 是根据数值的位置来鉴别哪些值是你想要提取的。它必须能精确地映射数组的结构，来要让数组模式中的每个变量都被赋上 被解构数组中 位置与之相对应的值。&lt;/span&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;举几个例子来帮助我们理解吧：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#3DA742;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;数组模式示例&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#007AAA;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;把数组中所有的数值赋给一个个单独的变量&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">//设置数组
const avengers = ['Tony Stark', 'Steve Rogers', 'Natasha Romanoff'];
//b把数组结构赋值给变量。数组模式位于赋值运算符'=' 的左侧，被解构的数组在其右侧。
const [ironMan, cap, blackWidow] = avengers;
// ironMan = 'Tony Stark'
// cap = 'Steve Rogers'
//blackWidow = 'Natasha Romanoff'
//输出 ironMan:
ironMan;
"Tony Stark"</pre>

<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;提取除第一个外的所有数值&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">const avengers = ['Tony Stark', 'Steve rogers', 'Natasha Romanoff'];
const [, cap, blackWidow] = avengers;
  //  ironMan = Error: undefined
  //  cap = 'Steve Rogers'
  //  blackWidow = 'Natasha Romanoff
  //  输出 cap: <span style="font-size:13.2px;line-height:1.5;">cap;</span></pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">提取除第二个外的所有数值</span>

<pre class="prettyprint lang-js">const avengers = ['Tony Stark', 'Steve rogers', 'Natasha Romanoff'];
const [ironMan, , blackWidow] = avengers;
  //  ironMan = 'Tony Stark'
  //  cap = Error: undefined
  //  blackWidow = 'Natasha Romanoff
  //  输出 blackWidow:
   blackWidow;</pre>

<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;提取除最后一个外的所有数值&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">const avengers = ['Tony Stark', 'Steve rogers', 'Natasha Romanoff'];
//  ironMan vs cap
const [ironMan, cap] = avengers;
  //  ironMan = 'Tony Stark'
  //  cap = 'Steve Rogers'
  //  blackWidow = Error: undefined
  //  输出 blackWidow:
   ironMan</pre>
<span style="color:#3DA742;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">嵌套数组</span><span style="font-size:14px;"></span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">这种匹配模式也支持嵌套数组，只要保证赋值运算符 = 左侧的数组模式与右侧的数组结构相匹配即可。再次说明一下，= 左边的变量都会被赋上 = 右侧数组中位置与之相对应的值。 无论你怎么深层次地嵌套，仍可以对它们进行解构。</span>

    <span style="font-size:14px;"></span><span style="color:#3DA742;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">解构嵌套的数组</span><span style="font-size:14px;"></span>

<pre class="prettyprint lang-js">const avengers = [
                   'Natasha Romanoff',
                   ['Tony Stark', 'James Rhodes'],
                   ['Steve Rogers', 'Sam Wilson'] 
                 ];
const [blackWidow, [ironMan, warMachine], [cap, falcon]] = avengers;
//  blackWidow = 'Natasha Romanoff'
//  ironMan = 'Tony Stark'
//  varMachine = 'James Rhodes'
// cap = 'Steve Rogers'
//  falcon = 'sam Wilson'
//  Out warMachine:
warMachine;</pre>
<span style="color:#3DA742;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">从深层嵌套的数组中提取一个值</span><span style="font-size:14px;"></span>

<pre class="prettyprint lang-js">const avengers = [
                   'Natasha Romanoff',
                   ['Tony Stark', 'James Rhodes'],
                   ['Steve Rogers', 'Sam Wilson'] 
                 ];
const [ , //跳过 'Natasha Romanoff' [ironMan, warMachine], [cap, falcon]] = avengers;
//  blackWidow = 'Natasha Romanoff'
//  ironMan = 'Tony Stark'
//  varMachine = 'James Rhodes'
// cap = 'Steve Rogers'
//  falcon = 'sam Wilson'
//  Out warMachine:
warMachine;</pre>

<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;解构是ES6的新特性，用于从JavaScript对象和数组中提
    
    </summary>
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/categories/ES6/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6——手册</title>
    <link href="http://www.chenqiangyi.cn/2016/08/04/es6-e6-89-8b-e5-86-8c/"/>
    <id>http://www.chenqiangyi.cn/2016/08/04/es6-e6-89-8b-e5-86-8c/</id>
    <published>2016-08-04T01:05:52.000Z</published>
    <updated>2017-06-08T08:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">这篇手册包含了 ES2015(ES6) 的使用小技巧、最佳实践以及可以给你每天的工作参考的代码片段。</span> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;color:#009900;&quot;&gt;&lt;/span&gt;**&lt;span style=&quot;color:#009900;&quot;&gt;var 和 let/const 的比较&lt;/span&gt;**&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#888888;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;除了 var ，我们现在还可以使用两个新的标示符来定义一个变量 —— let 和 const。和 var 不一样的是，let 和 const 不存在变量提升。&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;使用 var 的栗子：&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">var snack = 'Meow Mix';
function getFood(food) {
  if(food) {
    var snack = 'Friskies';
    return snack;
  }
  return snack;
}
getFood(false);    //  undefined</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">当我们用 let 代替 var 的时候，观察会发生什么：</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"> </span> 

<pre class="prettyprint lang-js">let snack = 'Meow Mix' ;
function getFood(food) {
  if(food) {
    let snack = 'Friskies';
    return snack;
  }
  return snack;
} 
getFood(false);     //  'Meow Mix'</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">当我们重构使用 var 的老代码的时候应该注意上面的变化。盲目地使用 let 替换 var 可能会出现出乎意料的情况。</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="color:#888888;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">注意： let 和 const 是块级作用域，因此在变量未被定义之前使用它会产生一个 ReferenceError。</span></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"> </span> 

<pre class="prettyprint lang-js">console.log(x);       //    Uncaught ReferenceError: x is not defined
let x = 'hi';</pre>

<pre><code>&lt;span style=&quot;color:#888888;&quot;&gt;最佳实践： 在遗留代码中放弃使用 var 声明意味着需要很小心地重构；在新的项目代码中，使用 let 声明一个可以改变的变量，用 const 声明一个不能被重新赋值的变量。&lt;/span&gt; 

**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;用块级作用域代替 IIFES&lt;/span&gt;**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;函数立即执行表达式 的通常用途是创造一个内部的作用域，在 ES6 中，我们能够创造一个块级作用域而不仅限于函数作用域：&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;IIFES：&lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">(function(){
  var food = 'Meow Mix';
})();
console.log(food);      //ReferenceError: food is not defined</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">使用 ES6 的块级作用域：</span> 

<pre class="prettyprint lang-js">{
  let food = 'Meow Mix';
}
console.log(food);     // ReferenceError: food is not defined</pre>
<span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">箭头函数</span>**<span style="font-size:16px;color:#009900;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们经常需要给回调函数维护一个词法作用域的上下文 this。</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">看看这个栗子：</span> 

<pre class="prettyprint lang-js">function Person(name) {
  this.name = name;
}
Person.prototype.prefixName = function (arr) {
  return arr.map(function (character) {
    return this.name + character;
});
};

//    Cannot read property 'name' of undefined</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">一个常用的解决办法是把 this 存在一个变量中：</span> 

<pre class="prettyprint lang-js">function Person(name) {
  this.name = name;
}
Person.prototype.prefixName = function (arr) {
  var that = this;      // Store the context of this
  return arr.map(function (character) {
    return this.name + character;
});
};</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们也可以传递一个合适的 this 上下文：</span> 

<pre class="prettyprint lang-js">function Person(name) {
  this.name = name;
}
Person.prototype.prefixName = function (arr) {
  return arr.map(function (character) {
    return this.name + character;
},this);
};
(arr) {
  return arr.map(function (character) {
    return this.name + character;
},this);
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们还可以绑定上下文：</span> 

<pre class="prettyprint lang-js">function Person(name) {
  this.name = name;
}
Person.prototype.prefixName = function (arr) {
  return arr.map(function (character) {
    return this.name + character;
}.bind(this));
};</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">使用 箭头函数，this 将不会受到影响，并且我们可以重写上面的函数：</span> 

<pre class="prettyprint lang-js">function Person(name) {
  this.name = name;
}
Person.prototype.prefixName = funciton (arr) {
  return arr.map(character =&gt; this.name + character)
};</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">最佳实践：当你需要维护一个 this 上下文的时候使用 箭头函数。</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在我们写一个函数的时候，箭头函数更加简洁并且可以很简单地返回一个值：</span> 

<pre class="prettyprint lang-js">var Squares = arr.map(function (x) { return x * X});  //ReferenceError: arr is not defined</pre>
<pre class="prettyprint lang-js">onst arr = [1, 2, 3, 4, 5];
const squares = arr.map(x =&gt; x * x);
//Arrow Function for terser implementation</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">最佳实践：尽可能使用箭头函数代替原来的写法。</span> 

    <span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">字符串</span>**<span style="font-size:16px;color:#009900;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 中，标准库升级了很多，在这些变化中有许多新的对于字符串的函数，比如 .includes() 和 .repeat()。</span> 

    <span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">.includes( )</span><span style="font-size:14px;"></span> 

<pre class="prettyprint lang-js">var string = 'food';
var substring = 'foo';
console.log(string.indexOf(substring) &gt; -1);     //true</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">之前我们使用 indexOf() 函数的返回值是否 &gt;-1 来判断字符串是否包含某些字符串，现在我们更简单地使用 .includes() 来返回一个布尔值来判断：</span> 

<pre class="prettyprint lang-js">var string = 'food';
var substring = 'foo';
console.log(string.includes(substring));     // true</pre>
<span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">.repeat( )</span><span style="font-size:14px;"></span> 

<pre class="prettyprint lang-js">function repeat(string, count) {
  var strings = [];
  while(strings.length &lt; count) {
    strings.push(string);
  }
  return strings.join('');
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 中，可以更简便地实现：</span> 

<pre class="prettyprint lang-js">// String.repeat(numberOfRepetitions)
'meow'.repeat(3)      //"meowmeowmeow"</pre>
<span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">模版字符串</span>**<span style="font-size:16px;color:#009900;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">使用 模版字符串 我们就可以不用对某些特殊自符进行转义处理了：</span> 

<pre class="prettyprint lang-js">var text = "This string contains \"double quotes\"  which are escaped."
alert(text);
//This string contains "double quotes" which are escaped.</pre>
<pre class="prettyprint lang-js">let text = `This string contains "double quotes"  which are escaped.`;</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">模版字符串 还支持插入，可以把变量值和字符串连接起来.</span> 

<pre class="prettyprint lang-js">var name = 'Tiger';
var age = 13;
console.log('My cat is named' + name + 'and is' +age + 'years old.');
//My cat is namedTigerand is13years old.</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">更简单：</span> 

<pre class="prettyprint lang-js">const name = 'Tiger';
const age = 13;
console.log(`My cat is named ${name} and is ${age} years old.`);</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES5 中，需要换行时，需要这样：</span> 

<pre class="prettyprint lang-js">var text = (
  'cat\n' +
  'dog\n' +
  'nickelodeon'
);
console.log(text);

//
cat
dog
nickelodeon</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">或者这样：</span> 

<pre class="prettyprint lang-js">var text = [
  'cat'
  'dog'
  'nickelodeon'
].join('\n');</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">模版字符串 可以支持换行并且不需要额外的处理：</span> 

<pre class="prettyprint lang-js">let text = ( `cat
dog
nicklodeon`</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">模版字符串 还支持表达式：</span> 

<pre class="prettyprint lang-js">let today = new Date();
let text = `The time and date is
${today.toLocaleString()}`;</pre>
<span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">解构</span>**<span style="font-size:16px;color:#009900;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">结构可以让我们用一个更简便的语法从一个数组或者对象（即使是深层的）中分离出来值，并存储他们。</span> 

    <span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">结构数组</span><span style="font-size:14px;"></span> 

<pre class="prettyprint lang-js">var arr = [1, 2, 3, 4];
var a = arr[0];
var b = arr[1];
var c = arr[2];
var d = arr[3];</pre>
<pre class="prettyprint lang-js">let [a, b, c, d] = [1, 2, 3, 4];
console.log(a);    // 1
console.log(b);    //  2</pre>
<span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">结构对象</span><span style="font-size:14px;"></span> 

<pre class="prettyprint lang-js">var luke = { occupation: 'jedi', father: 'anakin' };
var occupation = luke.occupation;    //  'jedi'
var father = luke.father;    //  'anakin'</pre>
<pre class="prettyprint lang-js">let luke = { occupation: 'jedi', father: 'anakin' };
let {occupation, father} = luke;
console.log(occupation);    //  'jedu'
console.log(father);    //  'anakin'</pre>
**<span style="font-size:16px;color:#009900;">模块</span>**<span style="font-size:16px;color:#009900;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 之前，我们使用 Browserify 这样的库来创建客户端的模块化，在 node.js 中使用 require。</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 中，我们可以直接使用所有类型的模块化（AMD 和 CommonJS）。</span> 

    <span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">使用 CommonJS 的出口</span><span style="font-size:14px;"></span> 

<pre class="prettyprint lang-js">module.exports = 1;
module.exports = { foo: 'bar'};
module.export = ['foo', 'bar'];
module.exports = function bar(){};</pre>
<span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">使用 ES6 的出口</span><span style="font-size:14px;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 中我们可以暴漏多个值，使用 Exports：</span> 

<pre class="prettyprint lang-js">export let name = 'David';
export let age = 25;</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">或者暴露一个对象列表：</span> 

<pre class="prettyprint lang-js">function sumTwo(a, b) {
 return a + b;
}
function sumThree(a, b, c) {
  return a + b + c;
}
export { sumTwo, sumThree };</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们还可以暴露函数、对象和其他的值，通过简单地使用 export 这个关键字：</span> 

<pre class="prettyprint lang-js">export function sumTwo(a, b) {
  return a + b;
}
export function sumThree(a, b, c) {
  return a + b + c;
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">最后，我们还可以绑定一个默认的输出：</span> 

<pre class="prettyprint lang-js">function sumTwo(a, b) {
  return a + b;
}
function sumThree(a, b, c) {
  return a + b + c;
}
let api = {
  sumTwo,
  sumThree
};
export default api;</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">最佳实践：总是在模块的最后面使用 export default 方法，这可以让暴露的东西更加清晰并且可以节省时间去找出暴漏出来值的名字。尤其如此，在 CommonJS 中通常的实践就是暴露一个简单的值或者对象。坚持这种模式，可以让我们的代码更加可读，并且在 ES6 和 CommonJS 模块之间更好地兼容。</span> 

    <span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">ES6 中的导入</span><span style="font-size:14px;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 中同样提供了多样的导入方式，我们可以这么导入一个整个文件：</span> 

<pre class="prettyprint lang-js">import 'underscore';</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">需要着重注意的一点是简单的导入整个文件会在那个文件的顶部执行所有的代码</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">和 Python 中类似，我们可以命名导入的值：</span> 

<pre class="prettyprint lang-js">import { sumTwo, sumThree } from 'math/addition';</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们还可以重命名导入：</span> 

<pre class="prettyprint lang-js">import {
  sumTwo as addTwoNumbers,
  sumThree as sumThreeNumbers
} from 'math/addition';</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">另外，我们可以导入所有的东西（整体加载）：</span> 

<pre class="prettyprint lang-js">import * asutil from 'math/addition';</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">最后，我们可以从一个模块中导入一个值的列表：</span> 

<pre class="prettyprint lang-js">import * as additionUtil from 'math/addition';
const { sumTwo, sumThree } = additionUtil;</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">可以像这样导入默认绑定的输出：</span> 

<pre class="prettyprint lang-js">import api from 'math/addition';
//  same as :import {default as api } from 'math/addition';</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">虽然最好保持出口的简单，但如果需要的话我们有时可以混合默认的进口和混合进口。当我们这样出口的时候：</span> 

<pre class="prettyprint lang-js">// foos.js
export { foo as default, foo1, foo2 };</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们可以这样导入它们：</span> 

<pre class="prettyprint lang-js">import foo, { foo1, foo2 } from 'foos';</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">当我们用 commonjs 的语法导入一个模块的出口时（比如 React），我们可以这样做：</span> 

<pre class="prettyprint lang-js">import React from 'react';
const { Component, PropTypes } = React;</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">还有更精简的写法：</span> 

<pre class="prettyprint lang-js">import React, { Component, PropTypes } from 'react';</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">注意：导出的值是动态引用的，而不是拷贝。因此，在一个模块中改变一个变量的绑定将影响输出模块中的值。应该避免改变这些导出值的公共接口。（原文这里我觉得有误）</span> 

    **<span style="font-size:16px;color:#009900;">参数</span>**<span style="font-size:16px;color:#009900;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES5 中，在函数中我们需要各种操作去处理 默认参数、不定参数 和 重命名参数 等需求，在 ES6 中我们可以使用更简洁的语法完成这些需求：</span> 

<pre class="prettyprint lang-js">function addTwoNumbers(x, y) {
  x = x || 0;
  y = y || 0;
  return x + y;
}
addTwoNumbers(3);    // 3
addTwoNumbers(3,2);  // 5
addTwoNumbers();    //0</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">ES</span><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:1.5;background-color:#FFFFFF;">6 中，函数的参数可以支持设置默认值：</span><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"> 

<pre class="prettyprint lang-js">function addTwoNumbers( x = 0, y = 0) {
  return x + y;
}
addTwoNumbers(2, 4);    //6
addTwoNumbers(2);    //2
addTwoNumbers();    //0</pre>
</span> 

    <span style="color:#007AAA;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">rest 参数</span><span style="font-size:16px;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES5 中，我们需要这么处理不定参数：</span> 

<pre class="prettyprint lang-js">function logArguments() {
  for (var i = 0; i&lt; arguments.length; i++) {
    console.log(arguments[i]);
  }
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">使用 rest ，我们就可以处理不确定数目的参数：</span> 

<pre class="prettyprint lang-js">function logArguments(...args) {
  for (let arg of args) {
    console.log(arguments[i]);
  }
}</pre>
<span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">命名参数</span><span style="font-size:14px;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES5 中是使用配置对象的模式来处理命名参数，jQuery 中的使用：</span> 

<pre class="prettyprint lang-js">function initializeCanvas(options) {
  var height = options.height || 600;
  var width = options.width || 400;
  var lineStroke = options.lineStroke || 'black';
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们可以利用解构的一个函数的形参实现相同的功能：</span> 

<pre class="prettyprint lang-js">function initializeCanvas(
  { height = 600, width = 400, lineStroke = 'black'}) {
     // Use variables height, width, lineStroke here
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">如果我们想使整个值可选择，我们可以结构将一个空的对象：</span> 

<pre class="prettyprint lang-js">function initializeCanvas (
 { height = 600, width = 400, lineStroke = 'black' } = {}) {
    //  ...
}</pre>
<span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">展开操作</span><span style="font-size:14px;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES5 中，我们可以 apply Math.max 方法来获得一个数组中的最大值：</span> 

<pre class="prettyprint lang-js">Math.max.apply(null, [-1, 100, 9001, -32]);    //  9001</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 中，我们可以通过展开操作把一个数组的值作为参数传递给一个函数：</span> 

<pre class="prettyprint lang-js">Math.max(...[-1, 100, 9001, -32]);</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们可以更简洁地使用这个语法来合并数组：</span> 

<pre class="prettyprint lang-js">let cities = [ 'San Francisco', 'Los Angeles'];
let places = [ 'Miami', ...cities, 'Chicago'];   //['Miami', 'San Francisco', 'Los Angeles', 'Chicago' ]
</pre>
<span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">类 Classes</span>**<span style="font-size:16px;color:#009900;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 之前，我们通过构造函数来创造一个类，并且通过原型来扩展属性：</span> 

<pre class="prettyprint lang-js">function Person (name, age, gender) {
  this.name = name;
  this.age = age;
  this.gender = gender;
}
Person.prototype.incrementAge = function () {
  return this.age +=1;
};</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">然后可以这样继承类：</span> 

<pre class="prettyprint lang-js">function Personal(name, age, gender, occupation,hobby)
{
  Person.call(this, name, age, gender);
  this.occupation = occupation;
  this.hobby = hobby;
}
Personal.prototype = Object.create(Person.prototype);
Person.prototype.constructor = Personal;
Personal.prototype.incrementAge = function () {
  Person.prototype.incrementAge.call(this);
  this.age += 20;
  console.log(this.age);
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 中，提供了更多的语法糖，可以直接创造一个类：</span> 

<pre class="prettyprint lang-js">class Person {
  constructor(name, age, gender) {
    this.name = name;
    this.age = age;
    this.gender = gender;
  }
  incrementAge() {
    this.age += 1;
  }
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">使用 extends 关键字来继承一个类：</span> 

<pre class="prettyprint lang-js">class Personal extends Person {
  constructor(name, age, gender, occupation, hobby) {
    super(name, age, gender);
    this.occupation = occupation;
    this.hobby = hobby;
  }
  incrementAge() {
    super.incrementAge();
    this.age +=20;
    console.log(this.age);
  }
}</pre>

<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;最佳实践：虽然使用 ES6 的语法创造类的时候，js引擎是如何实现类以及如何操作原型是令人费解的，但是未来对初学者来说这是一个好的开始，同时也可以让我们写更简洁的代码。&lt;/span&gt; 

&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;/span&gt;**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;Symbols&lt;/span&gt;**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;/span&gt; 

&lt;span style=&quot;font-size:12px;color:#009900;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:12px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;Symbols 在 ES6 之前就已经存在，但是我们现在可以直接使用一个开发的接口了。Symbols 是不可改变并且是第一无二的，可以在任意哈希中作一个key。&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;span style=&quot;font-size:14px;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#007AAA;font-family:&amp;quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;Symbol()&lt;/span&gt;&lt;span style=&quot;font-size:14px;&quot;&gt;&lt;/span&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;调用 Symbol() 或者 Symbol(description) 可以创造一个第一无二的符号，但是在全局是看不到的。Symbol() 的一个使用情况是给一个类或者命名空间打上补丁，但是可以确定的是你不会去更新它。比如，你想给 React.Component 类添加一个 refreshComponent 方法，但是可以确定的是你不会在之后更新这个方法：&lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">const refreshComponent = Symbol();
React.Component.prototype[refreshComponent] = () =&gt; {
  //do something
}</pre>
<span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">Symbol.for(key)</span><span style="font-size:14px;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">Symbol.for(key) 同样会创造一个独一无二并且不可改变的 Symbol，但是它可以全局看到，两个相同的调用 Symbol.for(key) 会返回同一个 Symbol 类：</span> 

<pre class="prettyprint lang-js">Symbol('foo') === Symbol('foo')    // false
Symbol.for('foo') === Symbol('foo');  //false
Symbol.for('foo') === Symbol.for('foo');  //true</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">对于 Symbols 的普遍用法（尤其是Symbol.for(key)）是为了协同性。它可以通过在一个第三方插件中已知的接口中对象中的参数中寻找用 Symbol 成员来实现，比如：</span> 

<pre class="prettyprint lang-js">function reader(obj) {
  const specialRead = Symbol.for('specialRead');
  if (obj[specialRead]) {
    const reader = obj[specialRead]();
    // do something with reader
  } else{
    throw new TypeError('object cannot be read');
  }
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在另一个库中：</span> 

<pre class="prettyprint lang-js">const specialRead = Symbol.for('specialRead');
class SomeReadableType {
  [specialRead]() {
    const reader = createSomeReaderForm(this);
    return reader;
  }
}</pre>
<span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">Maps</span>**<span style="font-size:16px;color:#009900;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">Maps 在 JavaScript 中是一个非常必须的数据结构，在 ES6 之前，我们通过对象来实现哈希表：</span> 

<pre class="prettyprint lang-js">var map = new Object();
map[key1] = 'value1';
map[key2] = 'value2';</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">但是它并不能防止我们偶然地用一些特殊的属性名重写函数：</span> 

<pre class="prettyprint lang-js">getOwnProperty({ hasOwnProperty: 'Hah, overwritten'}, 'Pwned');</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">实际上 Maps 允许我们对值进行 set、get 和 search 操作：</span> 

<pre class="prettyprint lang-js">let map = new Map();
map.set('name','david');
map.get('name');    //  david
map.has('name');   //true</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">Maps 更令人惊奇的部分就是它不仅限于使用字符串作为 key，还可以用其他任何类型的数据作为 key：</span> 

<pre class="prettyprint lang-js">let map = new Map([
  ['name', 'david'],
  [true, 'false'],
  [1, 'one'],
  [{}, 'object'],
  [function () {}, 'function']
]);
for (let key of map.keys()) {
  console.log(typeof key);
  //  string, boolean, number, object, function
}</pre>

<pre><code>注意：但我们使用 map.get() 方法去测试相等时，如果在 Maps 中使用 函数 或者 对象 等非原始类型值的时候测试将不起作用，所以我们应该使用 Strings, Booleans 和 Numbers 这样的原始类型的值。

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;我们还可以使用 .entries() 来遍历迭代：&lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">for (let [key, value] of map.entries()) {
  console.log(key, value);
}</pre>
<span style="color:#009900;font-size:16px;"></span>**<span style="color:#009900;font-size:16px;">WeakMaps</span>**<span style="color:#009900;font-size:16px;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 之前，为了存储私有变量，我们有各种各样的方法去实现，其中一种方法就是用命名约定：</span> 

<pre class="prettyprint lang-js">class Person {
  constructor(age) {
    this._age = age;
  }
  _incrementAge() {
    this._age += 1;
  }
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">但是命名约定在代码中仍然会令人混淆并且并不会真正的保持私有变量不被访问。现在，我们可以使用 WeakMaps 来存储变量：
<pre class="prettyprint lang-js">let _age = new WeakMap();
class Person {
  constructor(age) {
    _age.set(this, age);
  }
  incrementAge() {
    let age = _age.get(this) + 1;
    _age.set(this, age);
    if (age &gt; 50) {
      console.log("Midlife crisis");
    }
  }
}</pre>
</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 WeakMaps 存储变量很酷的一件事是它的 key 他不需要属性名称，可以使用 Reflect.ownKeys() 来查看这一点：

</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"> </span>

<pre class="prettyprint lang-js">const person = new Person(50);
person.incrementAge();     //  'Midlife crisis'
Reflect.ownKeys(person);    //  []</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">一个更实际的实践就是可以 WeakMaps 储存 DOM 元素，而不会污染元素本身：</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"> </span>

<pre class="prettyprint lang-js">let map = new WeakMap();
let el = document.getElementById('someElement');
// Store a weak reference to the element with a key
map.set(el, 'reference');
//  Access the value of element
let value = map.get(el);     //  'reference'
//  Remove the reference
el.parentNode.removeChild(el);
el = null;

// map is empty, since the element is destroyed</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">如上所示，当一个对象被垃圾回收机制销毁的时候， WeakMap 将会自动地一处关于这个对象地键值对。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">注意：为了进一步说明这个例子的实用性，可以考虑 jQuery 是如何实现缓存一个对象相关于对引用地 DOM 元素对象。使用 jQuery ，当一个特定地元素一旦在 document 中移除的时候，jQuery 会自动地释放内存。总体来说，jQuery 在任何 dom 库中都是很有用的。</span></span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">Promises</span>**<span style="font-size:16px;color:#009900;"></span>

</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">Promises 可以让我们远离平行的代码（回调地狱）：</span>

<pre class="prettyprint lang-js">func1(function (value1) {
  func2(value1, function (value2) {
    func3(value2, function (value3) {
      func4(value3, function (value4) {
        func5(value4, funciton (value5) {
          //  Do something with value 5
        });
      });
    });
  });
});</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">转变成垂直代码：</span>

<pre class="prettyprint lang-js">func1(value1)
  .then(func2)
  .then(func3)
  .then(func4)
  .then(func5, value5 =&gt; {
    //  Do something with value 5
});</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 之前，我们使用 bluebird 或者 q，现在我们可以使用原生的 Promise 了。</span>

<pre class="prettyprint lang-js">new Promise ((resolve, reject) =&gt; 
  reject(new Error('Failed to fulfill Promise')))
    .catch(reason =&gt; console.log(reason));</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们有两个处理器，resolve（当Promise是 fulfilled 时的回调）和 reject（当Promise是 rejected 时的回调）：。</span>

    Promises的好处：对错误的处理使用一些列回调会使代码很混乱，使用 Promise ，我看可以清晰的让错误冒泡并且在合适的时候处理它，甚至，在 Promise 确定了 resolved/rejected 之后，他的值是不可改变的－－它从来不会变化。

    这是使用 Promise 的一个实际的栗子：

<pre class="prettyprint lang-js">var request = require('request');
return new Promise((resove, reject) =&gt; {
  request.get(url,(error, response, body) =&gt; {
    if (body) {
      resove(JSON.parse(body));
    } else {
      resove({});
    }
  })
})</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们还可以使用 Promise.all() 来 并行 处理多个异步函数：</span>

<pre class="prettyprint lang-js">let urls = [
  '/api/commits',
  '/api/issues/opened',
  '/api/issues/assigned',
  '/api/issues/completed',
  '/api/issues/comments',
  '/api/pullrequests'
];
let promises = urls.map((url) =&gt; {
  return new Promise((resolve, reject) =&gt; {
    $.ajax({ url: url})
      .done((data) =&gt; {
        resolve(data);
    });
  });
});
Promise.all(promises)
  .then((results) =&gt; {
    // Do something with result of all our promise
});</pre>
<span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">Generators 生成器</span>**<span style="font-size:16px;color:#009900;"></span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">就像 Promises 可以帮我们避免回调地狱，Generators 可以帮助我们让代码风格更整洁－－用同步的代码风格来写异步代码，它本质上是一个可以暂停计算并且可以随后返回表达式的值的函数。</span>

<pre class="prettyprint lang-js">function* sillyGenerator() {
  yield 1;
  yield 2;
  yield 3;
  yield 4;
}
var generator = sillyGenerator();
console.log(generator.next());  //  { value: 1, done: false }
console.log(generator.next());  //  { value: 2, done: false }
console.log(generator.next());  //  { value: 3, done: false }
console.log(generator.next());  //  { value: 4, done: false }</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">next 可以回去到下一个 yield 返回的值，当然上面的代码是非常不自然的，我们可以利用 Generators 来用同步的方式来写异步操作：</span>

<pre class="prettyprint lang-js">function request(url) {
  getJSON(url, function(response) {
    generator.next(response);
  });
}</pre>
<pre class="prettyprint lang-js">function* getData() {
  var entry1 = yield request('http://some_api/item1');
  var data1 = JSON.parse(entry1);
  var entry2 = yield request('http://some_api/item2');
  var data2 = JSON.parse(entry2);
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">通过 yield，我们可以保证 entry1 有 data1 中我们需要解析并储存的数据。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">虽然我们可以利用 Generators 来用同步的方式来写异步操作，但是确认错误的传播变得不再清晰，我们可以在 Generators 中加上 Promise：</span>

<pre class="prettyprint lang-js">function request(url) {
  return new Promise((resolve, reject) =&gt; {
    getJSON(url, resolve);
  });
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">然后我们写一个函数逐步调用 next 并且利用 request 方法产生一个 Promise：</span> 
<pre class="prettyprint lang-js">function iterateGenerator(gen) {
  var generator = gen();
  (function iterate(val) {
    var ret = generator.next();
    if(!ret.done) {
      ret.value.then(iterate);
    }
  })();
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 Generators 中加上 Promise 之后我们可以更清晰的使用 Promise 中的 .catch 和 reject来捕捉错误，让我们使用新的 Generator，和之前的还是蛮相似的：</span>

<pre class="prettyprint lang-js">iterateGenerator(function* getData() {
  var entry1 = yield request('http://some_api/item1');
  var data1 = JSPN.parse(entry);
  var entry2 = yidld request('http://some_api/item2');
  var data2 = JSON.parse(entry2);
});</pre>
**<span style="font-size:16px;color:#009900;">Async Await</span>**<span style="font-size:16px;color:#009900;"></span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">当 ES6 真正到来的时候，async await 可以用更少的处理实现 Promise 和 Generators 所实现的异步处理：</span>

<pre class="prettyprint lang-js">var request = require('request');
funciton getJSON(url) {
  return new Promise(function(resolve, reject) {
    request(url, function(error, response, body) {
      resolve(body);
    });
  });
}
async function main() {
  var data = await getJSON();
  console.log(data);
}
main();</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 js 引擎中，它所实现的和 Generators 其实是一样的，我更推荐在 Generators + Promises 之上使用 async await，更多的资源和使用 ES7 和 用 babel 转化可以看这里。</span>

    <span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">Getter/Setter 函数</span>**<span style="font-size:16px;color:#009900;"></span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">ES6 已经开始实现了 getter 和 setter 函数，比如虾面这个栗子：</span>

<pre class="prettyprint lang-js">class Employee {
  construstor(name) {
    this._name = name;
  }
  get name() {
    if (this._name) {
      return 'Mr. ' + this._name.toUpperCase();
    } else {
      return undefined;
    }
  }
  set name(newName) {
    if (newName == this._name) {
      console.log('I already have this name.');
    } else if (newName) {
      this._name = newName;
    } else {
      return false;
    }
  }
}
var emp = new Employee("James Bond");
if (emp.name) {
  console.log(emp.name);    //  Mr.  JAMES  BOND
 }
emp.name = "Bond 007";
console.log(emp.name);    //  Mr.  Bond  007</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">最新版本的浏览器也在对象中实现了 getter 和 setter 函数，我们可以使用它们来实现 计算属性，在设置和获取一个属性之前加上监听器和处理。</span>

<pre class="prettyprint lang-js">var person = {
  firstName: 'James',
  lastName: 'Bond',
  get fullName() {
    console.log('Getting FullName');
    return this.firstName + ' ' + this.lastName;
  },
  set fullName (name) {
    console.log('Setting FullName');
    var words = name.toString().split(' ');
    this.firstName = words[0] || '';
    this.lastName = words[1] || '';
  }
}
person.fullName;    //  James Bond
person.fullName = 'Bond 007';
person.fullName;    //  Bond 007</pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;这篇手册包含了 ES2015(ES6) 的使用小技巧、最佳实践
    
    </summary>
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/categories/ES6/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6新特性(1)——Arguments和Parameters</title>
    <link href="http://www.chenqiangyi.cn/2016/08/02/es6-e6-96-b0-e7-89-b9-e6-80-a71-arguments-e5-92-8cparameters/"/>
    <id>http://www.chenqiangyi.cn/2016/08/02/es6-e6-96-b0-e7-89-b9-e6-80-a71-arguments-e5-92-8cparameters/</id>
    <published>2016-08-02T01:05:29.000Z</published>
    <updated>2017-06-08T08:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">ECMAScript 6 (也称 ECMAScript 2015) 是ECMAScript 标准的最新版本，显著地完善了JS中参数的处理方式。除了其它新特性外，我们还可以使用rest参数、默认值、解构赋值等。</span> </p>
<pre><code>&lt;span style=&quot;color:#009900;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;**&lt;span style=&quot;color:#009900;font-size:16px;&quot;&gt;对比 Arguments 和 Parameters&lt;/span&gt;**&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#60D978;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;通常情况下提到 Arguments 和 Parameters， 都认为是可以互换使用的。然而，基于本教程的目的，我们做了明确的区分。在大多数标准中，parameters (形式参数) 指声明函数名和函数体的时候使用的参数，而 arguments (实际参数) 指在函数实际调用时，传入的确定值。思考下面这个函数：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#60D978;&quot;&gt; &lt;/span&gt;&lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">function foo(param1, param2) {
  // do something
}
foo(10, 20);</pre>

<pre><code>&lt;span style=&quot;color:#60D978;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;font-size:12px;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:12px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;在这个函数中， param1 和 param2 是函数的形式参数（形参）, 而在函数foo调用时，传入的 (10 和 20) 则是实际参数（实参）。&lt;/span&gt;&lt;span style=&quot;font-size:12px;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#60D978;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;font-size:12px;&quot;&gt;**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;扩展操作符&lt;/span&gt;**&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;/span&gt;
</code></pre><p> </p>
<pre><code>&lt;span style=&quot;color:#60D978;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;font-size:12px;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;color:#000000;&quot;&gt;&lt;span style=&quot;font-size:12px;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;在 ES5 中，用 apply() 方法可以很方便地将一个数组传递给函数。例如，我们经常把它和 Math.max() 结合使用，来取得数组中的最大值。请看下面代码：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 

&lt;span style=&quot;color:#60D978;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;font-size:12px;&quot;&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;color:#000000;&quot;&gt;&lt;span style=&quot;font-size:12px;&quot;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">var myArray = [5, 10, 50];
Math.max()myArray;        // Error: NaN
Math.max.apply(Math, myArray);     //50</pre>

<pre><code>Math.max() 方法并不支持传入数组，它只接受数字。所以当我们把数组作为参数传递给它时，就会抛出错误。但是，加上 apply() 方法后，数组会被转换成单独的数字，就能被 Math.max() 处理了。

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;庆幸的是，ES6 引入了扩展操作符，我们不需要再使用 apply() 方法了。通过扩展操作符，我们可以很方便地为表达式传入多个参数：&lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">var myArray = [5, 10, 50];
Math.max(...myArray);      //50</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">这里，扩展操作符把 myArray 展开成独立的数值传给了函数。 ES5里面使用 apply() 来模仿操作符是可以达到目的的，只是语法上令人困惑，并且缺乏扩展操作符的灵活性。 扩展操作符不仅易于使用，还涵盖了很多其他特性。例如，它可以被多次使用，还可以在 function 调用时，和其它参数混合使用:</span> 

<pre class="prettyprint lang-js">function myFunction() {
  for(var i in arguments){
    console.log(arguments[i]);
  }
}
var params = [10, 15];
myFunction(5, ...params, 20, ...[25]);       // 5 10 15 20 25</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">扩展操作符的另一个优点，就是它可以很简单地和构造函数一起使用：</span> 

<pre class="prettyprint lang-js">new Date(...[2016, 5, 6]);       //  Mon Jun 06 2016
00 : 00: 00 GMT-0700 (Pacific Daylight Time)</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">当然，我们可以用ES5重写上面的代码，但我们则需要用一个复杂的模式来避免类型错误：</span> 

<pre class="prettyprint lang-js">new Date.apply(null, [2016, 4, 24]);       //  TypeError:Date.apply is not a constructor
new (Function.prototype.bind.apply(Date,[null].concat([2016, 5, 6])));   // Mon Jun 06 2016 00 : 00 : 00 GMT-0700 (Pacific Daylight Time)</pre>
**<span style="font-size:16px;color:#009900;">浏览器对扩展操作符在函数中调用的支持情况</span>**<span style="font-size:16px;color:#60D978;"></span> 

    <span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">桌面浏览器;</span> 

    <table style="width:100%;" cellpadding="2" cellspacing="0" border="1" bordercolor="#000000">
        <tbody>
            <tr>
                <td>
                    Chrome
                </td>
                <td>
                    Firefox
                </td>
                <td>
                    Internet Explorer
                </td>
                <td>
                    Microsoft Edge
                </td>
                <td>
                    Opera
                </td>
                <td>
                    Safari
                </td>
            </tr>
            <tr>
                <td>
                    46
                </td>
                <td>
                    27
                </td>
                <td>
                    -
                </td>
                <td>
                    supported
                </td>
                <td>
                    -
                </td>
                <td>
                    7.1
                </td>
            </tr>
        </tbody>
    </table>

<span style="font-size:14px;"></span><span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">移动端浏览器：</span><span style="font-size:14px;"></span> 

    <table style="width:100%;" cellpadding="1" cellspacing="0" border="1" bordercolor="#000000">
        <tbody>
            <tr>
                <td>
                    Chrome for Android
                </td>
                <td>
                    Firefox Mobile
                </td>
                <td>
                    Safari
                </td>
                <td>
                    Oprea Mobile
                </td>
                <td>
                    IE Mobile
                </td>
            </tr>
            <tr>
                <td>
                    46
                </td>
                <td>
                    27
                </td>
                <td>
                    8
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
            </tr>
        </tbody>
    </table>

<span style="font-size:16px;color:#60D978;"></span>**<span style="font-size:16px;color:#009900;">Rest参数</span>**<span style="font-size:16px;color:#60D978;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">rest参数和扩展操作符拥有相同的语法，不同的是，rest参数是把所有的参数收集起来转换成数组，而扩展操作符是把数组扩展成单独的参数。</span> 

<pre class="prettyprint lang-js">function myFunction(...options) {
  return options;
}
myFunction('a', 'b', 'c');     //  ["a", "b", "c"]</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">如果函数调用时，没有传入实际参数，则rest参数会输出一个空数组，如下：</span> 

<pre class="prettyprint lang-js">function myFunction(...options) {
  return options;
}
myFunction();      //[]</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">rest参数在创建一个可变函数（即一个参数个数可变的函数）时尤其有用。rest参数有着数组固有的优势，可以快捷地替换 arguments 对象（下文会解释这个名词）。下面这个函数是用ES5写的，我们来看下：</span> 

<pre class="prettyprint lang-js">function checkSubstrings(string) {
  for(var i = 1; i &lt; arguments.length; i++) {
    if(string.indexOf(arguments[i]) === -1){
      return false;
    }
  }
    return false;
}
checkSubstrings('this is a string', 'is', 'this');    //true</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">该函数检查字符串（this is a string）是否包括这些子串（is, this）。这个函数存在的第一个问题是，我们必须看函数体内是否有多个参数。第二个问题是，循环必须从 1 开始，而不是从 0 开始, 因为 arguments[0] 指向的就是第一个参数（this is a string）。 如果以后我们想要在这个字符串的前面或者后面添加另一个参数，我们可能会忘记更新循环体。而使用rest参数，我们就可以很容易地避免这些问题：</span> 

<pre class="prettyprint lang-js">function checkSubstrings(string, ...keys) {
  for (var key of keys) {
    if(string.indexOf(key) === -1) {
      return false;
    }   
  }
    return true;
}
checkSubstrings('this is a string', 'is', 'this');    //true</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">该函数的输出跟前一个函数的输出是一样的。这里再提一下，参数 string 被包含在这个函数的 argument 中，并且第一个被传递进来，剩下的参数都被放到一个数组，并且赋给了名为 keys 的变量。</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">使用rest参数替代 arguments 对象来提高代码的可读性和避免一些js的优化问题1。 然而，rest参数也不是没有缺点的。例如，它必须是最后一个参数，否则就会报错，如下面函数所示：</span> 

<pre class="prettyprint lang-js">function logArguments(a, ...params, b) {
  console.log(a, params, b);
}
logArguments(5, 10, 15);      //SyntaxError: parameter after rest parameter</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">另一个缺点是，一个函数声明只能允许有一个rest参数：</span> 

<pre class="prettyprint lang-js">function logArguments(...param1, ...param2) {
}
logArgument(5, 10, 15);      //SyntaxError: parameter after rest parameter</pre>
<span style="font-size:16px;color:#60D978;"></span> 

    **<span style="font-size:16px;color:#009900;">浏览器对Rest参数的支持情况</span>** 

    **<span style="font-size:16px;color:#60D978;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="font-size:14px;">桌面浏览</span><span style="font-size:14px;">器：</span></span><span style="font-size:14px;"></span>

</span>** 

    <table style="width:100%;" cellpadding="2" cellspacing="0" border="1" bordercolor="#000000">
        <tbody>
            <tr>
                <td>
                    Chrome
                </td>
                <td>
                    Firefox
                </td>
                <td>
                    Internet Explorer
                </td>
                <td>
                    Microsoft Edge
                </td>
                <td>
                    Opera
                </td>
                <td>
                    Safari
                </td>
            </tr>
            <tr>
                <td>
                    47
                </td>
                <td>
                    15
                </td>
                <td>
                    -
                </td>
                <td>
                    Supported
                </td>
                <td>
                    34
                </td>
                <td>
                    -
                </td>
            </tr>
        </tbody>
    </table>

<span style="color:#3E3E3E;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">移动端浏览器：</span><span style="font-size:14px;"></span> 

    <table style="width:100%;" cellpadding="2" cellspacing="0" border="1" bordercolor="#000000">
        <tbody>
            <tr>
                <td>
                    Chrome for Android
                </td>
                <td>
                    FireFox Mobile
                </td>
                <td>
                    Safari Mobile
                </td>
                <td>
                    Opera Mobile
                </td>
                <td>
                    IE Mobile
                </td>
            </tr>
            <tr>
                <td>
                    47
                </td>
                <td>
                    15
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
            </tr>
        </tbody>
    </table>

<span style="font-size:16px;color:#60D978;"></span>**<span style="font-size:16px;color:#009900;">默认参数</span>**<span style="font-size:16px;color:#60D978;"></span> 

    <span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">ES5 默认参数</span><span style="font-size:14px;"></span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在ES5中，JS 并不支持默认参数, 但是，我们也有一种变通的方案，那就是在函数中使用 OR 操作符（ ||）。我们简单地模仿ES5中的默认参数，请看下面函数：</span> 

<pre class="prettyprint lang-js">function foo(param1, param2) {
  param1 = param1 || 10;
  param2 = param2 || 10;
  console.log(param1, param2);
}
foo(5, 5);
foo(5);
foo();
VM2450:4 5 5
VM2450:4 5 10
VM2450:4 10 10</pre>

<pre><code>该函数预期传入两个参数，但如果在调用该函数时，没有传入实参，则它会用默认值。在函数体内，如果没有传入实际参数，则会被自动设为 undefined, 所以，我们可以检测这些参数，并且声明他们的默认值。我们可以使用 OR 操作符（||）来检测是否有传入实际参数，并且设定他们的默认值。OR 操作符会检测它的第一个参数，如果有实际值2，则用第一个，如果没有，则用它的第二个参数。

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;这种方法在函数中普遍使用，但它有一个瑕疵，那就是传入 0 或者 null 也会触发默认值，因为 0 和 null 都被认为是false. 所以，如果我们需要给函数传入 0 和 null 时，我们需要另一种方式去检测这个参数是否缺失：&lt;/span&gt; 
</code></pre><pre class="prettyprint lang-js">function foo(param1, param2) {
  if(param1 === undefined) {
    param1 = 10;
  }
  if(param2 === undefined) {
    param2 = 10;
  }
  console.log(param1, param2);
}
foo(0, null);
foo();
VM788:8 0 null
VM788:8 10 10</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在上面这个函数中，只有当所传的参数全等于 undefined 时，才会使用默认值。这种方式需要用到的代码稍微多点，但是安全度更高，我们可以给函数传入 0 和 null 。</span> 

    <span style="color:#007AAA;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">ES6 默认参数</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">有了ES6,我们不需要再去检测哪些值为undefined并且给它们设定默认值了。现在我们可以直接在函数声明中放置默认值：</span> 

<pre class="prettyprint lang-js">function foo(a = 10, b = 10) {
  console.log(a, b);
}
foo(5);
foo(0, null);
VM837:2 5 10
VM837:2 0 null</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">如你所见，省略一个参数，就会触发一个默认值，但是传入 0 或者 null 时，则不会。 我们甚至可以使用函数去找回默认参数的值：</span> 

<pre class="prettyprint lang-js">function getParam() {
  alert("getParam was called");
  return 3;
}
function multiply(param1, param2 = getParam()) {
  return param1 * param2;
}
multiply(2, 5);    //10
multiply(2);     // 6 (also displays an alert dialog)
</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">注意 getParam 这个函数只有在第二个参数省略时才会被调用。所以当我们给 multiply 传入两个参数并调用它时，alert是不会出现的。</span> 

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">默认参数还有一个有趣的特性，那就是我们可以在函数声明中指定其它参数和变量的值：</span> 

<pre class="prettyprint lang-js">function myFunction(a = 10, b = a) {
  console.log('a = ' + a + ' ; b = ' + b);
}
myFunction();       //  a=10; b=10
myFunction(22);   //  a=22; b=22
myFunction(2, 4); //  a=2; b=4</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">你甚至可以在函数声明中做运算：</span> 

<pre class="prettyprint lang-js">function myFunction (a, b = ++a, c = a*b) {
  console.log(c);
}
myFunction(5);    //36</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">请注意，JavaScript 和其它语言不同， 它是在函数被调用时，才去求参数的默认值。</span> 

<pre class="prettyprint lang-js">function add(value, array = []) {
  array.push(value);
  return array;
}
add(5);    //  [5]
add(6);    //  [6], not [5, 6]</pre>
<span style="color:#009900;"></span><span style="font-size:16px;"><span style="color:#009900;"></span><span style="color:#60D978;"><span style="color:#009900;"></span>**<span style="color:#009900;">浏览器对默认参数的支持情况</span>**</span></span> 

    <span style="font-size:16px;"><span style="color:#60D978;"><span style="font-size:14px;"></span><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">桌面浏览器：</span></span></span> 

    <span style="font-size:16px;"><span style="color:#60D978;"> 
    <table style="width:100%;" cellpadding="2" cellspacing="0" border="1" bordercolor="#000000">
        <tbody>
            <tr>
                <td>
                    Feature
                </td>
                <td>
                    Chrome
                </td>
                <td>
                    FireFox
                </td>
                <td>
                    Internet Explorer
                </td>
                <td>
                    Microsoft Edge
                </td>
                <td>
                    Opera
                </td>
                <td>
                    Safari
                </td>
            </tr>
            <tr>
                <td>
                    Basic support
                </td>
                <td>
                    49
                </td>
                <td>
                    15
                </td>
                <td>
                    -
                </td>
                <td>
                    14
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
            </tr>
            <tr>
                <td>
                    Parameters without defaults after default parameter
                </td>
                <td>
                    49
                </td>
                <td>
                    26
                </td>
                <td>
                    -
                </td>
                <td>
                    14
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
            </tr>
        </tbody>
    </table>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">移动端浏览器：</span></span></span> 

    <span style="font-size:16px;"><span style="color:#60D978;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"> 
    <table style="width:100%;" cellpadding="2" cellspacing="0" border="1" bordercolor="#000000">
        <tbody>
            <tr>
                <td>
                    <span>Feature</span>

                </td>
                <td>
                    <span>Chrome for Android</span>

                </td>
                <td>
                    Firefox mobile
                </td>
                <td>
                    Safari mobile
                </td>
                <td>
                    Opera Mobile
                </td>
                <td>
                    IE Mobile
                </td>
            </tr>
            <tr>
                <td>
                    <span>Basic support</span>

                </td>
                <td>
                    49
                </td>
                <td>
                    15
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
            </tr>
            <tr>
                <td>
                    <span>Parameters without defaults after default parameter</span>

                </td>
                <td>
                    46
                </td>
                <td>
                    26
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
                <td>
                    -
                </td>
            </tr>
        </tbody>
    </table>

**<span style="font-size:16px;color:#009900;">解构赋值</span>**<span style="font-size:16px;color:#009900;"></span>

<span style="font-size:12px;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">解构赋值是ES6的新特性。我们可以从数组和对象中提取值，对变量进行赋值。这种语法清晰且易于理解，尤其是在给函数传参时特别有用。</span></span></span></span></span> 

    <span style="font-size:16px;"><span style="color:#60D978;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="font-size:12px;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在ES5里面，我们经常用一个配置对象来处理大量的可选参数， 特别是当对象属性的顺序可变时：</span></span></span></span></span> 

    <span style="font-size:16px;"><span style="color:#60D978;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="font-size:12px;"> </span></span></span></span> 

<pre class="prettyprint lang-js">function initiateTransfer(options) {
  var protoclo = options.protocol,
  port = options.port,
  retires = options.retries,
  timeout = options.timeout,
  log = options.log;
}
options = {
  protocol: 'http',
  port: 800,
  delay: 150,
  retries: 10,
  timeout: 500,
  log: true
};
initiateTransfer(options);</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">这种方式实现起来很好，已经被许多JS开发者所采用。 只是我们必须看函数内部，才知道函数预期需要哪些参数。结合解构赋值，我们就可以在函数声明中清晰地表示这些参数：</span> 

    <span style="font-size:16px;"><span style="color:#60D978;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="font-size:12px;"> </span></span></span></span> 

<pre class="prettyprint lang-js">function initiateTransfer({protocol, port, delay, retries, timeout, log}) {
  //code to initiate transfer
};
var options = {
  protocol: 'http',
  port: 800,
  delay: 150,
  retries: 10,
  timeout: 500,
  log: true
}
initiateTransfer(options);</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在该函数中，我们没有传入一个配置对象，而是以对象解构赋值的方式，给它传参数。这样做不仅使这个函数更加简明，可读性也更高。</span> 

    <span style="font-size:16px;"><span style="color:#60D978;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="font-size:12px;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们也可以把解构赋值传参和其它规则的参数一起使用：</span></span></span></span></span> 

    <span style="font-size:16px;"><span style="color:#60D978;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="font-size:12px;"> </span></span></span></span> 

<pre class="prettyprint lang-js">function initiateTransfer(param1, {protocol, port, delay, retires, timeout,log}) {
  //code to initiate transfer
}
initiateTransfer('some value', options);</pre>

<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;注意如果函数调用时，参数被省略掉，则会抛出错误，如下：&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">function initiateTransfer({protocol, port, delay, retries, timeout, log}) {
  //code to initiate transfer
}
initiateTransfer();     //TypeError:Cannot match against 'undefined' or 'null'</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">当我们需要让参数都是必填时，这种方法能够得到我们想要的结果，但如果我们希望参数是可选的时候呢？想要让参数缺失时不会报错，我们就需要给默认参数设定一个默认值：</span>

<pre class="prettyprint lang-js">function initiateTransfer ({protocol, port, delay, retries, timeout, log} = {}) {
  //code to initiate transfer
}
initiateTransfer();    //  no error</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">上面这个函数中，需要解构赋值的参数有了一个默认值，这个默认值就是一个空对象。这时候，函数被调用时，即使没有传入参数，也不会报错了。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们也可以给每个被解构的参数设定默认值，如下：</span>

<pre class="prettyprint lang-js">function initiateTransfer({
  protocol = 'http',
  port = 800,
  delay = 150,
  retries = 10,
  timeout = 500,
  log = true
}) {
  //code to initiate transfer
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在这个例子中，每个属性都有一个默认值，我们不需要手动去检查哪个参数值是 undefined ，然后在函数中给它设定默认值了。</span>

    <span style="line-height:1.5;"><span style="font-size:16px;color:#009900;"></span>**<span style="font-size:16px;color:#009900;">参数传递</span>**<span style="font-size:16px;color:#009900;"></span></span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">参数能通过引用或值传递给函数。修改按引用传递的参数，一般反映在全局中，而修改按值传递的参数，则只是反映在函数内部。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在像 Visual Basic 和 PowerShell 这样的语言中，我们可以选择是按引用还是按值来传递参数，但是在 JavaScript 中则不行。</span>

    <span style="color:#007AAA;font-size:14px;">按值传递参数</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">从技术上来讲，JavaScript 只允许按值传参。当我们给函数按值传递一个参数时，该函数的作用域内就已经复制了这个值。因此，这个值的改变，只会在函数内部反映出来。请思考下面这个列子：</span>

<pre class="prettyprint lang-js">var a = 5;
function increment(a) {
  a = ++a;
  console.log(a);
}
increment(a);        //6
console.log(a);     //5</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">这里，修改函数里面的参数 a = ++a，是不会影响到原来a的值。 所以在函数外面打印 a 的值，输出仍然是 5。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">按引用传递参数</span><span style="font-size:14px;"></span>

</span>

<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在JavaScript中，一切都是按值传递的。但当我们给函数传一个变量，而这个变量所指向的是一个对象（包括数组）时，这个 变量 就是对象的一个引用。通过这个变量来改变对象的属性值，是会从根本上改变这个对象的。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">来看下面这个例子：</span>

<pre class="prettyprint lang-js">function foo(param) {
  param.bar = 'new value';
}
obj = {
  bar : 'value'
}
console.log(obj.bar);    //  value
foo(obj);
console.log(obj.bar);    //  new value</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">如你所见，对象的属性值在函数内部被修改了，被修改的值在函数外面也是可见的。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">当我们传递一个没有初始值的参数时，如数组或对象，会隐形地创建了一个变量，这个变量指向记忆中原对象所在的位置。这个变量随后被传递给了函数，在函数内部对这个变量进行修改将会影响到原对象。</span>

    <span style="color:#009900;"></span><span style="font-size:16px;"><span style="color:#009900;"></span>**<span style="color:#009900;">参数类型检测、参数缺失或参数多余</span>**<span style="color:#009900;"></span></span>

    在强类型语言中，我们必须在函数声明中明确参数的类型，但是 JavaScript 没有这种特性。在JavaScript中，我们传递给函数的参数个数不限，也可以是任何类型的数据。

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">假设现在有一个函数，这个函数只接受一个参数。但是当函数被调用时，它本身没有限制传入的参数只能是一个，我们可以随意地传入一个、两个、甚至是更多。我们也可以什么都不传，这样都不会报错。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">形参（arguments）和 实参（parameters）的个数不同有两种情况：</span></span>

*   <span style="line-height:25.6px;color:#3E3E3E;font-family:&quot;font-size:16px;background-color:#FFFFFF;"></span><span style="line-height:25.6px;color:#3E3E3E;font-family:&quot;font-size:16px;background-color:#FFFFFF;"><span style="font-family:&quot;font-size:16px;background-color:#FFFFFF;line-height:1.5;">实参少于形参</span></span><span style="line-height:1.5;color:#3E3E3E;"></span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">缺失的参数都会等同于 undefined。</span>

*   <span style="color:#3E3E3E;font-family:&quot;font-size:16px;background-color:#FFFFFF;line-height:1.5;"></span><span style="color:#3E3E3E;font-family:&quot;font-size:16px;background-color:#FFFFFF;line-height:1.5;">实参多于形参</span>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">多余的参数都将被忽略，但它们会以数组的形式保存于变量 arguments 中（下文会讨论到）。</span>

    **<span style="font-size:16px;color:#009900;">必填参数</span>**<span style="font-size:16px;color:#009900;"></span>

<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">如果一个参数在函数调用时缺失了，它将被设为 undefined。基于这一点，我们可以在参数缺失时抛出一个错误：</span>

<pre class="prettyprint lang-js">function foo(mandatory, optional) {
  if (mandatory === undefined) {
    throw new Error ('Missing parameter: mandatory');
  }
}</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在 ES6 中，我们可以更好地利用这个特性，使用默认参数来设定必填参数：</span>

<pre class="prettyprint lang-js">function throwError() {
  throw new Error('Missing parameter');
}
function foo(parama1 = throwError(), param2 = 
throwError()) {
  //do something
}
foo(10,20);    //ok
foo(10);    //Error: missing parameter</pre>
<span style="font-size:14px;color:#337FE5;"></span><span style="color:#337FE5;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">参数对象</span><span style="font-size:14px;color:#337FE5;"></span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">为了取代参数对象，rest参数在 ECMAScript 4 中就已经得到支持，但是 ECMAScript 4 没有落实。随着 ECMAScript 6 版本的发布，JS 正式支持rest参数。它也拟定计划，准备抛弃 对参数对象 arguments object 的支持。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">参数对象是一个类数组对象，可在一切函数内使用。它允许通过数字而不是名称，来找回被传递给函数的参数值。这个对象使得我们可以给函数传递任何参数。思考以下代码段：</span>

<pre class="prettyprint lang-js">function checkParams(param1) {
  console.log(param1);      //  2
  console.log(arguments[0], arguments[1], arguments[2]);      //  2  3  4
  console.log(param1 + arguments[0]);      //  2 + 2
}
checkParams(2, 3, 4);</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">该函数预期接收一个参数。但是当我们给它传入两个参数并且调用它时，第一个参数通过名为 param1 的形参或者参数对象 arguments[0] 被函数所接受，而第二个参数只能被放在argument[1] 里面。此外，请注意，参数对象可以与命名参数一起使用。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">参数对象给每个被传递给函数的参数提供了一个入口，并且第一个入口的下标从 0 开始。如果我们要给上面这个函数传递更多的参数，我们可以写 arguments[2],arguments[3] 等等。</span>

    <span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">我们甚至可以跳过设定命名参数这一步，直接使用参数对象：</span>

<pre class="prettyprint lang-js">function checkParams() {
  console.log(arguments[1], arguments[0] ,arguments[2]);
}
checkParams(2, 4, 6)      //  4  2  6</pre>
<span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">事实上，命名参数只是为了方便使用，并不是必须的。类似地，rest参数也可用于反映被传递的参数：</span>

<pre class="prettyprint lang-js">function checkParams(...params) {
  console.log(params[1], params[0], params[2]);    // 4 2 6
  console.log(arguments[1], arguments[0], arguments[2]);    // 4 2 6
}
checkParams(2, 4, 6);</pre>

<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;参数对象是一个类数组的对象，只是它没有数组本身具备的方法，如slice() 和 foreach()。 如果要在参数对象中使用数组的方法，首先要把它转换成一个真正的数组。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt; &lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">function sort() {<br>  var a = Array.prototype.slice.call(arguments);<br>  return a.sort();<br>}<br>sort(40, 20, 50,30);      //  [20, 30, 40, 50]</pre><br><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在该函数中，采用了 Array.prototype.slice.call() 来快速地把参数对象转换成一个数组。接着，在 sort() 方法中，为这个数组排序并且把它返回。</span></p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;ES6 新增了更直接的方法，用 Array.from() 把任何类数组对象转换成数组：&lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">function sort() {<br>  var a = Array.from(arguments);<br>  return a.sort();<br>}<br>sort(40, 20, 50,30);      //  [20, 30, 40, 50]</pre><br><span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">长度属性</span><span style="font-size:14px;"></span></p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;尽管参数对象从技术上来讲，不算是一个数组，但仍有一个长度属性，来检测传递给函数的参数个数：&lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">function countArguments() {<br>  console.log(arguments.length);<br>}<br>countArguments();      // 0<br>countArguments(10, null, “string”);      //3</pre><br><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">通过 length 属性，我们可以更好地控制传递给函数的参数个数。举个例子，如果一个函数只要求两个参数，那么我们就可以使用 length 属性来检测所传入的参数个数，如果少于要求的个数，则抛出错误：</span></p>
<p><pre class="prettyprint lang-js">function foo(param1, param2) {<br>  if(arguments.length &lt; 2) {<br>    throw new Error (“This function expects at least two arguments”);<br>  } else if (arguments.length === 2) {<br>    //do something<br>  }<br>}</pre><br><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">rest参数是数组，所以他们都有 length 属性。 所以上面的代码，在ES6里面可以用rest参数写成下面这样：</span></p>
<p><pre class="prettyprint lang-js">function foo(…params) {<br>  if (params.length &lt; 2) {<br>    throw new Error(“This function expects at least two arguments”);<br>  } else if (params.length === 2) {<br>    //do something<br>  }<br>}</pre><br><span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">被调用属性与调用属性</span></p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;被调用 属性指向当前正在执行的函数，而 调用 属性则指向那个调用了 当前正在执行的函数 的函数。 在ES5的严格模式下，这些属性是不被支持的，如果尝试使用它们，则会报错。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;arguments.callee 这个属性在递归函数中很有用，尤其在匿名函数中。因为匿名函数没有名称，只能通过 arguments.callee 来指向它。&lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">var result = (function(n) {<br> if (n &lt;= 1) {<br>  return 1;<br>} else {<br> return n * arguments.callee(n - 1);<br>}<br>})(4);     //undefined</pre><br><span style="font-size:14px;"></span><span style="color:#007AAA;font-family:&quot;font-size:14px;line-height:25.6px;background-color:#FFFFFF;">严格模式和非严格模式下的参数对象</span><span style="font-size:14px;"></span></p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;在ES5非严格模式下，参数对象 有个不一般的特性：它能使 自身的值 跟 与之相对应的命名参数的值 保持同步。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;请看下面这个例子：&lt;/span&gt;
</code></pre><p><pre class="prettyprint lang-js">function foo(param) {<br>  console.log(param === arguments[0]);      // true<br>  arguments[0] = 500;<br>  console.log(param === arguments[0]);      //true<br>  return param<br>}<br>foo(200);        //500</pre><br><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在这个函数里面，arguments[0] 被重新赋值为 500。由于 arguments 的值总是和对应的命名参数保持同步，所以改变了arguments[0] 的值，也就相应的改变了 param 的值。实际上，他们就像是同一个变量，拥有两个不同的名字而已。而在 ES5严格模式下，参数对象的这种特性则被移除了。</span></p>
<p><pre class="prettyprint lang-js">“use strict”;<br>function foo(param) {<br>  console.log(param === arguments[0]);      //  true<br>  arguments[0] = 500;<br>  console.log(param === arguments[0]);      //  false<br>  return param;<br>}<br>foo(200);       //  200</pre><br><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">加上 严格模式， 现在改变 arguments[0] 的值是不会影响到 param 的值了，打印出来的值也跟预期的一致。 在 ES6中 该函数的输出跟在 ES5 严格模式下是一样的。需要记住的是，当函数声明中使用了默认值时，参数对象是不会受到影响的：</span></p>
<p><pre class="prettyprint lang-js">function foo(param1, param2 = 10, param3 = 20) {<br>  console.log(param1 === arguments[0]);    //  true<br>  console.log(param2 === arguments[1]);    //  true<br>  console.log(param3 === arguments[2]);    //  false<br>  console.log(arguments[2]);      //  undefined<br>  console.log(param3);        //  20<br>}<br>foo(‘string1’, ‘string2’);</pre><br><span style="color:#3E3E3E;font-family:&quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">在这个函数中，尽管 param3 有默认值 20，但是 arguments[2] 仍然是 undefined, 因为函数调用时只传了两个值。换言之，设定默认值对参数对象是没有任何影响的。</span></p>
<pre><code>&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;/span&gt;**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;总结&lt;/span&gt;**&lt;span style=&quot;font-size:16px;color:#009900;&quot;&gt;&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;ES6 给 JS 带来了上百个大大小小的改进。 越来越多的开发者正使用ES6的新特性, 所以我们都需要去了解它们。在本教程中，我们学习了ES6是如何改善JS的参数处理的，但我们仍只是知晓了ES6的皮毛。更多新的、有趣的特性值得我们去探讨。&lt;/span&gt;

&lt;span style=&quot;font-size:16px;&quot;&gt;&lt;span style=&quot;color:#60D978;&quot;&gt;
</code></pre><p> </p>
<div><br><br></div>

<div><br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&amp;quot;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;ECMAScript 6 (也称 ECMAScript 201
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://www.chenqiangyi.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>javascript和jquery读取和修改HTTP headers</title>
    <link href="http://www.chenqiangyi.cn/2016/06/13/javascript-e5-92-8cjquery-e8-af-bb-e5-8f-96-e5-92-8c-e4-bf-ae-e6-94-b9http-headers/"/>
    <id>http://www.chenqiangyi.cn/2016/06/13/javascript-e5-92-8cjquery-e8-af-bb-e5-8f-96-e5-92-8c-e4-bf-ae-e6-94-b9http-headers/</id>
    <published>2016-06-12T16:40:03.000Z</published>
    <updated>2017-06-08T09:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中遇到了一些问题，需要从第三方获取数据，通过ajax获取的时候需要修改HTTP headers信息。其中主要代码如下：</p>
<pre class="prettyprint lang-js">$(document).ready(function(){
        $.ajax({
         url: "https://api.stickerpipe.com/api/v2/shop",
         type: "GET",
          headers: {
                'Platform':'JS',
                'ApiKey':'173a6bc645f17ea974cc4a25b431a82c',
                'UserId':'12345'
            },
        data :{limit:'10',offset:"0"},
         success: function(json){
             console.log(json.data);
         },
         error: function(){
             alert('fail');
         }
     });

})</pre>

<pre><code>在这中间的ajax获取数据时需要修改HTTP headers信息，下面就来介绍一下如何修改头信息

一、jquery修改HTTP headers
</code></pre><hr>
<pre><code>jQuery Ajax可以通过headers或beforeSend修改request的HTTP headers，例如：
</code></pre><pre class="prettyprint lang-js"> $.ajax({
        url: "./test.php",
        type: "POST",
        headers: {
            "Accept" : "text/plain; charset=utf-8",
            "Content-Type": "text/plain; charset=utf-8"
        },
        /*
        beforeSend: function(jqXHR, settings) {
            jqXHR.setRequestHeader('Accept', 'text/plain; charset=utf-8');
            jqXHR.setRequestHeader('Content-Type', 'text/plain; charset=utf-8');
        },
        */
        data: {"user" : "min", "pass" : "he"},
        error: function(jqXHR, textStatus, errorThrown) {
            //....
        },
        success: function(data, textStatus, jqXHR) {
            //....
        }
    }</pre>

<pre><code>注意：：W3规定XMLHttpRequest并不能修改全部的HTTP Headers，而仅是一小部分。

二、&lt;span style=&quot;line-height:1.5;&quot;&gt;jquery获取HTTP headers:&lt;/span&gt;

&lt;span style=&quot;line-height:1.5;&quot;&gt;&lt;/span&gt;
</code></pre><hr>
<pre><code>&lt;span style=&quot;line-height:1.5;&quot;&gt;html
</code></pre><p></p>
<pre class="prettyprint lang-js">html&gt;
    &lt;head&gt;
        &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;&lt;/body&gt;
    &lt;script type="text/javascript"&gt;
    $(document).ready(function(){
        $.ajax({
            url: "./test.php",
            type: "POST",
            data: {"user" : "min", "pass" : "he"},
            error: function(jqXHR, textStatus, errorThrown) {
                if (textStatus == "error") {
                    alert(textStatus + " : " +errorThrown);
                } else {
                    alert(textStatus);
                }
            },
            success: function(data, textStatus, jqXHR) {
                alert(jqXHR.getResponseHeader("Server"));
                alert(jqXHR.getResponseHeader("Content-Type"));
                alert(jqXHR.getResponseHeader("X-Powered-By"));
                alert(jqXHR.getResponseHeader("Content-Encoding"));
                alert(jqXHR.getAllResponseHeaders());
                alert(jqXHR.getResponseHeader("Set-Cookie"));       //返回null，不能获取Set-Cookie的值
                alert(data + textStatus);
            }
        });
    });
    &lt;/script&gt;
    &lt;/html&gt;</pre>

<pre><code>&lt;span style=&quot;line-height:1.5;&quot;&gt;test.php&lt;/span&gt;

&lt;span style=&quot;line-height:1.5;&quot;&gt; &lt;/span&gt;
</code></pre><pre class="prettyprint lang-js"> &lt;?php
    if (isset($_COOKIE["time"])) {
        $time = $_COOKIE["time"] + 1;
    } else {
        $time = 1;
    }
    setcookie("time", $time);

    $user = $_REQUEST["user"];
    $pass = $_REQUEST["pass"];
    print $user.$pass." ".$time;</pre>

<pre><code>jQuery通过XMLHttpRequest的getResponseHeader或getAllResponseHeaders()可以获取指定的HTTP header field的值，但规定不能获取Set-Cookie和Set-Cookie2的值。
</code></pre><p>参考：</p>
<pre><code>&lt;span style=&quot;line-height:1.5;&quot;&gt;[http://stackoverflow.com/questions/1145588/cannot-properly-set-the-accept-http-header-with-jquery](http://stackoverflow.com/questions/1145588/cannot-properly-set-the-accept-http-header-with-jquery)&lt;/span&gt;

[http://stackoverflow.com/questions/2444489/getresponseheader-is-not-a-function](http://stackoverflow.com/questions/2444489/getresponseheader-is-not-a-function)

&lt;span style=&quot;line-height:1.5;&quot;&gt;
</code></pre><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中遇到了一些问题，需要从第三方获取数据，通过ajax获取的时候需要修改HTTP headers信息。其中主要代码如下：&lt;/p&gt;
&lt;pre class=&quot;prettyprint lang-js&quot;&gt;$(document).ready(function(){
      
    
    </summary>
    
      <category term="Ajax" scheme="http://www.chenqiangyi.cn/categories/Ajax/"/>
    
    
      <category term="Ajax" scheme="http://www.chenqiangyi.cn/tags/Ajax/"/>
    
      <category term="HTTP headers" scheme="http://www.chenqiangyi.cn/tags/HTTP-headers/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API</title>
    <link href="http://www.chenqiangyi.cn/2016/06/13/restful-api/"/>
    <id>http://www.chenqiangyi.cn/2016/06/13/restful-api/</id>
    <published>2016-06-12T16:25:01.000Z</published>
    <updated>2017-06-08T09:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有写博客了，最近刚好在弄公司的一个项目需要调用别人的API，其中遇到好多坑，今天将其记录下来，方便以后的学习。主要参考阮一峰的文章<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a>和博客园的一篇文章<a href="http://www.cnblogs.com/princeoicq/articles/2217808.html" target="_blank" rel="external">http://www.cnblogs.com/princeoicq/articles/2217808.html</a>，接下来就来介绍RESTful API的设计与应用。</p>
<pre><code>一、协议
</code></pre><hr>
<p>API与用户的通信协议，总是使用HTTP协议</p>
<pre><code>二、域名
</code></pre><hr>
<p>应该尽量将API部署到专用域名下</p>
<pre class="prettyprint lang-js">https://api.example.com</pre>

<pre><code>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。
</code></pre><pre class="prettyprint lang-js">https://example.org/api/</pre>
三、版本

* * *

将API的版本放入URL

<pre class="prettyprint lang-js">https://api.example.com/v1/</pre>

<pre><code>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。
</code></pre><p>四、路径</p>
<hr>
<pre><code>路径又称&quot;终点&quot;（endpoint），表示API的具体网址。

在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&quot;集合&quot;（collection），所以API中的名词也应该使用复数。

举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。
</code></pre><pre class="prettyprint lang-js">https://api.example.com/v1/zoos
https://api.example.com/v1/animals
https://api.example.com/v1/employees</pre>

<pre><code>五、HTTP动词

对于资源的具体操作类型，由HTTP动词表示。

常用的HTTP动词有下面五个（括号里是对应的SQL命令）。
</code></pre><hr>
<pre class="prettyprint lang-js">GET（SELECT）：从服务器取出资源（一项或多项）。
POST（CREATE）：在服务器新建一个资源。
PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。
DELETE（DELETE）：从服务器删除资源。</pre>
还有两个不常用的HTTP动词

<pre class="prettyprint lang-js">HEAD：获取资源的元数据。
OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</pre>

<pre><code>下面是一些例子。
</code></pre><pre class="prettyprint lang-js">GET /zoos：列出所有动物园
POST /zoos：新建一个动物园
GET /zoos/ID：获取某个指定动物园的信息
PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）
PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）
DELETE /zoos/ID：删除某个动物园
GET /zoos/ID/animals：列出某个指定动物园的所有动物
DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</pre>

<pre><code>六、过滤信息（&lt;span style=&quot;line-height:1.5;&quot;&gt;Filtering&lt;/span&gt;）

如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。

下面是一些常见的参数。
</code></pre><hr>
<pre class="prettyprint lang-js">?limit=10：指定返回记录的数量
?offset=10：指定返回记录的开始位置。
?page=2&amp;per_page=100：指定第几页，以及每页的记录数。
?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。
?animal_type_id=1：指定筛选条件</pre>

<pre><code>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。

七、状态码（Status Code）
</code></pre><hr>
<pre><code>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。
</code></pre><pre class="prettyprint lang-js">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。
201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。
202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）
204 NO CONTENT - [DELETE]：用户删除数据成功。
400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。
401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。
403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。
404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。
406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。
410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。
422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。
500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</pre>

<pre><code>状态码的完全列表参见这里[http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)。

八、错误处理（Error Handling）
</code></pre><hr>
<pre><code>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。
</code></pre><pre class="prettyprint lang-js">{
    error: "Invalid API key"
}</pre>

<pre><code>九、返回结果
</code></pre><hr>
<pre><code>针对不同操作，服务器向用户返回的结果应该符合以下规范。
</code></pre><pre class="prettyprint lang-js">GET /collection：返回资源对象的列表（数组）
GET /collection/resource：返回单个资源对象
POST /collection：返回新生成的资源对象
PUT /collection/resource：返回完整的资源对象
PATCH /collection/resource：返回完整的资源对象
DELETE /collection/resource：返回一个空文档</pre>

<pre><code>十、Hypermedia API
</code></pre><hr>
<pre><code>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。

比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。
</code></pre><pre class="prettyprint lang-js">{"link": {
  "rel":   "collection https://www.example.com/zoos",
  "href":  "https://api.example.com/zoos",
  "title": "List of zoos",
  "type":  "application/vnd.yourformat+json"
}}</pre>

<pre><code>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。

Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问api.github.com会得到一个所有可用API的网址列表。
</code></pre><pre class="prettyprint lang-js">{
  "current_user_url": "https://api.github.com/user",
  "authorizations_url": "https://api.github.com/authorizations",
  // ...
}</pre>

<pre><code>从上面可以看到，如果想获取当前用户的信息，应该去访问[http://api.github.com/user](http://api.github.com/user)，然后就得到了下面结果。
</code></pre><pre class="prettyprint lang-js">{
  "message": "Requires authentication",
  "documentation_url": "https://developer.github.com/v3"
}</pre>

<pre><code>上面代码表示，服务器给出了提示信息，以及文档的网址。

十一、其他
</code></pre><hr>
<pre><code>（1）API的身份认证应该使用OAuth 2.0框架。

（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。

（完）
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有写博客了，最近刚好在弄公司的一个项目需要调用别人的API，其中遇到好多坑，今天将其记录下来，方便以后的学习。主要参考阮一峰的文章&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/restful_api.html&quot; tar
    
    </summary>
    
      <category term="API" scheme="http://www.chenqiangyi.cn/categories/API/"/>
    
    
      <category term="API" scheme="http://www.chenqiangyi.cn/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>鼠标或键盘控制3D盒子旋转</title>
    <link href="http://www.chenqiangyi.cn/2016/05/12/e9-bc-a0-e6-a0-87-e6-88-96-e9-94-ae-e7-9b-98-e6-8e-a7-e5-88-b63d-e7-9b-92-e5-ad-90-e6-97-8b-e8-bd-ac/"/>
    <id>http://www.chenqiangyi.cn/2016/05/12/e9-bc-a0-e6-a0-87-e6-88-96-e9-94-ae-e7-9b-98-e6-8e-a7-e5-88-b63d-e7-9b-92-e5-ad-90-e6-97-8b-e8-bd-ac/</id>
    <published>2016-05-11T16:59:22.000Z</published>
    <updated>2017-06-08T09:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究3D盒子的旋转问题，今天来学习一下通过鼠标或者键盘控制3D盒子的旋转，效图：</p>
<pre><code>![3Dbox](http://qxu1589900249.my3w.com/wp-content/uploads/2016/05/3Dbox-300x300.png)![3Dbox2](http://qxu1589900249.my3w.com/wp-content/uploads/2016/05/3Dbox2.png)

&lt;span style=&quot;font-size:14px;&quot;&gt;两种旋转的方式都需要先把盒子的布局完成，前面的几步是相同的&lt;/span&gt;

&lt;span style=&quot;font-size:14px;&quot;&gt;通过键盘控制3D盒子旋转，demo链接：[http://chenqiangyi.com/example/3Dbox1.html](http://chenqiangyi.com/example/3Dbox1.html)&lt;/span&gt;

&lt;span style=&quot;font-size:14px;&quot;&gt;通过鼠标控制3D盒子旋转，demo链接：[http://chenqiangyi.com/example/3Dbox1.html](http://chenqiangyi.com/example/3Dbox1.html)&lt;/span&gt;

&lt;span style=&quot;color:#E53333;font-size:16px;&quot;&gt;1.页面布局&lt;/span&gt;

&lt;span style=&quot;font-size:16px;&quot;&gt;需要一个大的盒子来包住，前后左右上下六个盒子，且他们的定位都是绝对定位，这样形成了六个盒子重叠到了一块，此时我们需要把盒子的每一个面变动一下，使其组合成一个盒子。此时我们需要想象一下盒子的3D空间，对于右边的那个面，他需要先沿Z轴正方向平移100px，然后再沿着y轴旋转正90度就得到了右边的面其中的代码：&lt;/span&gt;

&lt;span style=&quot;font-size:16px;&quot;&gt; &lt;/span&gt;
</code></pre><pre class="prettyprint lang-css">#div1 .right{ transform:rotateY(90deg) translateZ(100px);}</pre>
然后就是左边的面，和右边的相似，只是旋转角度相反而已：

    <span style="font-size:16px;"> </span>

<pre class="prettyprint lang-css">#div1 .left{ transform:rotateY(-90deg) translateZ(100px);}</pre>
前后面就是直接沿Z轴平移100px和-100px即可

    <span style="font-size:16px;"> </span>

<pre class="prettyprint lang-css">#div1 .front{ transform:translateZ(100px);}
#div1 .back{ transform:translateZ(-100px);}</pre>
上边的面就是沿Z轴平移100px然后再按照X轴旋转90度，相反下边的面沿y轴旋转-90度

    <span style="font-size:16px;"> </span>

<pre class="prettyprint lang-css">#div1 .top{ transform:rotateX(90deg) translateZ(100px);}
#div1 .bottom{ transform:rotateX(-90deg) translateZ(100px);}</pre>
然后就是为了看到3D效果，需要在其父级添加3D模型 &nbsp;transform-style: preserve-3d;

    <span style="font-size:16px;">这样基本的布局就完成了</span>

    <span style="font-size:16px;color:#E53333;">2.js控制</span>

<span style="font-size:14px;">首先介绍键盘的控制，我们知道键盘的按下去与松开都对应一个onkeydown事件和onkeyup事件，我们可以用事件对象获取其中的动作当按上键的时候我们可以得到他的ev.keycode=37,同理可以得到其他键的值，我们可以先定义bTop=bBotton=bLeft=bRight=false，当按下去的时候，判定哪个键对应的方向为true，然后当松开的 时候再令<span style="font-size:14px;line-height:21px;">bTop=bBotton=bLeft=bRight=false</span>这样在就可控制他的停止与运动了，然后我们开一个定时器，让他在某个方向上每隔30ms加10，这样就把X，y的值获取到了。</span>

    <span style="font-size:14px;"> </span>

<pre class="prettyprint lang-js">document.onkeydown=function(ev){
        if(ev.keyCode==37){
            bLeft=true;
        }
        if(ev.keyCode==38){
            bTop=true;
        }
        if(ev.keyCode==39){
            bRight=true;
        }
        if(ev.keyCode==40){
            bBotton=true;
        }
    }
    document.onkeyup=function(ev){
        if(ev.keyCode==37){
            bLeft=false;
        }
        if(ev.keyCode==38){
            bTop=false;
        }
        if(ev.keyCode==39){
            bRight=false;
        }
        if(ev.keyCode==40){
            bBotton=false;
        }
    }</pre>

<pre><code>&lt;span style=&quot;font-size:14px;&quot;&gt;然后就是改变他的X，y的变化，进行相应的运动变换&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">//左右 y
    var y=0;
    //上下
    var x=0;

    setInterval(function(){
        if(bLeft){
            y-=10;
        }
        if(bRight){
            y+=10;
        }
        if(bTop){
            x-=10;
        }
        if(bBotton){
            x+=10;
        }
        console.log(1)
        oDiv.style.transform="perspective(800px) rotateX("+-x+"deg) rotateY("+y+"deg)"
    },30)</pre>
<span style="font-size:14px;">这样键盘的控制就结束了，接下来就是鼠标的控制了</span>

    <span style="font-size:16px;color:#E53333;">3.鼠标的控制</span>

    <span style="font-size:14px;">主要运用鼠标的事件，当鼠标在网页上移动时会有相应的X和Y值得变化，这样我们就很容易得到鼠标的按下的位置和移动时的位置，我们可以根据在鼠标X轴移动的距离看做是他沿Y轴转动的角度，同时Y轴也是这样。</span>

<pre class="prettyprint lang-js">document.onmousedown=function(ev){
        var disX=ev.clientX-y;
        var disY=ev.clientY-x;

        document.onmousemove=function(ev){
            y=ev.clientX-disX;
            x=ev.clientY-disY;
            oDiv.style.transform="perspective(800px) rotateX("+-x+"deg) rotateY("+y+"deg)"

        }
        document.onmouseup=function(){
            document.onmousemove=document.onmouseup=null;
        }
        return false;
    }    </pre>
<span style="font-size:14px;">这样两个效果就基本完成了。</span>

    <span style="font-size:16px;color:#E53333;">4.总结</span>

    <span style="font-size:14px;">这个效果主要运用到了键盘的控制事件，以及盒子的拖拽模型，还有就是布局的知识，在以后会加上在移动端的控制。</span>

    <span style="font-size:14px;">最后附上两个模型的源代码：</span>

    <span style="font-size:14px;">键盘控制3D盒子旋转：</span>

<pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;
*{margin: 0;padding: 0;}
#div1{position: relative;width: 200px;height: 200px;margin: 100px auto;line-height: 200px;text-align: center;font-size: 30px;
    transform: perspective(800px) rotateX(0deg) rotateY(0deg);
    transform-style: preserve-3d;
    /*transition: 3s all ease;*/
}
#div1 div{position: absolute;left: 0;top: 0;width: 198px;height: 198px;border: 1px solid #000;background: yellow;}

#div1 .front{transform: translateZ(100px);background: green;}
#div1 .back{transform: translateZ(-100px);background: blue;}
#div1 .left{transform: rotateY(-90deg) translateZ(100px);background: pink;}
#div1 .right{transform: rotateY(90deg) translateZ(100px);background: red;}
#div1 .top{transform: rotateX(90deg) translateZ(100px);background: yellow;}
#div1 .bottom{transform: rotateX(-90deg) translateZ(100px);background:orange;}

/*#div1:hover{transform: perspective(800px) rotateX(-15deg) rotateY(360deg)}*/
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
window.onload=function(){
    var oDiv=document.querySelector("#div1")
    var bTop=bBotton=bLeft=bRight=false;
    //左右 y
    var y=0;
    //上下
    var x=0;

    setInterval(function(){
        if(bLeft){
            y-=10;
        }
        if(bRight){
            y+=10;
        }
        if(bTop){
            x-=10;
        }
        if(bBotton){
            x+=10;
        }
        console.log(1)
        oDiv.style.transform="perspective(800px) rotateX("+-x+"deg) rotateY("+y+"deg)"
    },30)

    document.onkeydown=function(ev){
        if(ev.keyCode==37){
            bLeft=true;
        }
        if(ev.keyCode==38){
            bTop=true;
        }
        if(ev.keyCode==39){
            bRight=true;
        }
        if(ev.keyCode==40){
            bBotton=true;
        }
    }
    document.onkeyup=function(ev){
        if(ev.keyCode==37){
            bLeft=false;
        }
        if(ev.keyCode==38){
            bTop=false;
        }
        if(ev.keyCode==39){
            bRight=false;
        }
        if(ev.keyCode==40){
            bBotton=false;
        }
    }
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id="div1"&gt;
    &lt;div class="front"&gt;前面&lt;/div&gt;
    &lt;div class="back"&gt;后面&lt;/div&gt;
    &lt;div class="left"&gt;左面&lt;/div&gt;
    &lt;div class="right"&gt;右面&lt;/div&gt;
    &lt;div class="top"&gt;上面&lt;/div&gt;
    &lt;div class="bottom"&gt;下面&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<pre><code>&lt;span style=&quot;font-size:14px;&quot;&gt;鼠标控制3D盒子旋转：&lt;/span&gt;
</code></pre><pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;
*{margin: 0;padding: 0;}
#div1{position: relative;width: 200px;height: 200px;margin: 100px auto;line-height: 200px;text-align: center;font-size: 30px;
    transform: perspective(800px) rotateX(45deg) rotateY(0deg);
    transform-style: preserve-3d;
    /*transition: 3s all ease;*/
}
#div1 div{position: absolute;left: 0;top: 0;width: 198px;height: 198px;border: 1px solid #000;background: yellow;}

#div1 .front{transform: translateZ(100px);background: green;}
#div1 .back{transform: translateZ(-100px);background: blue;}
#div1 .left{transform: rotateY(-90deg) translateZ(100px);background: pink;}
#div1 .right{transform: rotateY(90deg) translateZ(100px);background: red;}
#div1 .top{transform: rotateX(90deg) translateZ(100px);background: yellow;}
#div1 .bottom{transform: rotateX(-90deg) translateZ(100px);background:orange;}

/*#div1:hover{transform: perspective(800px) rotateX(-15deg) rotateY(360deg)}*/
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
window.onload=function(){
    var oDiv=document.querySelector("#div1")
    //左右 y
    var y=0;
    //上下
    var x=0;
    document.onmousedown=function(ev){
        var disX=ev.clientX-y;
        var disY=ev.clientY-x;

        document.onmousemove=function(ev){
            y=ev.clientX-disX;
            x=ev.clientY-disY;
            oDiv.style.transform="perspective(800px) rotateX("+-x+"deg) rotateY("+y+"deg)"

        }
        document.onmouseup=function(){
            document.onmousemove=document.onmouseup=null;
        }
        return false;
    }
}
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id="div1"&gt;
    &lt;div class="front"&gt;前面&lt;/div&gt;
    &lt;div class="back"&gt;后面&lt;/div&gt;
    &lt;div class="left"&gt;左面&lt;/div&gt;
    &lt;div class="right"&gt;右面&lt;/div&gt;
    &lt;div class="top"&gt;上面&lt;/div&gt;
    &lt;div class="bottom"&gt;下面&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<pre><code>&lt;span style=&quot;font-size:16px;&quot;&gt;over&lt;/span&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究3D盒子的旋转问题，今天来学习一下通过鼠标或者键盘控制3D盒子的旋转，效图：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;![3Dbox](http://qxu1589900249.my3w.com/wp-content/uploads/2016/05/3Dbox-300x30
    
    </summary>
    
      <category term="HTML5" scheme="http://www.chenqiangyi.cn/categories/HTML5/"/>
    
    
      <category term="CSS3" scheme="http://www.chenqiangyi.cn/tags/CSS3/"/>
    
      <category term="HTML5" scheme="http://www.chenqiangyi.cn/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>简单粗暴地理解js原型链–js面向对象编程(转)</title>
    <link href="http://www.chenqiangyi.cn/2016/05/11/e7-ae-80-e5-8d-95-e7-b2-97-e6-9a-b4-e5-9c-b0-e7-90-86-e8-a7-a3js-e5-8e-9f-e5-9e-8b-e9-93-be-js-e9-9d-a2-e5-90-91-e5-af-b9-e8-b1-a1-e7-bc-96-e7-a8-8b-e8-bd-ac/"/>
    <id>http://www.chenqiangyi.cn/2016/05/11/e7-ae-80-e5-8d-95-e7-b2-97-e6-9a-b4-e5-9c-b0-e7-90-86-e8-a7-a3js-e5-8e-9f-e5-9e-8b-e9-93-be-js-e9-9d-a2-e5-90-91-e5-af-b9-e8-b1-a1-e7-bc-96-e7-a8-8b-e8-bd-ac/</id>
    <published>2016-05-11T14:19:10.000Z</published>
    <updated>2017-06-08T09:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-size:14px;">今天在前端大全上看到一篇关于原型与原型链的文章，诙谐的语言加上逗逼的比喻，最重要的是讲的特别的透彻，于是就忍不住转载过来，充当学习的资料。本文内容转自微信公众号：前端大全。链接：</span><span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:14px;line-height:25.6px;background-color:#FFFFFF;"><a href="http://www.cnblogs.com/qieguo/archive/2016/05/03/5451626.html。接下来就是逗逼的文章了。" target="_blank" rel="external">http://www.cnblogs.com/qieguo/archive/2016/05/03/5451626.html。接下来就是逗逼的文章了。</a></span></p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:14px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;原型链理解起来有点绕了，网上资料也是很多，每次晚上睡不着的时候总喜欢在网上找点原型链和闭包的文章看，效果极好。&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:14px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;不要纠结于那一堆术语了，那除了让你脑筋拧成麻花，真的不能帮你什么。简单粗暴点看原型链吧，想点与代码无关的事，比如人、妖以及人妖。&lt;/span&gt;
</code></pre><p></p>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:14px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;&lt;span style=&quot;font-size:16px;line-height:24px;font-family:&apos;Microsoft YaHei&apos;;background-color:#F5F5F5;&quot;&gt;1）人是人他妈生的，妖是妖他妈生的。人和妖都是对象实例，而&lt;/span&gt;&lt;span style=&quot;font-size:16px;line-height:24px;font-family:&apos;Microsoft YaHei&apos;;background-color:#F5F5F5;&quot;&gt;人他妈和妖他妈就是原型。原型也是对象，叫原型对象。&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;

![](/wp-content/uploads/2016/05/20160521224834_96368.png)

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;2）人他妈和人他爸啪啪啪能生出一堆人宝宝、妖他妈和妖他爸啪啪啪能生出一堆妖宝宝，啪啪啪就是构造函数，俗称造人。&lt;/span&gt;
</code></pre><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/wp-content/uploads/2016/05/20160521224811_76474.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;3）人他妈会记录啪啪啪的信息，所以可以通过人他妈找到啪啪啪的信息，也就是说能通过原型对象找到构造函数。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;4）人他妈可以生很多宝宝，但这些宝宝只有一个妈妈，这就是原型的唯一性。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;5）人他妈也是由人他妈他妈生的，通过人他妈找到人他妈他妈，再通过人他妈他妈找到人他妈他妈……，这个关系叫做原型链。&lt;/span&gt;

![5](http://qxu1589900249.my3w.com/wp-content/uploads/2016/05/5.png)

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;6）原型链并不是无限的，当你通过人他妈一直往上找，最后发现你会发现人他妈他妈他妈……的他妈都不是人，也就是原型链最终指向null。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;7）人他妈生的人会有人的样子，妖他妈生的妖会有妖的丑陋，这叫继承。&lt;/span&gt;

![](/wp-content/uploads/2016/05/20160521224901_19458.png)

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;8）你继承了你妈的肤色，你妈继承了你妈他妈的肤色，你妈他妈……，这就是原型链的继承。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;9）你谈对象了，她妈让你带上房产证去提货，你若没有，那她妈会问你妈有没有，你妈没有那她妈会问你妈她妈有没有……这就是原型链的向上搜索。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;10）你会继承你妈的样子，但是你也可以去染发洗剪吹，就是说对象的属性可以自定义，会覆盖继承得到的属性。&lt;/span&gt;

![11](http://qxu1589900249.my3w.com/wp-content/uploads/2016/05/11.png)

11）虽然你洗剪吹了染成黄毛了，但你不能改变你妈的样子，你妈生的弟弟妹妹跟你的黄毛洗剪吹没一点关系，就是说对象实例不能改动原型的属性。

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;12）但是你家被你玩火烧了的话，那就是说你家你妈家你弟们家都被烧了，这就是原型属性的共享。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;13）你妈外号阿珍，邻居大娘都叫你阿珍儿，但你妈头发从飘柔做成了金毛狮王后，隔壁大婶都改口叫你包租仔，这叫原型的动态性。&lt;/span&gt;

![](/wp-content/uploads/2016/05/20160521224954_46031.png)

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;14）你妈爱美，又跑到韩国整形，整到你妈他妈都认不出来，即使你妈头发换回飘柔了，但隔壁邻居还是叫你金毛狮王子。因为没人认出你妈，整形后的你妈已经回炉再造了，这就是原型的整体重写。&lt;/span&gt;

![4](http://qxu1589900249.my3w.com/wp-content/uploads/2016/05/4.png)

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;尼玛！你特么也是够了！ Don’t BB！ Show me the code！&lt;/span&gt;
</code></pre><pre class="prettyprint lang-js">function Person (name) { this.name = name; }
function Mother () { }
Mother.prototype = {    //Mother的原型
    age: 18,
    home: ['Beijing', 'Shanghai']
};
Person.prototype = new Mother(); //Person的原型为Mother

//用chrome调试工具查看，提供了__proto__接口查看原型，这里有两层原型，各位还是直接看chrome好一点。
var p1 = new Person('Jack'); //p1:'Jack'; __proto__:{__proto__:18,['Beijing','Shanghai']}
var p2 = new Person('Mark'); //p2:'Mark'; __proto__:{__proto__:18,['Beijing','Shanghai']}

p1.age = 20;  
/* 实例不能改变原型的基本值属性，正如你洗剪吹染黄毛跟你妈无关
 * 在p1实例下增加一个age属性的普通操作，与原型无关。跟var o={}; o.age=20一样。
 * p1：下面多了个属性age，而__proto__跟 Mother.prototype一样，age=18。
 * p2：只有属性name，__proto__跟 Mother.prototype一样
 */

p1.home[0] = 'Shenzhen';
/* 原型中引用类型属性的共享，正如你烧了你家，就是烧了你全家的家
 * 这个先过，下文再仔细唠叨一下可好？
 * p1：'Jack',20; __proto__:{__proto__:18,['Shenzhen','Shanghai']}
 * p2：'Mark';    __proto__:{__proto__:18,['Shenzhen','Shanghai']}
 */

p1.home = ['Hangzhou', 'Guangzhou'];
/* 其实跟p1.age=20一样的操作。换成这个理解: var o={}; o.home=['big','house']
 * p1：'Jack',20,['Hangzhou','Guangzhou']; __proto__:{__proto__:18,['Shenzhen','Shanghai']}
 * p2：'Mark';                             __proto__:{__proto__:18,['Shenzhen','Shanghai']}
 */

delete p1.age;    
/* 删除实例的属性之后，原本被覆盖的原型值就重见天日了。正如你剃了光头，遗传的迷人小卷发就长出来了。
 * 这就是向上搜索机制，先搜你，然后你妈，再你妈他妈，所以你妈的改动会动态影响你。
 * p1：'Jack',['Hangzhou','Guangzhou']; __proto__:{__proto__:18,['Shenzhen','Shanghai']}
 * p2：'Mark';                          __proto__:{__proto__:18,['Shenzhen','Shanghai']}
 */

Person.prototype.lastName = 'Jin';
/* 改写原型，动态反应到实例中。正如你妈变新潮了，邻居提起你都说你妈真潮。
 * 注意，这里我们改写的是Person的原型，就是往Mother里加一个lastName属性，等同于Mother.lastName='Jin'
 * 这里并不是改Mother.prototype，改动不同的层次，效果往往会有很大的差异。
 * p1：'Jack',['Hangzhou','Guangzhou']; __proto__:{'jin',__proto__:18,['Shenzhen','Shanghai']}
 * p2：'Mark';                          __proto__:{'jin',__proto__:18,['Shenzhen','Shanghai']}
 */

Person.prototype = {
    age: 28,
    address: { country: 'USA', city: 'Washington' }
};
var p3 = new Person('Obama');
/* 重写原型！这个时候Person的原型已经完全变成一个新的对象了，也就是说Person换了个妈，叫后妈。
 * 换成这样理解：var a=10; b=a; a=20; c=a。所以b不变，变得是c，所以p3跟着后妈变化，与亲妈无关。
 * p1：'Jack',['Hangzhou','Guangzhou']; __proto__:{'jin',__proto__:18,['Shenzhen','Shanghai']}
 * p2：'Mark';                          __proto__:{'jin',__proto__:18,['Shenzhen','Shanghai']}
 * p3:'Obama';__proto__: 28 {country: 'USA', city: 'Washington'}
 */

Mother.prototype.no = 9527;
/* 改写原型的原型，动态反应到实例中。正如你妈他妈变新潮了，邻居提起你都说你丫外婆真潮。
 * 注意，这里我们改写的是Mother.prototype，p1p2会变，但上面p3跟亲妈已经了无瓜葛了，不影响他。
 * p1：'Jack',['Hangzhou','Guangzhou']; __proto__:{'jin',__proto__:18,['Shenzhen','Shanghai'],9527}
 * p2：'Mark';                          __proto__:{'jin',__proto__:18,['Shenzhen','Shanghai'],9527}
 * p3:'Obama';__proto__: 28 {country: 'USA', city: 'Washington'}
 */

Mother.prototype = {
    car: 2,
    hobby: ['run','walk']
};
var p4 = new Person('Tony');
/* 重写原型的原型！这个时候Mother的原型已经完全变成一个新的对象了！人他妈换了个后妈！
 * 由于上面Person与Mother已经断开联系了，这时候Mother怎么变已经不影响Person了。
 * p4:'Tony';__proto__: 28 {country: 'USA', city: 'Washington'}
 */

Person.prototype = new Mother(); //再次绑定
var p5 = new Person('Luffy');
// 这个时候如果需要应用这些改动的话，那就要重新将Person的原型绑到mother上了
// p5:'Luffy';__proto__:{__proto__: 2, ['run','walk']}

p1.__proto__.__proto__.__proto__.__proto__ //null，你说原型链的终点不是null？
Mother.__proto__.__proto__.__proto__    //null，你说原型链的终点不是null？</pre>
<span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">看完基本能理解了吧？</span>

    <span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">现在再来说说 p1.age = 20、p1.home = [‘Hangzhou’, ‘Guangzhou’] 和 &nbsp;p1.home[0] = ‘Shenzhen’ 的区别。 p1.home[0] = ‘Shenzhen’; &nbsp;总结一下是 p1.object.method，p1.object.property 这样的形式。</span>

    <span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">p1.age = 20; &nbsp;p1.home = [‘Hangzhou’, ‘Guangzhou’];这两句还是比较好理解的，先忘掉原型吧，想想我们是怎么为一个普通对象增加属性的：</span>

<pre class="prettyprint lang-js">var obj = new Object();
obj.name='xxx';
obj.num = [100, 200];</pre>
<span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">这样是不是就理解了呢？一样一样的呀。</span>

    <span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">那为什么 p1.home[0] = ‘Shenzhen’ 不会在 p1 下创建一个 home 数组属性，然后将其首位设为 ‘Shenzhen’呢？ 我们还是先忘了这个，想想上面的obj对象，如果写成这样： var obj.name = ‘xxx’, obj.num = [100, 200]，能得到你要的结果吗？ 显然，除了报错你什么都得不到。因为obj还未定义，又怎么能往里面加入东西呢？同理，p1.home[0]中的 home 在 p1 下并未被定义，所以也不能直接一步定义 home[0] 了。如果要在p1下创建一个 home 数组，当然是这么写了：</span>

<pre class="prettyprint lang-js">p1.home = [];
p1.home[0] = 'Shenzhen';</pre>
<span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">这不就是我们最常用的办法吗？</span>

    而之所以 p1.home[0] = ‘Shenzhen’ 不直接报错，是因为在原型链中有一个搜索机制。当我们输入 p1.object 的时候，原型链的搜索机制是先在实例中搜索相应的值，找不到就在原型中找，还找不到就再往上一级原型中搜索……一直到了原型链的终点，就是到null还没找到的话，就返回一个 undefined。当我们输入 p1.home[0] 的时候，也是同样的搜索机制，先搜索 p1 看有没有名为 home 的属性和方法，然后逐级向上查找。最后我们在Mother的原型里面找到了，所以修改他就相当于修改了 Mother 的原型啊。

<div>

</div>
<span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">一句话概括：p1.home[0] = ‘Shenzhen’ &nbsp;等同于 &nbsp;Mother.prototype.home[0] = ‘Shenzhen’。</span>

    <span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">由上面的分析可以知道，原型链继承的主要问题在于属性的共享，很多时候我们只想共享方法而并不想要共享属性，理想中每个实例应该有独立的属性。因此，原型继承就有了下面的两种改良方式：</span>

    **<span style="color:#E53333;font-size:16px;">1）组合继承</span>**<span style="color:#E53333;font-size:16px;"></span><span style="color:#E53333;font-size:16px;"></span>

    <span style="color:#E53333;font-size:16px;"><span style="color:;"><span style="color:;"></span></span></span>

<pre class="prettyprint lang-js">function Mother (age) {
    this.age = age;
    this.hobby = ['running','football']
}
Mother.prototype.showAge = function () {
    console.log(this.age);
};

function Person (name, age) {
    Mother.call(this, age);　　//第二次执行
    this.name = name;
}
Person.prototype = new Mother(); 　//第一次执行
Person.prototype.constructor = Person;
Person.prototype.showName = function () {
    console.log(this.name);
}

var p1 = new Person('Jack', 20);
p1.hobby.push('basketball');  //p1:'Jack'; __proto__:20,['running','football']
var p2 = new Person('Mark', 18);  //p2:'Mark'; __proto__:18,['running','football']</pre>

<pre><code>&lt;span style=&quot;background-color:;&quot;&gt;&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;结果是酱紫的：&lt;/span&gt;&lt;/span&gt;

![](/wp-content/uploads/2016/05/20160521225635_50823.png)![](/wp-content/uploads/2016/05/20160521225712_44768.png)

这里第一次执行的时候，得到 Person.prototype.age = undefined, Person.prototype.hobby = [‘running’,’football’]，第二次执行也就是 var p1 = new Person(‘Jack’, 20) 的时候，得到 p1.age =20, p1.hobby = [‘running’,’football’]，push后就变成了 p1.hobby = [‘running’,’football’, ‘basketball’]。其实分辨好 this 的变化，理解起来也是比较简单的，把 this 简单替换一下就能得到这个结果了。 如果感觉理解起来比较绕的话，试着把脑子里面的概念扔掉吧，把自己当浏览器从上到下执行一遍代码，结果是不是就出来了呢？

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;通过第二次执行原型的构造函数 Mother()，我们在对象实例中复制了一份原型的属性，这样就做到了与原型属性的分离独立。细心的你会发现，我们第一次调用 Mother()，好像什么用都没有呢，能不调用他吗？可以，就有了下面的寄生组合式继承。&lt;/span&gt;
</code></pre><div>

<p></p></div><br><span style="font-size:16px;color:#E53333;"></span><span style="font-size:16px;color:#E53333;"></span><span style="font-size:16px;color:#E53333;"></span><strong><span style="font-size:16px;color:#E53333;">2）寄生组合式继承</span></strong><span style="font-size:16px;color:#E53333;"></span><p></p>
<pre class="prettyprint lang-js">function object(o){
    function F(){}
    F.prototype = o;
    return new F();
}

function inheritPrototype(Person, Mother){
    var prototype = object(Mother.prototype);
    prototype.constructor = Person;    
    Person.prototype = prototype;    
}

function Mother (age) {
    this.age = age;
    this.hobby = ['running','football']
}
Mother.prototype.showAge = function () {
    console.log(this.age);
};

function Person (name, age) {
    Mother.call(this, age);
    this.name = name;
}

inheritPrototype(Person, Mother);

Person.prototype.showName = function () {
    console.log(this.name);
}

var p1 = new Person('Jack', 20);
p1.hobby.push('basketball');//p1:'Jack'; __proto__:20,['running','football']
var p2 = new Person('Mark', 18); //p2:'Mark'; __proto__:18,['running','football']</pre>
<span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">结果是酱紫的：</span>

    ![](/wp-content/uploads/2016/05/20160521225810_65716.png)![](/wp-content/uploads/2016/05/20160521225841_19299.png)

    <span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">原型中不再有 age 和 hobby 属性了，只有两个方法，正是我们想要的结果！</span>

    <span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">

</span>

    关键点在于 object(o) 里面，这里借用了一个临时对象来巧妙避免了调用new Mother()，然后将原型为 o 的新对象实例返回，从而完成了原型链的设置。很绕，对吧，那是因为我们不能直接设置 Person.prototype = Mother.prototype 啊。

    **<span style="font-size:16px;color:#E53333;">小结</span>**<span style="font-size:16px;color:#E53333;"></span>

<div>

        说了这么多，其实核心只有一个：属性共享和独立的控制，当你的对象实例需要独立的属性，所有做法的本质都是在对象实例里面创建属性。若不考虑太多，你大可以在Person里面直接定义你所需要独立的属性来覆盖掉原型的属性。总之，使用原型继承的时候，要对于原型中的属性要特别注意，因为他们都是牵一发而动全身的存在。

        下面简单罗列下js中创建对象的各种方法，现在最常用的方法是组合模式，熟悉的同学可以跳过到文章末尾点赞了。

**<span style="font-size:16px;color:#E53333;">1）原始模式</span>**<span style="font-size:16px;color:#E53333;"></span>

</div>
<pre class="prettyprint lang-js">//1.原始模式，对象字面量方式
var person = {
    name: 'Jack',
    age: 18,
    sayName: function () { alert(this.name); }
};
//1.原始模式，Object构造函数方式
var person = new Object();
person.name = 'Jack';
person.age = 18;
person.sayName = function () {
    alert(this.name);
};</pre>
<span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">

    <span style="color:#E53333;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">**2）工厂模式**</span>

    <span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;"> </span>

<pre class="prettyprint lang-js">//2.工厂模式，定义一个函数创建对象
function creatPerson (name, age) {
    var person = new Object();
    person.name = name;
    person.age = age;
    person.sayName = function () {
        alert(this.name);
    };
    return person;
}</pre>

<p></p></span><p></p>
<p>工厂模式就是批量化生产，简单调用就可以进入造人模式（<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/wp-content/uploads/2016/05/20160521225303_94229.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>啪啪啪……）。指定姓名年龄就可以造一堆小宝宝啦，解放双手。但是由于是工厂暗箱操作的，所以你不能识别这个对象到底是什么类型、是人还是狗傻傻分不清（instanceof 测试为 Object），另外每次造人时都要创建一个独立的temp对象，代码臃肿，雅蠛蝶啊。</p>
<pre><code>&lt;span style=&quot;font-size:16px;color:#E53333;&quot;&gt;&lt;/span&gt;**&lt;span style=&quot;font-size:16px;color:#E53333;&quot;&gt;3）构造函数&lt;/span&gt;**
</code></pre><pre class="prettyprint lang-js">//3.构造函数模式，为对象定义一个构造函数
function Person (name, age) {
    this.name = name;
    this.age = age;
    this.sayName = function () {
        alert(this.name);
    };    
}
var p1 = new Person('Jack', 18); //创建一个p1对象
Person('Jack', 18);    //属性方法都给window对象，window.name='Jack'，window.sayName()会输出Jack</pre>
<span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">构造函数与C++、JAVA中类的构造函数类似，易于理解，另外Person可以作为类型识别（instanceof 测试为 Person 、Object）。但是所有实例依然是独立的，不同实例的方法其实是不同的函数。这里把函数两个字忘了吧，把sayName当做一个对象就好理解了，就是说张三的 sayName 和李四的 sayName是不同的存在，但显然我们期望的是共用一个 sayName 以节省内存。</span>

    **<span style="font-size:16px;color:#E53333;">4）原型模式</span>**<span style="font-size:16px;color:#E53333;"></span>

<pre class="prettyprint lang-js">//4.原型模式，直接定义prototype属性
function Person () {}
Person.prototype.name = 'Jack';
Person.prototype.age = 18;
Person.prototype.sayName = function () { alert(this.name); };
//4.原型模式，字面量定义方式
function Person () {}
Person.prototype = {
    name: 'Jack',
    age: 18,
    sayName: function () { alert(this.name); }
};
var p1 = new Person(); //name='Jack'
var p2 = new Person(); //name='Jack'</pre>
<span style="color:#3E3E3E;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;">这里需要注意的是原型属性和方法的共享，即所有实例中都只是引用原型中的属性方法，任何一个地方产生的改动会引起其他实例的变化。</span>

    **<span style="color:#E53333;">5）混合模式（构造+原型）</span>**

<pre class="prettyprint lang-js">//5\. 原型构造组合模式，
function Person (name, age) {
    this.name = name;
    this.age = age;
}
Person.prototype = {
    hobby: ['running','football'];
    sayName: function () { alert(this.name); },
    sayAge: function () { alert(this.age); }
};
var p1 = new Person('Jack', 20);
//p1:'Jack',20; __proto__: ['running','football'],sayName,sayAge
var p2 = new Person('Mark', 18);
//p1:'Mark',18;__proto__: ['running','football'],sayName,sayAge</pre>

<pre><code>&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;做法是将需要独立的属性方法放入构造函数中，而可以共享的部分则放入原型中，这样做可以最大限度节省内存而又保留对象实例的独立性。&lt;/span&gt;

&lt;span style=&quot;color:#3E3E3E;font-family:&apos;Helvetica Neue&apos;, Helvetica, &apos;Hiragino Sans GB&apos;, &apos;Microsoft YaHei&apos;, Arial, sans-serif;font-size:16px;line-height:25.6px;background-color:#FFFFFF;&quot;&gt;
</code></pre><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-size:14px;&quot;&gt;今天在前端大全上看到一篇关于原型与原型链的文章，诙谐的语言加上逗逼的比喻，最重要的是讲的特别的透彻，于是就忍不住转载过来，充当学习的资料。本文内容转自微信公众号：前端大全。链接：&lt;/span&gt;&lt;span style
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.chenqiangyi.cn/tags/JavaScript/"/>
    
      <category term="原型与原型链" scheme="http://www.chenqiangyi.cn/tags/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>HTML5头图切换效果</title>
    <link href="http://www.chenqiangyi.cn/2016/05/11/html5-e5-a4-b4-e5-9b-be-e5-88-87-e6-8d-a2-e6-95-88-e6-9e-9c/"/>
    <id>http://www.chenqiangyi.cn/2016/05/11/html5-e5-a4-b4-e5-9b-be-e5-88-87-e6-8d-a2-e6-95-88-e6-9e-9c/</id>
    <published>2016-05-10T16:58:16.000Z</published>
    <updated>2017-06-08T09:47:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-size:14px;">HTML5配合上CSS3可以做出很炫的效果，这也是为什么越来越多的人学习H5的原因，话不多说，先放图</span>：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/wp-content/uploads/2016/05/20160522185643_14355.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<pre><code>&lt;span style=&quot;font-size:14px;&quot;&gt;从图中就可以看出大概的效果，当点击next或prev按钮是，图片向前或向后旋转切换拨动，并且是以立体的效果切换的，链接：[http://www.chenqiangyi.com/demo/switch/](http://www.chenqiangyi.com/demo/switch/)&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 接下来就来分享一下制作的方法&lt;/span&gt;：

**&lt;span style=&quot;font-size:16px;&quot;&gt;1.&lt;/span&gt;**&lt;span style=&quot;font-size:16px;&quot;&gt;**页面布局**&lt;/span&gt;

&lt;span style=&quot;font-size:14px;&quot;&gt;1.1首先需要有一个大盒子包裹着所有的元素，并且需要其为绝对定位relative，方便对其子元素的位置的控制;&lt;/span&gt;

&lt;span style=&quot;font-size:14px;&quot;&gt;1.2需要增加一个ul包含这一堆li，在&lt;/span&gt;&lt;span style=&quot;font-size:14px;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-size:14px;&quot;&gt;每个li中包含一张图片，并且是撑满li的，而且需要对li进行绝对定位absolute;&lt;/span&gt;

&lt;span style=&quot;font-size:14px;&quot;&gt;1.3在图中可以看到每次显示三张图片，哦~不对，应该是五张图片，还有两张图片在盒子的最边缘，在切换的时候就会隐掉，从左到右暂时规定图片的class为l2,l1,cur,r1,r2,当我们切换的时候只需改变每一张图片的class即可;&lt;/span&gt;

&lt;span style=&quot;font-size:14px;&quot;&gt;**2.**&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;**cssd的**&lt;/span&gt;&lt;span style=&quot;font-size:16px;&quot;&gt;**transition和transform控制**&lt;/span&gt;

&lt;span style=&quot;font-size:16px;line-height:24px;&quot;&gt;当页面刚开始加载的时候我们需要布局呈先如图的样式，这句需要运用transform的知识了，首先在刚开始的时候所有图片都平铺在最中间，对于最中间的图片的位置没有变，我们暂时不考虑，只需考虑两边的图片，右一图片r1可以看做是原来的图片向右移动了一段距离，然后沿着Y轴旋转一定角度得到的，那么问题来了，是如何旋转的，需要旋转多少度呢？这里有一个方法，就是人站在朝向y轴的正方向，如果顺时针旋转就为正角度，逆时针旋转就为负角度。就如图中的图片，如果要按照y轴旋转，你需要站在图片的正下方看图片，此时你看到的只是图片的一条棱，那么就可以看到图片逆时针旋转得到了图中的样式。如此一来，右二图l2就可以知道他是先向右移动一定距离，然后逆时针旋转了一个更大的角度。如此轮推就可以知道前面的两张图片是按照向左平移一定距离，然后顺时针旋转了一定的角度得到的，只是角度大小不同而已。五张图片的初始样式的css代码：&lt;/span&gt;

&lt;span style=&quot;font-size:16px;line-height:24px;&quot;&gt; &lt;/span&gt;
</code></pre><pre class="prettyprint lang-css">#ul1 li.l2{opacity: 0;z-index: 1;transform: perspective(800px) translateX(-300px) rotateY(45deg);}
#ul1 li.l1{opacity: 1;z-index: 3;transform: perspective(800px) translateX(-200px) rotateY(60deg);}
#ul1 li.cur{opacity: 1;z-index: 5;}
#ul1 li.r1{opacity: 1;z-index: 3;transform: perspective(800px) translateX(200px) rotateY(-60deg);}
#ul1 li.r2{opacity: 0;z-index: 1;transform: perspective(800px) translateX(300px) rotateY(-45deg);}</pre>

<pre><code>&lt;span style=&quot;font-size:16px;line-height:24px;&quot;&gt;**3.transform的初始化&amp;nbsp;transform: perspective(800px) rotateY(0);**&lt;/span&gt;

&lt;span style=&quot;font-size:16px;line-height:24px;&quot;&gt;在添加css的3D效果的时候要想看到立体的效果，需要添加一个视距的属性，这个属性的值越大类似站在比较远的地方看东西，可能会比较小，如果太近的话，就会看到物体特别大，所以合适的视距值很重要，一般perspective的值为800px的时候看到的物体的效果最佳。此时我们还需要初始化transform，否则的话在运动的时候会出现晃动的现象，初始化只需要在要添加运动的元素添加初始值transform: perspective(800px) rotateY(0);初始化代码：&lt;/span&gt;

&lt;span style=&quot;font-size:16px;line-height:24px;&quot;&gt; &lt;/span&gt;
</code></pre><pre class="prettyprint lang-css">#ul1 li{position: absolute;left: 0;top: 0;width: 100%;height: 100%;opacity: 0;transform: perspective(800px) rotateY(0);transition: 1s all ease;}</pre>
**<span style="font-size:16px;">4.js控制图片的切换</span>**

    <span style="font-size:16px;line-height:24px;">一般的思路就是对每一张图片的class挨个更换，这样可以达到效果，就是代码太冗余了，这里提供一个比较简便的用法：</span>

    <span style="font-size:16px;line-height:24px;">当点击next的按钮时，原本前一张图片往后退一步，加上class即可;因为同样是给下一张图片添加class，我们可以把所有的图片的存成一个数组，当切换下一张的时候，我们只需把第一张图片拿出来，添加到图片集合的尾部，这样图片他们原有的class就添加到了下一张图片上，这样下一张图片就有了图片原先的样式，再加上运动时间，这样运动的效果就做出来了，点击prev同样的方法，只是把最后一张添加到图片集的头部，这样同样实现了图片的切换。</span>

    <span style="font-size:16px;line-height:24px;">**5.解决next和prev连续点击出现的bug**</span>

    <span style="font-size:14px;">出现这样的bug是因为当图片本次的运动还没有完成时，继续点击按钮，出现了运动的凌乱，要解决这个bug，此时js刚好有一个叫transformend的事件，真是要风得风，要雨得雨，不禁感叹js的功能的强大，从字面上就可以看出这个事件的意思，就是当运动完成的时候出现的这个事件。因为每五张图片都是同时完成的，此时我们只需监听一张图片的运动结果即可。我们可以先定义一个变量aReady=true;当他的值为false时，不执行切换的函数，此时直接返回即可，然后设置aReady=false，当每一个的运动完成时再令aReady=true,这样就可以在一次运动完成之后再点击按钮才会执行下一次运动，这样这个H5的效果就基本完成了。</span>

    <span style="font-size:16px;line-height:24px;">**6.总结**</span>

    <span style="font-size:14px;">6.1先运用css对几行图片进项初始化布局</span>

    <span style="font-size:14px;">6.2.transform的初始化</span>

    <span style="font-size:14px;">6.3js的控制，每一次删除数组中最后一个，添加到最前面或者删除最前面的一个，添加到数组的最后面，然后更换图片的class</span>

    <span style="font-size:14px;">6.4解决bug，运用transformend函数。</span>

    <span style="font-size:14px;">6.5反思运用H5和css3做出更多比较炫的东西</span>

    <span style="font-size:16px;line-height:24px;">**7.源代码**</span>

    <span style="font-size:16px;line-height:24px;"> </span>

<pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;
*{margin: 0;padding: 0;list-style: none;}
.container{background: #aee2d9;width: 800px;margin: 100px auto;overflow: hidden;}
#ul1{position: relative;width: 400px;height: 200px;background: #ccc;margin: 100px auto;}
#ul1 li{position: absolute;left: 0;top: 0;width: 100%;height: 100%;opacity: 0;transform: perspective(800px) rotateY(0);transition: 1s all ease;}
#ul1 li img{width: 400px;}
#ul1 li.l2{opacity: 0;z-index: 1;transform: perspective(800px) translateX(-300px) rotateY(45deg);}
#ul1 li.l1{opacity: 1;z-index: 3;transform: perspective(800px) translateX(-200px) rotateY(60deg);}
#ul1 li.cur{opacity: 1;z-index: 5;}
#ul1 li.r1{opacity: 1;z-index: 3;transform: perspective(800px) translateX(200px) rotateY(-60deg);}
#ul1 li.r2{opacity: 0;z-index: 1;transform: perspective(800px) translateX(300px) rotateY(-45deg);}
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
    window.onload=function(){
        var oUl=document.getElementById("ul1");
        var oPrev=document.getElementById("prev");
        var oNext=document.getElementById("next");
        var aLi=oUl.children;
        var bReady=true;
        var aClass=[];
        for(var i=0;i&lt;aLi.length;i++){
            aClass.push(aLi[i].className)
        }
        //下一张
        oNext.onclick=function(){

            if(!bReady) return;
            bReady=false;

            aClass.unshift(aClass.pop());

            tab()
        };
        //上一张
        oPrev.onclick=function(){

            if(!bReady) return;
            bReady=false;

            aClass.push(aClass.shift());

            tab()
        };

        function tab(){
            for(var i=0;i&lt;aLi.length;i++){
                aLi[i].className=aClass[i];
            }

            var oCur=oUl.querySelector(".cur");
            oCur.addEventListener("transitionend",function(){
                bReady=true;
            },false)
        }
    }
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div class="container"&gt;
        &lt;input type="button" name="btn1" id="prev" value="上一张" /&gt;
        &lt;input type="button" name="btn1" id="next" value="下一张" /&gt;
        &lt;ul id="ul1"&gt;
            &lt;li class="l2"&gt;&lt;img src="images/1.jpg"/&gt;&lt;/li&gt;
            &lt;li class="l1"&gt;&lt;img src="images/2.jpg"/&gt;&lt;/li&gt;
            &lt;li class="cur"&gt;&lt;img src="images/3.jpg"/&gt;&lt;/li&gt;
            &lt;li class="r1"&gt;&lt;img src="images/4.jpg"/&gt;&lt;/li&gt;
            &lt;li class="r2"&gt;&lt;img src="images/5.jpg"/&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src="images/6.jpg"/&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src="images/7.jpg"/&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src="images/8.jpg"/&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src="images/9.jpg"/&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src="images/10.jpg"/&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src="images/11.jpg"/&gt;&lt;/li&gt;
            &lt;li&gt;&lt;img src="images/12.jpg"/&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>

<pre><code>over
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-size:14px;&quot;&gt;HTML5配合上CSS3可以做出很炫的效果，这也是为什么越来越多的人学习H5的原因，话不多说，先放图&lt;/span&gt;：&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;di
    
    </summary>
    
      <category term="HTML5" scheme="http://www.chenqiangyi.cn/categories/HTML5/"/>
    
    
      <category term="CSS3" scheme="http://www.chenqiangyi.cn/tags/CSS3/"/>
    
      <category term="HTML5" scheme="http://www.chenqiangyi.cn/tags/HTML5/"/>
    
      <category term="3D切换" scheme="http://www.chenqiangyi.cn/tags/3D%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>用css写一个时钟</title>
    <link href="http://www.chenqiangyi.cn/2016/05/08/e7-94-a8css-e5-86-99-e4-b8-80-e4-b8-aa-e6-97-b6-e9-92-9f/"/>
    <id>http://www.chenqiangyi.cn/2016/05/08/e7-94-a8css-e5-86-99-e4-b8-80-e4-b8-aa-e6-97-b6-e9-92-9f/</id>
    <published>2016-05-08T15:42:54.000Z</published>
    <updated>2017-06-08T09:45:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML5以及CSS3能做出许多特别炫的东西，这也是为什么越来越多人喜欢学习H5和CSS3了，今天来分享一个通过CSS3和原生js写出的时钟，先放链接：<a href="http://chenqiangyi.com/demo/cssClock.html" target="_blank" rel="external">http://chenqiangyi.com/demo/cssClock.html</a>,上面的时钟刻度以及指针的旋转都用了CSS3的tranform的rotate属性，接下来将主要方法吧。<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/wp-content/uploads/2016/05/20160522213317_88662.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<pre><code>**1、布局** css玩的就是布局，首先需要一个大盒子作为钟表的圆盘，然后就是三个指针，因为三个指针都需要摆动，所以指针需要是绝对定位的。可以先设置指针的top和left为50%，然后通过margin-top和margin-left分别为负的宽高的一半就会调整到中心位置最终可以把三个点固定到中心的cap位置上。

**2、****js控制** 现获取时间对象，获取每一刻的时iH、分iM、秒iS，然后通过修改每一个指针的每一刻旋转的角度来，控制钟表时间的转动；其中当时针每走一个刻度转动的角度是iH*30+iM/60*30,分针每走一个刻度转动的角度是iH*6+iM/60*6,秒针每走一个刻度转动的角度是iH*6+iMs/1000*6,其中不能忘了当时针转一定角度的时候分针也转动了一定角度，需要在加上时针转动的角度时时针转动的相应的角度oH.style.transform=&quot;rotate(&quot;+(iH*30+iM/60*30)+&quot;deg)&quot;;
</code></pre><p>oM.style.transform=”rotate(“+(iM<em>6+iS/60</em>6)+”deg)”;<br>oS.style.transform=”rotate(“+(iS<em>6+iMs/1000</em>6)+”deg)”;<br>然后给钟表添加一个定时器，就会看到钟表开始跑了，此时你会发现转动的角度乱七八糟，这是因为转动的旋转中心没有设定，需要把指针的旋转中心设置为tranform-origin:center bottom;也就是圆盘的正中心，这时就会看到指针正常了，如果你看到了秒针每次跳动几格，那是因为你的时分秒没有加上分秒毫秒转动时他们转动的角度。</p>
<pre><code>**3、添加钟表是时刻针** 如果手工添加的话就太笨重了，作为一名程序员当然是自动添加的，这时就有一个问题了：怎么让指针每隔五个刻度变大一次，这需要对刻度遍历，因为只有60个刻度，只需循环60次即可把指针创建出来。这时需要创建span标签，然后添加到表盘中，此时会看到所有的刻度针都挤在了12刻度出，这时需要对每一个刻度进行旋转一定角度，并且旋转的中心也是中心点就像：oSpan.style.transform=&quot;rotate(&quot;+i*6+&quot;deg)&quot;，然后再对5取余刚好正除的添加一个长一点的样式，此时就连时钟的刻度表也会出来了，此时你可能会感觉怪怪的，那是因为刻度数字也被旋转了，此时就需要对刻度数次重新调整方向：oSpan.children[0].style.transform=&quot;rotate(&quot;+(-i*6)+&quot;deg)&quot;让span的第一个子元素，也就是时刻度数归位，此时就会看到时钟的模型已经出来了。

**4、添加拖拽效果** 通过鼠标的拖拽实时改动盒子的left和top值就完成了拖拽

**5、总结** 通过钟表的制作自己对CSS3有了更多的认识，也感觉到了CSS3的强大，以后将会做出更多的CSS效果。&lt;!--more--&gt;&amp;nbsp;

代码：
</code></pre><pre class="prettyprint lang-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;
    #div1{width: 300px;height: 300px;position: absolute;border: 10px solid #0099ff;box-shadow: 1px 2px 2px #0099ff; border-radius: 50%;margin:auto;}
    #cap{position: absolute;width: 20px;height: 20px;border-radius: 50%;background: #0099ff;top: 50%;left: 50%;margin-left: -10px;margin-top: -10px;}
    #div1 div{transform-origin: center bottom}
    #hour{width: 10px;height: 80px;position: absolute;left: 50%;top: 50%;margin-left: -5px;background: #000;margin-top: -80px;}
    #minute{width: 8px;height: 100px;top: 50%;left: 50%;margin-left: -4px;margin-top: -100px;position: absolute;background: #000;}
    #second{width: 6px;height: 120px;left: 50%;top: 50%;margin-left: -3px;margin-top: -120px;position: absolute;background: red;}
    #div1 span{position: absolute;left: 50%;top: 0px;background: #000;width: 2px;margin-left: -2px;height: 8px;transform-origin: center 150px;}
    #div1 span.on{width: 4px;height: 12px;margin-left: -2px;}
    #div1 span strong{position: absolute;left: 50%;top: 10px;width: 40px;margin-left: -20px;text-align: center;font-weight: normal;}
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
    window.onload=function(){
        var oDiv=document.getElementById("div1");
        var oH=document.getElementById("hour");
        var oM=document.getElementById("minute");
        var oS=document.getElementById("second");
        var oSpan=document.getElementById("span");
        var oCap=document.getElementById("cap");
        function click(){
            var oDate=new Date();
            var iH=oDate.getHours();
            var iM=oDate.getMinutes();
            var iS=oDate.getSeconds();
            var iMs=oDate.getMilliseconds();
            oH.style.transform="rotate("+(iH*30+iM/60*30)+"deg)";
            oM.style.transform="rotate("+(iM*6+iS/60*6)+"deg)";
            oS.style.transform="rotate("+(iS*6+iMs/1000*6)+"deg)";
        }
        click();
        setInterval(click,30);
        //创建刻度
        for(var i=0;i&lt;60;i++){
            var oSpan=document.createElement("span");
            oDiv.appendChild(oSpan);
            if(i%5==0){
                oSpan.className="on";
                oSpan.innerHTML="&lt;strong&gt;"+(i==0?12:i/5)+"&lt;/strong&gt;";
                oSpan.children[0].style.transform="rotate("+(-i*6)+"deg)"
            }
            oSpan.style.transform="rotate("+i*6+"deg)"
        }

        oDiv.onmousedown=function(ev){
            var oEvt=ev||event;
            var disX=oEvt.clientX-oDiv.offsetLeft;
            var disY=oEvt.clientY-oDiv.offsetTop;
            document.onmousemove=function(ev){
                var oEvt=ev||event;
                oDiv.style.left=oEvt.clientX-disX+"px";
                oDiv.style.top=oEvt.clientY-disY+"px";
            }
            document.onmouseup=function(){
                document.onmousemove=document.onmouseup=null;
                oDiv.releaseCapture &amp;&amp; oDiv.releaseCapture();
            }
            oDiv.setCapture &amp;&amp; oDiv.setCapture();
            return false;
        }
    }
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id="div1"&gt;
    &lt;div id="hour"&gt;&lt;/div&gt;
    &lt;div id="minute"&gt;&lt;/div&gt;
    &lt;div id="second"&gt;&lt;/div&gt;
    &lt;div id="cap"&gt;&lt;/div&gt;
&lt;!--    &lt;span&gt;&lt;strong&gt;12&lt;/strong&gt;&lt;/span&gt;--&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML5以及CSS3能做出许多特别炫的东西，这也是为什么越来越多人喜欢学习H5和CSS3了，今天来分享一个通过CSS3和原生js写出的时钟，先放链接：&lt;a href=&quot;http://chenqiangyi.com/demo/cssClock.html&quot; target=&quot;_
    
    </summary>
    
      <category term="CSS" scheme="http://www.chenqiangyi.cn/categories/CSS/"/>
    
    
      <category term="CSS3" scheme="http://www.chenqiangyi.cn/tags/CSS3/"/>
    
      <category term="HTML5" scheme="http://www.chenqiangyi.cn/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>gulp学习笔记</title>
    <link href="http://www.chenqiangyi.cn/2016/05/05/gulp-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/"/>
    <id>http://www.chenqiangyi.cn/2016/05/05/gulp-e5-ad-a6-e4-b9-a0-e7-ac-94-e8-ae-b0/</id>
    <published>2016-05-05T15:43:03.000Z</published>
    <updated>2017-06-08T09:47:29.000Z</updated>
    
    <content type="html"><![CDATA[<div class="excerpt">

<h3 id="最近学习了一下代码构建工具中的gulp和grunt-两者的操作基本相似，在整个流程中配置部分容易出错，稍有一点错误，则项目就无法构建，在学习中前前后后装了几遍才得到gulp的正确姿势，现在来回顾一下gulp学习中用到的知识，用以复习和加深印象"><a href="#最近学习了一下代码构建工具中的gulp和grunt-两者的操作基本相似，在整个流程中配置部分容易出错，稍有一点错误，则项目就无法构建，在学习中前前后后装了几遍才得到gulp的正确姿势，现在来回顾一下gulp学习中用到的知识，用以复习和加深印象" class="headerlink" title="最近学习了一下代码构建工具中的gulp和grunt,两者的操作基本相似，在整个流程中配置部分容易出错，稍有一点错误，则项目就无法构建，在学习中前前后后装了几遍才得到gulp的正确姿势，现在来回顾一下gulp学习中用到的知识，用以复习和加深印象"></a>最近学习了一下代码构建工具中的gulp和grunt,两者的操作基本相似，在整个流程中配置部分容易出错，稍有一点错误，则项目就无法构建，在学习中前前后后装了几遍才得到gulp的正确姿势，现在来回顾一下gulp学习中用到的知识，用以复习和加深印象</h3><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。</p>
<p></p></div><p></p>
<article class="detail-concent clearfix"><br><br>gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。通过本文，我们将学习如何使用Gulp来改变开发流程，从而使开发更加快速高效。<br><br>gulp 和 grunt 非常类似，但相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。<br><br>### 1、安装nodejs<br><br>1.1、说明：gulp是基于nodejs，理所当然需要安装nodejs；<br><br>1.2、安装：打开官网<a href="https://nodejs.org/en/，目前node.js有两个版本，4.0版本和6.0版本，其中4.0版本是比较稳定的版本，6.0版本是刚增加上去的版本，之前的5.0版本已经被遗弃，4.0版本官网持续更新到明年，用来使各公司的项目有个过渡的升级。其中直接有Windows的版本，直接下载即可，然后就是安装node.js" target="_blank" rel="external">https://nodejs.org/en/，目前node.js有两个版本，4.0版本和6.0版本，其中4.0版本是比较稳定的版本，6.0版本是刚增加上去的版本，之前的5.0版本已经被遗弃，4.0版本官网持续更新到明年，用来使各公司的项目有个过渡的升级。其中直接有Windows的版本，直接下载即可，然后就是安装node.js</a>.<br><br>### 2、使用命令行<br><br>2.1、简单介绍gulp在使用过程中常用命令，打开命令提示符执行下列命令（打开方式：window + r 输入cmd回车）：<br><br><strong>node -v</strong>查看安装的nodejs版本，出现版本号，说明刚刚已正确安装nodejs。PS：未能出现版本号，请尝试注销电脑重试；<br><br><strong>npm -v</strong>查看npm的版本号，npm是在安装nodejs时一同安装的nodejs包管理器;<br><br><strong>cd</strong>定位到目录，用法：cd + 路径 ；<br><br><strong>dir</strong>列出文件列表；<br><br><strong>cls</strong>清空命令提示符窗口内容。<br><br>### 3、npm介绍<br><br>3.1、说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；<br><br>3.2、使用npm安装插件：命令提示符执行<strong><code>npm install &amp;lt;name&amp;gt; [-g] [--save-dev]</code></strong>；<br><br>3.2.1、<strong>&lt;name&gt;</strong>：node插件名称。例：<strong><code>npm install gulp-less --save-dev</code></strong><br><br>3.2.2、<strong>-g</strong>：全局安装。将会安装在<code>C:\Users\Administrator\AppData\Roaming\npm</code>，并且写入系统环境变量；  非全局安装：将会安装在当前定位目录；  全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node<em>modules文件夹下，通过require()调用；<br><br>3.2.3、<strong><code>--save</code></strong>：将保存配置信息至package.json（package.json是node.js的配置文件）；<br><br>3.2.4、<strong>-dev</strong>：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；<br><br>3.2.5、为什么要保存至package.json？因为node插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行<strong>npm install</strong>，则会根据package.json下载所有需要的包）。<br><br>3.3、使用npm卸载插件：<strong><code>npm uninstall &amp;lt;name&amp;gt; [-g] [--save-dev]</code></strong>  PS：不要直接删除本地插件包<br><br>3.4、使用npm更新插件：<strong>npm update &lt;name&gt; [-g] <code>[--save-dev]</code></strong><br><br>3.4.1、更新全部插件：<strong>npm update<code>[--save-dev]</code></strong><br><br>3.5、查看npm帮助：<strong>npm help</strong><br><br>3.6、当前目录已安装插件：<strong>npm list</strong><br><br>### 4、选装cnpm<br><br>4.1、说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。32个</em>_！来自官网：<strong>“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”</strong>；<br><br>4.2、官方网址：<a href="http://npm.taobao.org/" target="_blank" rel="external">http://npm.taobao.org</a>；<br><br>4.3、安装：命令提示符执行<strong><code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></strong>；  注意：安装完后最好查看其版本号<strong>cnpm -v</strong>或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；<br><br>注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。<br><br>### 5、全局安装gulp<br><br>5.1、说明：全局安装gulp目的是为了通过她执行gulp任务；<br><br>5.2、安装：命令提示符执行<strong>cnpm install gulp -g</strong>；<br><br>5.3、查看是否正确安装：命令提示符执行<strong>gulp -v</strong>，出现版本号即为正确安装。<br><br>### 6、新建package.json文件<br><br>6.1、说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件<br><br>6.2、它是这样一个json文件<br><div id="crayon-572b558d91ee5385903125-1" class="crayon-line"><span class="crayon-sy">{</span></div><br><div id="crayon-572b558d91ee5385903125-2" class="crayon-line crayon-striped-line"><span class="crayon-h">  </span><span class="crayon-s">“name”</span><span class="crayon-o">:</span> <span class="crayon-s">“test”</span><span class="crayon-sy">,</span><span class="crayon-h">   </span><span class="crayon-c">//项目名称（必须）</span></div><br><div id="crayon-572b558d91ee5385903125-3" class="crayon-line"><span class="crayon-h">  </span><span class="crayon-s">“version”</span><span class="crayon-o">:</span> <span class="crayon-s">“1.0.0”</span><span class="crayon-sy">,</span><span class="crayon-h">   </span><span class="crayon-c">//项目版本（必须）</span></div><br><div id="crayon-572b558d91ee5385903125-4" class="crayon-line crayon-striped-line"><span class="crayon-h">  </span><span class="crayon-s">“description”</span><span class="crayon-o">:</span> <span class="crayon-s">“This is for study gulp project !”</span><span class="crayon-sy">,</span><span class="crayon-h">   </span><span class="crayon-c">//项目描述（必须）</span></div><br><div id="crayon-572b558d91ee5385903125-5" class="crayon-line"><span class="crayon-h">  </span><span class="crayon-s">“homepage”</span><span class="crayon-o">:</span> <span class="crayon-s">“”</span><span class="crayon-sy">,</span><span class="crayon-h">   </span><span class="crayon-c">//项目主页</span></div><br><div id="crayon-572b558d91ee5385903125-6" class="crayon-line crayon-striped-line"><span class="crayon-h">  </span><span class="crayon-s">“repository”</span><span class="crayon-o">:</span> <span class="crayon-sy">{</span><span class="crayon-h">    </span><span class="crayon-c">//项目资源库</span></div><br><div id="crayon-572b558d91ee5385903125-7" class="crayon-line"><span class="crayon-h">    </span><span class="crayon-s">“type”</span><span class="crayon-o">:</span> <span class="crayon-s">“git”</span><span class="crayon-sy">,</span></div><br><div id="crayon-572b558d91ee5385903125-8" class="crayon-line crayon-striped-line"><span class="crayon-h">    </span><span class="crayon-s">“url”</span><span class="crayon-o">:</span> <span class="crayon-s">“<a href="https://git.oschina.net/xxxx" target="_blank" rel="external">https://git.oschina.net/xxxx</a>“</span></div><br><div id="crayon-572b558d91ee5385903125-9" class="crayon-line"><span class="crayon-h">  </span><span class="crayon-sy">}</span><span class="crayon-sy">,</span></div><br><div id="crayon-572b558d91ee5385903125-10" class="crayon-line crayon-striped-line"><span class="crayon-h">  </span><span class="crayon-s">“author”</span><span class="crayon-o">:</span> <span class="crayon-sy">{</span><span class="crayon-h">    </span><span class="crayon-c">//项目作者信息</span></div><br><div id="crayon-572b558d91ee5385903125-11" class="crayon-line"><span class="crayon-h">    </span><span class="crayon-s">“name”</span><span class="crayon-o">:</span> <span class="crayon-s">“surging”</span><span class="crayon-sy">,</span></div><br><div id="crayon-572b558d91ee5385903125-12" class="crayon-line crayon-striped-line"><span class="crayon-h">    </span><span class="crayon-s">“email”</span><span class="crayon-o">:</span> <span class="crayon-s">“surging2@qq.com”</span></div><br><div id="crayon-572b558d91ee5385903125-13" class="crayon-line"><span class="crayon-h">  </span><span class="crayon-sy">}</span><span class="crayon-sy">,</span></div><br><div id="crayon-572b558d91ee5385903125-14" class="crayon-line crayon-striped-line"><span class="crayon-h">  </span><span class="crayon-s">“license”</span><span class="crayon-o">:</span> <span class="crayon-s">“ISC”</span><span class="crayon-sy">,</span><span class="crayon-h">    </span><span class="crayon-c">//项目许可协议</span></div><br><div id="crayon-572b558d91ee5385903125-15" class="crayon-line"><span class="crayon-h">  </span><span class="crayon-s">“devDependencies”</span><span class="crayon-o">:</span> <span class="crayon-sy">{</span><span class="crayon-h">    </span><span class="crayon-c">//项目依赖的插件</span></div><br><div id="crayon-572b558d91ee5385903125-16" class="crayon-line crayon-striped-line"><span class="crayon-h">    </span><span class="crayon-s">“gulp”</span><span class="crayon-o">:</span> <span class="crayon-s">“^3.8.11”</span><span class="crayon-sy">,</span></div><br><div id="crayon-572b558d91ee5385903125-17" class="crayon-line"><span class="crayon-h">    </span><span class="crayon-s">“gulp-less”</span><span class="crayon-o">:</span> <span class="crayon-s">“^3.0.0”</span></div><br><div id="crayon-572b558d91ee5385903125-18" class="crayon-line crayon-striped-line"><span class="crayon-h">  </span><span class="crayon-sy">}</span></div><br><div id="crayon-572b558d91ee5385903125-19" class="crayon-line"><span class="crayon-sy">}</span></div><br>6.3、当然我们可以手动新建这个配置文件，我们应该使用更为效率的方法：命令提示符执行<strong>cnpm init</strong><br><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://qxu1589900249.my3w.com/wp-content/uploads/2016/05/gulp-3-246x300.png" alt="gulp-3" title="">
                </div>
                <div class="image-caption">gulp-3</div>
            </figure><br><br>### 7、本地安装gulp插件<br><br>7.1、安装：定位目录命令后提示符执行<strong><code>cnpm install --save-dev</code></strong>；<br><br>7.2、本示例以gulp-less为例（编译less文件），命令提示符执行<strong><code>cnpm install gulp-less --save-dev</code></strong><br><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://qxu1589900249.my3w.com/wp-content/uploads/2016/05/gulp-less-2-300x161.png" alt="gulp-less-2" title="">
                </div>
                <div class="image-caption">gulp-less-2</div>
            </figure><br><br>7.3、将会安装在node_modules的gulp-less目录下，该目录下有一个gulp-less的使用帮助文档README.md；<br><br>7.4、为了能正常使用，我们还得本地安装gulp：<strong><code>cnpm install gulp --save-dev</code></strong>；<br><br>PS：细心的你可能会发现，我们全局安装了gulp，项目也安装了gulp，全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。<br><br>### 8、新建gulpfile.js文件（重要）<br><br>8.1、说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）。<br><br>8.2、它大概是这样一个js文件：<br><br><div class="code-box"><br><div id="crayon-572b558d91f01919571102" class="crayon-syntax crayon-theme-raygun crayon-font-consolas crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover"><br><div class="crayon-toolbar" data-settings=" show"><br><div class="crayon-tools"><br><div id="crayon-572b558d91f01919571102-1" class="crayon-line"><span class="crayon-c">//导入工具包 require(‘node_modules里对应模块’)</span></div><br><div id="crayon-572b558d91f01919571102-2" class="crayon-line crayon-striped-line"><span class="crayon-t">var</span> <span class="crayon-v">gulp</span> <span class="crayon-o">=</span> <span class="crayon-e">require</span><span class="crayon-sy">(</span><span class="crayon-s">‘gulp’</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span> <span class="crayon-c">//本地安装gulp所用到的地方</span></div><br><div id="crayon-572b558d91f01919571102-3" class="crayon-line"><span class="crayon-h">    </span><span class="crayon-v">less</span> <span class="crayon-o">=</span> <span class="crayon-e">require</span><span class="crayon-sy">(</span><span class="crayon-s">‘gulp-less’</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><br><div id="crayon-572b558d91f01919571102-4" class="crayon-line crayon-striped-line"></div><br><div id="crayon-572b558d91f01919571102-5" class="crayon-line"><span class="crayon-c">//定义一个testLess任务（自定义任务名称）</span></div><br><div id="crayon-572b558d91f01919571102-6" class="crayon-line crayon-striped-line"><span class="crayon-v">gulp</span><span class="crayon-sy">.</span><span class="crayon-e">task</span><span class="crayon-sy">(</span><span class="crayon-s">‘testLess’</span><span class="crayon-sy">,</span> <span class="crayon-t">function</span> <span class="crayon-sy">(</span><span class="crayon-sy">)</span> <span class="crayon-sy">{</span></div><br><div id="crayon-572b558d91f01919571102-7" class="crayon-line"><span class="crayon-h">    </span><span class="crayon-v">gulp</span><span class="crayon-sy">.</span><span class="crayon-e">src</span><span class="crayon-sy">(</span><span class="crayon-s">‘src/less/index.less’</span><span class="crayon-sy">)</span> <span class="crayon-c">//该任务针对的文件</span></div><br><div id="crayon-572b558d91f01919571102-8" class="crayon-line crayon-striped-line"><span class="crayon-h">        </span><span class="crayon-sy">.</span><span class="crayon-e">pipe</span><span class="crayon-sy">(</span><span class="crayon-e">less</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span> <span class="crayon-c">//该任务调用的模块</span></div><br><div id="crayon-572b558d91f01919571102-9" class="crayon-line"><span class="crayon-h">        </span><span class="crayon-sy">.</span><span class="crayon-e">pipe</span><span class="crayon-sy">(</span><span class="crayon-v">gulp</span><span class="crayon-sy">.</span><span class="crayon-e">dest</span><span class="crayon-sy">(</span><span class="crayon-s">‘src/css’</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span> <span class="crayon-c">//将会在src/css下生成index.css</span></div><br><div id="crayon-572b558d91f01919571102-10" class="crayon-line crayon-striped-line"><span class="crayon-sy">}</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><br><div id="crayon-572b558d91f01919571102-11" class="crayon-line"></div><br><div id="crayon-572b558d91f01919571102-12" class="crayon-line crayon-striped-line"><span class="crayon-v">gulp</span><span class="crayon-sy">.</span><span class="crayon-e">task</span><span class="crayon-sy">(</span><span class="crayon-s">‘default’</span><span class="crayon-sy">,</span><span class="crayon-sy">[</span><span class="crayon-s">‘testLess’</span><span class="crayon-sy">,</span> <span class="crayon-s">‘elseTask’</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span> <span class="crayon-c">//定义默认任务</span></div><br><div id="crayon-572b558d91f01919571102-13" class="crayon-line"></div><br><div id="crayon-572b558d91f01919571102-14" class="crayon-line crayon-striped-line"><span class="crayon-c">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></div><br><div id="crayon-572b558d91f01919571102-15" class="crayon-line"><span class="crayon-c">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></div><br><div id="crayon-572b558d91f01919571102-16" class="crayon-line crayon-striped-line"><span class="crayon-c">//gulp.dest(path[, options]) 处理完后文件生成路径</span></div><br></div><br></div><br><div class="crayon-plain-wrap"><br><br>### 9、运行gulp<br><br>9.1、说明：命令提示符执行<strong>gulp 任务名称</strong>；<br><br>9.2、编译less：命令提示符执行<strong>gulp testLess</strong>；<br><br>9.3、当执行<strong>gulp default</strong>或<strong>gulp</strong>将会调用default任务里的所有任务[‘testLess’,’elseTask’]<br><br><strong>10、</strong>其中gulp的安装顺序应该为：<br><br>10.1      运行环境   npm install gulp-cli -g<br>10.2    初始化   package.json文件      npm init<br><br>10.3    执行环境    npm install gulp –save-dev        然后在你创建项目的目录里出现node_modules文件夹，并且里面需要有gulp文件夹，否则后面的操作不能用<br><br>10.4    安装插件    npm install –save-dev gulp-uglify      可以在github上面找到相应的插件功能介绍<br><br>10.5    创建gulpfile.js文件，并且一个项目中只有一个gulpfile.js文件，而且系统只认这个文件，如果要进行不同的工程操作就需要修改里面的配置文件了<br><br><strong>10.5.1</strong>压缩文件的配置：<br><br>//1 请求一个模块<br>var gulp = require(“gulp”);<br>var uglify = require(“gulp-uglify”);<br><br>//2 配置任务<br>gulp.task(“yasjs”,function(){<br>return gulp.src(“src/<em>.js”)<br>.pipe(uglify())<br>.pipe(gulp.dest(“dest”));<br>//.pipe(gulp.dest(“dest/all.min.js”));//不能写文件名 只能是目录<br>});<br><br>//3 注册任务<br>gulp.task(“defalut”,[“yasjs”]);<br><br> 其中请求模块和注册任务基本是不变的，只需要修改配置任务即可，例子中的</em>.js代表的是src目录下的所有js文件，后面的.pipe(gulp.dest(“dest”));只能是目录，dest中不能包含文件名。<br><br><strong>10.5.2压缩合并</strong><br><br>//1 请求一个模块<br>var gulp = require(“gulp”);<br>var uglify = require(“gulp-uglify”);<br>var rename = require(“gulp-rename”);<br>//concat 使用的时候必有文件名称<br>var concat = require(“gulp-concat”);<br>var cssmin = require(“gulp-cssmin”);<br><br>//2 配置任务<br>gulp.task(“cssmin”,function(){<br>return gulp.src(“src/*.css”)<br>.pipe(concat(“all.css”))<br>.pipe(cssmin())//不要重名 没有参数<br>.pipe(rename(“all.min.css”))<br>.pipe(gulp.dest(“dest”));<br><br>});<br><br>//3 注册任务<br>gulp.task(“default”,[“cssmin”]);<br><br> 请求模块和注册模块基本不变，配置部分的cssmin()中没有参数，不要重名，他们的顺序是先合并，再压缩<br><br>### 11、总结<br><br>11.1、安装nodejs；<br><br>11.2、新建package.json文件；<br><br>11.3、全局和本地安装gulp；<br><br>11.4、安装gulp插件；<br><br>11.5、新建gulpfile.js文件；<br><br>11.6、通过命令提示符运行gulp任务。<br><br></div><br></div><br></div><br></article>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;excerpt&quot;&gt;

&lt;h3 id=&quot;最近学习了一下代码构建工具中的gulp和grunt-两者的操作基本相似，在整个流程中配置部分容易出错，稍有一点错误，则项目就无法构建，在学习中前前后后装了几遍才得到gulp的正确姿势，现在来回顾一下gulp学习中用到的
    
    </summary>
    
      <category term="构建工具" scheme="http://www.chenqiangyi.cn/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="http://www.chenqiangyi.cn/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>第一篇blog</title>
    <link href="http://www.chenqiangyi.cn/2016/04/29/e7-ac-ac-e4-b8-80-e7-af-87blog/"/>
    <id>http://www.chenqiangyi.cn/2016/04/29/e7-ac-ac-e4-b8-80-e7-af-87blog/</id>
    <published>2016-04-29T08:39:06.000Z</published>
    <updated>2017-06-08T08:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了好久，个人博客终于上线了，以前在CSDN上面写一些学习上的感悟，总是需要审核，最后想了想还是自己搭建一个个人博客来写点生活学习上的点点滴滴，一方面是对学习成果的复习以及反思，另一方面是对人生的每个阶段的总结。刚开始学习前端的时候每次遇到问题都会在网上看一些大牛的技术博客，都讲解的特别清晰，从他们的博客中可以看出他们的技术积累。诚然，学习每一样东西都是不断地积累，在积累中不断成长，以后就在这里记录自己学习的历程，不断地积累自己的技术栈。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了好久，个人博客终于上线了，以前在CSDN上面写一些学习上的感悟，总是需要审核，最后想了想还是自己搭建一个个人博客来写点生活学习上的点点滴滴，一方面是对学习成果的复习以及反思，另一方面是对人生的每个阶段的总结。刚开始学习前端的时候每次遇到问题都会在网上看一些大牛的技术博
    
    </summary>
    
      <category term="blog" scheme="http://www.chenqiangyi.cn/categories/blog/"/>
    
    
      <category term="blog" scheme="http://www.chenqiangyi.cn/tags/blog/"/>
    
  </entry>
  
</feed>
